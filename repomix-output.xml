This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/rules/000-cursor-rules.mdc
.cursor/rules/100-say-something.mdc
.cursor/rules/200-safe-modifications.mdc
.cursor/rules/2001-tailwind-styling.mdc
.cursor/rules/201-targeted-ui-mods.mdc
.cursor/rules/202-preserve-data-display.mdc
.cursor/rules/203-preserve-relationship-access.mdc
.cursor/rules/204-no-unauthorized-modifications.mdc
.cursor/rules/300-department-role-check.mdc
.cursor/rules/400-md-docs.mdc
.cursor/rules/500-blade-error-handling.mdc
.cursor/rules/600-route-grouping.mdc
.cursor/rules/901-prd.mdc
.cursor/rules/902-arch.mdc
.cursor/rules/903-story.mdc
.cursorignore
.editorconfig
.env.example
.gitattributes
.gitignore
app/Console/Commands/ResetDatabase.php
app/Console/Commands/SoftDeleteAllInventories.php
app/Console/Kernel.php
app/Exceptions/Handler.php
app/Exports/AssetExportReport.php
app/Exports/AssetsExport.php
app/Exports/InventoryExport.php
app/Exports/InventoryExportReport.php
app/Http/Controllers/ActivityController.php
app/Http/Controllers/AlertController.php
app/Http/Controllers/AssetController.php
app/Http/Controllers/BrandController.php
app/Http/Controllers/CategoryController.php
app/Http/Controllers/ConditionController.php
app/Http/Controllers/Controller.php
app/Http/Controllers/CustomerController.php
app/Http/Controllers/DashboardController.php
app/Http/Controllers/DepartmentController.php
app/Http/Controllers/DepartmentReportController.php
app/Http/Controllers/EmployeeController.php
app/Http/Controllers/IndexController.php
app/Http/Controllers/InventoryController.php
app/Http/Controllers/LeaseController.php
app/Http/Controllers/LeaseItemController.php
app/Http/Controllers/LocationController.php
app/Http/Controllers/LoginController.php
app/Http/Controllers/MaintenanceController.php
app/Http/Controllers/ProfileController.php
app/Http/Controllers/PurchaseOrderController.php
app/Http/Controllers/ReportController.php
app/Http/Controllers/RequestController.php
app/Http/Controllers/RoleController.php
app/Http/Controllers/SiteController.php
app/Http/Controllers/StatusController.php
app/Http/Controllers/StockOutController.php
app/Http/Controllers/SupplierController.php
app/Http/Controllers/TestController.php
app/Http/Controllers/UnitController.php
app/Http/Controllers/UserController.php
app/Http/Kernel.php
app/Http/Middleware/Authenticate.php
app/Http/Middleware/AuthenticateUser.php
app/Http/Middleware/AuthMiddleware.php
app/Http/Middleware/CheckUserRole.php
app/Http/Middleware/ClearCacheMiddleware.php
app/Http/Middleware/EncryptCookies.php
app/Http/Middleware/PreventRequestsDuringMaintenance.php
app/Http/Middleware/RedirectIfAuthenticated.php
app/Http/Middleware/TrimStrings.php
app/Http/Middleware/TrustHosts.php
app/Http/Middleware/TrustProxies.php
app/Http/Middleware/ValidateSignature.php
app/Http/Middleware/VerifyCsrfToken.php
app/Models/Alert.php
app/Models/Asset.php
app/Models/AssetEditHistory.php
app/Models/Brand.php
app/Models/Category.php
app/Models/Condition.php
app/Models/Customer.php
app/Models/Department.php
app/Models/DisposedStatus.php
app/Models/Employee.php
app/Models/Inventory.php
app/Models/InventoryEditHistory.php
app/Models/Lease.php
app/Models/LeaseItem.php
app/Models/Location.php
app/Models/Maintenance.php
app/Models/PurchaseOrder.php
app/Models/RequestedItem.php
app/Models/Role.php
app/Models/Site.php
app/Models/Status.php
app/Models/StockOut.php
app/Models/Supplier.php
app/Models/SupplyRequest.php
app/Models/Unit.php
app/Models/User.php
app/Models/ViewedAlert.php
app/Providers/AppServiceProvider.php
app/Providers/AuthServiceProvider.php
app/Providers/BroadcastServiceProvider.php
app/Providers/EventServiceProvider.php
app/Providers/RouteServiceProvider.php
app/Services/ReportPrintService.php
app/View/Components/AddItemModal.php
app/View/Components/MonthlySupplierReport.php
artisan
bootstrap/app.php
bootstrap/cache/.gitignore
composer install.cmd
composer.json
config/app.php
config/auth.php
config/broadcasting.php
config/cache.php
config/cors.php
config/database.php
config/excel.php
config/filesystems.php
config/hashing.php
config/logging.php
config/mail.php
config/queue.php
config/sanctum.php
config/services.php
config/session.php
config/view.php
Custom Commands.txt
database/.gitignore
database/factories/UserFactory.php
database/migrations/2014_10_12_000000_create_users_table.php
database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
database/migrations/2019_08_19_000000_create_failed_jobs_table.php
database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
database/migrations/2024_08_09_144335_create_catergories_table.php
database/migrations/2024_08_09_144418_create_departments_table.php
database/migrations/2024_08_09_144434_create_sites_table.php
database/migrations/2024_08_09_144442_create_locations_table.php
database/migrations/2024_08_09_144510_create_suppliers_table.php
database/migrations/2024_08_09_144535_create_customers_table.php
database/migrations/2024_08_09_144549_create_maintenances_table.php
database/migrations/2024_08_09_144604_create_roles_table.php
database/migrations/2024_08_09_144642_create_user_table.php
database/migrations/2024_08_09_144816_create_assets_table.php
database/migrations/2024_08_09_144832_create_inventories_table.php
database/migrations/2024_08_18_092742_create_leases_table.php
database/migrations/2024_08_18_092805_create_lease_items_table.php
database/migrations/2024_08_30_072217_create_asset_edit_history_table.php
database/migrations/2024_09_28_171531_create_stock_outs_table.php
database/migrations/2024_10_01_055732_create_alerts_table.php
database/migrations/2024_10_09_053834_create_purchase_orders_table.php
database/migrations/2024_12_11_043000_create_inventory_edit_histories_table.php
database/migrations/2024_12_15_031113_create_supply_requests_table.php
database/migrations/2024_12_15_093510_create_employees_table.php
database/migrations/2025_01_13_224834_create_requested_items_table.php
database/migrations/2025_01_16_075827_create_viewed_alerts_table.php
database/seeders/AssetSeeder.php
database/seeders/ConditionSeeder.php
database/seeders/DatabaseSeeder.php
database/seeders/DefaultUserSeeder.php
database/seeders/ForeignRelatedTablesSeeder.php
database/seeders/InventorySeeder.php
database/seeders/RoleSeeder.php
docs/workflow-rules.md
For QR Code/index.html
generate_sample_data.php
If you want to install maatwebsiteexcel, read this first.txt
inventories.csv
Notes for printing the supplies purchased per month.txt
npm install.cmd
npm run build.cmd
npm run dev.cmd
Open the project.url
package.json
php artisan dbseed.cmd
php artisan dbwipe.cmd
php artisan keygenerate.cmd
php artisan migrate.cmd
php artisan serve.cmd
php artisan storagelink.cmd
phpunit.xml
postcss.config.js
projectStructure.txt
prompt.txt
prompts.txt
public/.htaccess
public/css/addAsset.css
public/css/asset.css
public/css/dashboard.css
public/css/inventory.css
public/css/login.css
public/css/signup.css
public/css/stockin.css
public/css/style.css
public/index.php
public/js/alpine.min.js
public/js/assetValueDistributionChart.js
public/js/chart.js
public/js/errorMessageTimer.js
public/js/sidebarLinkDropdownScript.js
public/js/successMessageTimer.js
public/robots.txt
READ ME.txt
README.md
resources/css/app.css
resources/js/app.js
resources/js/bootstrap.js
resources/views/components/add-item-modal.blade.php
resources/views/components/monthly-supplier-report.blade.php
resources/views/fcu-ams/activities/index.blade.php
resources/views/fcu-ams/alert/alerts.blade.php
resources/views/fcu-ams/alert/expiring-leases.blade.php
resources/views/fcu-ams/alert/maintenance.blade.php
resources/views/fcu-ams/alert/pending-requests.blade.php
resources/views/fcu-ams/alert/show.blade.php
resources/views/fcu-ams/asset/addAsset.blade.php
resources/views/fcu-ams/asset/assetList.blade.php
resources/views/fcu-ams/asset/disposedAssets.blade.php
resources/views/fcu-ams/asset/maintenance.blade.php
resources/views/fcu-ams/asset/qrCode.blade.php
resources/views/fcu-ams/asset/updateAsset.blade.php
resources/views/fcu-ams/asset/viewAsset.blade.php
resources/views/fcu-ams/brands/brandsList.blade.php
resources/views/fcu-ams/categories/categoriesList.blade.php
resources/views/fcu-ams/conditions/conditionsList.blade.php
resources/views/fcu-ams/dashboard.blade.php
resources/views/fcu-ams/departments/departmentsList.blade.php
resources/views/fcu-ams/inventory/inventoryList.blade.php
resources/views/fcu-ams/inventory/lowStock.blade.php
resources/views/fcu-ams/inventory/myRequests.blade.php
resources/views/fcu-ams/inventory/old-supply-request-details.blade.php
resources/views/fcu-ams/inventory/outOfStock.blade.php
resources/views/fcu-ams/inventory/printSupplyRequest.blade.php
resources/views/fcu-ams/inventory/purchaseOrder.blade.php
resources/views/fcu-ams/inventory/stockIn.blade.php
resources/views/fcu-ams/inventory/stockOut.blade.php
resources/views/fcu-ams/inventory/supplyRequest.blade.php
resources/views/fcu-ams/inventory/supplyRequestDetails.blade.php
resources/views/fcu-ams/inventory/updateStock.blade.php
resources/views/fcu-ams/inventory/viewInventory.blade.php
resources/views/fcu-ams/lease/lease.blade.php
resources/views/fcu-ams/lease/leaseForm.blade.php
resources/views/fcu-ams/lease/selectAssets.blade.php
resources/views/fcu-ams/lease/view-lease.blade.php
resources/views/fcu-ams/locations/locationsList.blade.php
resources/views/fcu-ams/profile/profile.blade.php
resources/views/fcu-ams/reports/department-reports.blade.php
resources/views/fcu-ams/reports/print-approved-request.blade.php
resources/views/fcu-ams/reports/purchase-order-details.blade.php
resources/views/fcu-ams/reports/reports.blade.php
resources/views/fcu-ams/reports/stock-out-details.blade.php
resources/views/fcu-ams/request/index.blade.php
resources/views/fcu-ams/request/notifications.blade.php
resources/views/fcu-ams/sites/sitesList.blade.php
resources/views/fcu-ams/statuses/statusesList.blade.php
resources/views/fcu-ams/suppliers/suppliersList.blade.php
resources/views/fcu-ams/test-form.blade.php
resources/views/fcu-ams/users/usersList.blade.php
resources/views/layouts/layout.blade.php
resources/views/layouts/messageWithoutTImerForError.blade.php
resources/views/layouts/messageWithTImerForError.blade.php
resources/views/layouts/modals/asset/deleteAsset.blade.php
resources/views/layouts/modals/brand/addNewBrand.blade.php
resources/views/layouts/modals/brand/deleteBrand.blade.php
resources/views/layouts/modals/brand/editBrand.blade.php
resources/views/layouts/modals/category/addNewCategory.blade.php
resources/views/layouts/modals/category/deleteCategory.blade.php
resources/views/layouts/modals/category/editCategory.blade.php
resources/views/layouts/modals/condition/addNewCondition.blade.php
resources/views/layouts/modals/condition/deleteCondition.blade.php
resources/views/layouts/modals/condition/editCondition.blade.php
resources/views/layouts/modals/department/addNewDepartment.blade.php
resources/views/layouts/modals/department/deleteDepartment.blade.php
resources/views/layouts/modals/department/editDepartment.blade.php
resources/views/layouts/modals/inventory/deleteInventory.blade.php
resources/views/layouts/modals/location/addNewLocation.blade.php
resources/views/layouts/modals/location/deleteLocation.blade.php
resources/views/layouts/modals/location/editLocation.blade.php
resources/views/layouts/modals/logout.blade.php
resources/views/layouts/modals/new/add-item-modal.blade.php
resources/views/layouts/modals/site/addNewSite.blade.php
resources/views/layouts/modals/site/deleteSite.blade.php
resources/views/layouts/modals/site/editSite.blade.php
resources/views/layouts/modals/status/addNewStatus.blade.php
resources/views/layouts/modals/status/deleteStatus.blade.php
resources/views/layouts/modals/status/editStatus.blade.php
resources/views/layouts/modals/supplier/addNewSupplier.blade.php
resources/views/layouts/modals/supplier/deleteSupplier.blade.php
resources/views/layouts/modals/supplier/editSupplier.blade.php
resources/views/layouts/modals/user/addNewUser.blade.php
resources/views/layouts/modals/user/deleteUser.blade.php
resources/views/layouts/modals/user/editUser.blade.php
resources/views/layouts/modals/user/viewUser.blade.php
resources/views/layouts/sidebar-links.blade.php
resources/views/layouts/sidebar.blade.php
resources/views/login.blade.php
resources/views/reports/assigned-assets-pdf.blade.php
resources/views/reports/monthly-assets-pdf.blade.php
resources/views/reports/monthly-supplier-pdf.blade.php
resources/views/signup.blade.php
resources/views/test/dummy.blade.php
resources/views/test/purchaseOrder.blade.php
resources/views/test/stockin.blade.php
resources/views/test/stockout.blade.php
routes/api.php
routes/channels.php
routes/console.php
routes/web.php
rules.md
sample_assets_import.csv
sample_inventories_import_with_missing_field.csv
sample_inventories_import.csv
serve and run dev.cmd
storage/app/.gitignore
storage/app/public/.gitignore
storage/framework/.gitignore
storage/framework/cache/.gitignore
storage/framework/cache/data/.gitignore
storage/framework/sessions/.gitignore
storage/framework/testing/.gitignore
storage/framework/views/.gitignore
storage/logs/.gitignore
tailwind.config.js
tests/CreatesApplication.php
tests/Feature/ExampleTest.php
tests/TestCase.php
tests/Unit/ExampleTest.php
vite.config.js
xnotes/801-workflow-agile.mdc
xnotes/git-push-command.md
xnotes/implementation-agile.md
xnotes/project-idea-prompt.md
xnotes/rules-for-ai.md
xnotes/workflow-agile.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4
</file>

<file path=".env.example">
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=fcuAmsDb
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
</file>

<file path=".gitattributes">
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore
</file>

<file path=".gitignore">
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/vendor
.env
.env.backup
.env.production
.phpunit.result.cache
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
/.fleet
/.idea
/.vscode
</file>

<file path="app/Console/Commands/ResetDatabase.php">
<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class ResetDatabase extends Command
{
    protected $signature = 'db:reset';
    protected $description = 'Resets the database by wiping, migrating, and seeding';

    public function handle()
    {
        $this->call('db:wipe');
        $this->call('migrate');
        $this->call('db:seed');
        
        $this->info('Database reset successfully!');
    }
}
</file>

<file path="app/Console/Kernel.php">
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule): void
    {
        // $schedule->command('inspire')->hourly();
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}
</file>

<file path="app/Exceptions/Handler.php">
<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
}
</file>

<file path="app/Exports/AssetsExport.php">
<?php

namespace App\Exports;

use App\Models\Asset;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;

class AssetsExport implements FromCollection, WithHeadings
{
    /**
    * @return \Illuminate\Support\Collection
    */
    public function collection()
    {
        return Asset::with(['supplier', 'site', 'location', 'category', 'department', 'status','condition'])
            ->get()
            ->map(function ($asset) {
                return [
                    'Asset Tag ID' => $asset->asset_tag_id,
                    'Specification' => $asset->specs,
                    'Brand' => $asset->brand->brand,
                    'Model' => $asset->model,
                    'Serial Number' => $asset->serial_number,
                    'Category' => $asset->category->category,
                    'Site' => $asset->site->site,
                    'Location' => $asset->location->location,
                    'Department' => $asset->department->department,
                    'Cost' => $asset->cost,
                    'Supplier' => $asset->supplier->supplier,
                    'Purchase Date' => $asset->purchase_date,
                    'Status' => $asset->status->status,
                    'Condition' => $asset->condition->condition,
                    'Assigned To' => $asset->assigned_to ?? 'Not Assigned',
                    'Date Issued' => $asset->issued_date ?? 'Not Set',
                    'Notes' => $asset->notes ?? 'No notes available',
                ];
            });
    }

    public function headings(): array
    {
        return [
            'Asset Tag ID',
            'Specification',
            'Brand',
            'Model',
            'Serial Number',
            'Category',
            'Site',
            'Location',
            'Department',
            'Cost',
            'Supplier',
            'Purchase Date',
            'Status',
            'Condition',
            'Assigned To',
            'Date Issued',
            'Notes',
        ];
    }
}
</file>

<file path="app/Exports/InventoryExport.php">
<?php

namespace App\Exports;

use App\Models\Inventory;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;

class InventoryExport implements FromCollection, WithHeadings
{
    /**
     * @return \Illuminate\Support\Collection
     */
    public function collection()
    {
        return Inventory::with(['unit', 'supplier', 'department'])
            ->get()
            ->map(function ($inventory) {
                return [
                    'Unique Tag' => $inventory->unique_tag,
                    'Items Specs' => $inventory->items_specs,
                    'Brand' => $inventory->brand->brand,
                    'Quantity' => $inventory->quantity,
                    'Unit' => $inventory->unit->unit,
                    'Unit Price' => $inventory->unit_price,
                    'Supplier' => $inventory->supplier->supplier,
                ];
            });
    }

    public function headings(): array
    {
        return [
            'Unique Tag',
            'Items Specs',
            'Brand',
            'Quantity',
            'Unit',
            'Unit Price',
            'Supplier',
        ];
    }
}
</file>

<file path="app/Http/Controllers/AlertController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Asset;
use App\Models\ViewedAlert;
use Illuminate\Support\Facades\Auth;
use App\Models\User;

class AlertController extends Controller
{
    public function index()
    {
        $totalPastDueAssets = Asset::whereHas('condition', function ($query) {
            $query->where('condition', 'Maintenance');
        })
        ->whereDate('maintenance_end_date', '<', now())
        ->get(); 

        $pastDueCount = $totalPastDueAssets->count();
        $pastDueAssets = $totalPastDueAssets->take(5);

        // Get pending supply requests
        $pendingRequests = \App\Models\SupplyRequest::select('request_group_id', 'requester', 'status', 'request_date', 'department_id', 
                     \DB::raw('COUNT(*) as items_count'))
            ->where('status', 'pending')
            ->groupBy('request_group_id', 'requester', 'status', 'request_date', 'department_id')
            ->with('department')
            ->orderBy('request_date', 'desc')
            ->take(5)
            ->get();

        $totalPendingRequests = \App\Models\SupplyRequest::where('status', 'pending')
            ->distinct('request_group_id')
            ->count('request_group_id');

        // Get expiring leases (within 7 days)
        $expiringLeases = \App\Models\Lease::where('lease_expiration', '>', now())
            ->where('lease_expiration', '<=', now()->addDays(7))
            ->orderBy('lease_expiration', 'asc')
            ->take(5)
            ->get();

        $totalExpiringLeases = \App\Models\Lease::where('lease_expiration', '>', now())
            ->where('lease_expiration', '<=', now()->addDays(7))
            ->count();

        // Get current user's ID from username
        $user = User::where('username', Auth::user()->username)->first();
        
        // Mark all overdue assets as viewed for current user
        if ($user) {
            foreach ($totalPastDueAssets as $asset) {
                ViewedAlert::firstOrCreate([
                    'user_id' => $user->id,
                    'asset_id' => $asset->id
                ]);
            }

            // Update last checked alerts timestamp
            $user->last_checked_alerts = now();
            $user->save();
        }

        return view('fcu-ams.alert.alerts', compact('pastDueAssets', 'pastDueCount', 'pendingRequests', 'totalPendingRequests', 'expiringLeases', 'totalExpiringLeases'));
    }

    public function show(Asset $asset)
    {
        return view('fcu-ams.alert.show', compact('asset'));
    }

    public function maintenance()
    {
        $pastDueAssets = Asset::with(['brand', 'site', 'location', 'category', 'department'])
            ->where('maintenance_end_date', '<', now())
            ->orderBy('maintenance_end_date', 'asc')
            ->get();

        // Get current user's ID from username and mark all viewed
        $user = User::where('username', Auth::user()->username)->first();
        if ($user) {
            foreach ($pastDueAssets as $asset) {
                ViewedAlert::firstOrCreate([
                    'user_id' => $user->id,
                    'asset_id' => $asset->id
                ]);
            }
        }

        return view('fcu-ams.alert.maintenance', compact('pastDueAssets'));
    }

    public function pendingRequests()
    {
        $pendingRequests = \App\Models\SupplyRequest::select(
            'request_group_id', 
            'requester', 
            'status', 
            'request_date', 
            'department_id',
            \DB::raw('COUNT(*) as items_count')
        )
        ->where('status', 'pending')
        ->groupBy('request_group_id', 'requester', 'status', 'request_date', 'department_id')
        ->with('department')
        ->orderBy('request_date', 'desc')
        ->paginate(15);

        return view('fcu-ams.alert.pending-requests', compact('pendingRequests'));
    }

    public function expiringLeases()
    {
        $expiringLeases = \App\Models\Lease::where('lease_expiration', '>', now())
            ->where('lease_expiration', '<=', now()->addDays(7))
            ->with('assets')
            ->orderBy('lease_expiration', 'asc')
            ->paginate(15);

        // Update last checked alerts timestamp
        if ($user = Auth::user()) {
            $user->last_checked_alerts = now();
            $user->save();
        }

        return view('fcu-ams.alert.expiring-leases', compact('expiringLeases'));
    }
}
</file>

<file path="app/Http/Controllers/BrandController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Category;
use Illuminate\Http\Request;
use DB;
use App\Models\Asset;
use App\Models\Brand;
use App\Models\Site;
use App\Models\Location;
use App\Models\Department;
use App\Models\AssetEditHistory;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\AssetsExport;
use App\Imports\AssetsImport;
use Illuminate\Validation\Rule;

class BrandController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'brand' => 'required|string|unique:brands,brand',
        ], [
            'brand.unique' => 'Brand already exists.',
        ]);

        $brand = new Brand();
        $brand->brand = $validatedData['brand'];
        $brand->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Brand added successfully!');
    }

    public function index() {
        $brands = Brand::orderBy('brand', 'asc')->paginate(10);

        return view('fcu-ams/brands/brandsList', compact('brands'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'brand' => 'required|string',
        ]);

        $brand = Brand::findOrFail($id);
        $brand->brand = $validatedData['brand'];
        $brand->save();

        return redirect()->route('brand.index')->with('success', 'Brand updated successfully!');
    }

    public function destroy($id)
    {
        $brand = Brand::findOrFail($id);

        $brand = Brand::find($id);
        if ($brand) {
            try {
                $brand->delete();
                return redirect()->back()->with('success', 'Brand deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete brand because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Brand not found']);
        }
    }

    public function list()
    {
        return response()->json(Brand::orderBy('brand', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/CategoryController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Category;
use Illuminate\Http\Request;

class CategoryController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'category' => 'required|string|unique:categories,category',
        ], [
            'category.unique' => 'Category already exists.',
        ]);

        $category = new Category();
        $category->category = $validatedData['category'];
        $category->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Category added successfully!');
    }

    public function index() {
        $categories = Category::orderBy('category', 'asc')->paginate(10);

        return view('fcu-ams/categories/categoriesList', compact('categories'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'category' => 'required|string',
        ]);

        $category = Category::findOrFail($id);
        $category->category = $validatedData['category'];
        $category->save();

        return redirect()->back()->with('success', 'Category updated successfully!');
    }

    public function destroy($id)
    {
        $category = Category::findOrFail($id);

        $category = Category::find($id);
        if ($category) {
            try {
                $category->delete();
                return redirect()->back()->with('success', 'Category deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete category because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Category not found']);
        }
    }

    public function list()
    {
        return response()->json(Category::orderBy('category', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/ConditionController.php">
<?php

namespace App\Http\Controllers;

use App\Models\Condition;
use Illuminate\Http\Request;

class ConditionController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'condition' => 'required|string|unique:conditions,condition',
        ], [
            'condition.unique' => 'Condition already exists.',
        ]);

        $condition = new Condition();
        $condition->condition = $validatedData['condition'];
        $condition->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Condition added successfully!');
    }

    public function index() {
        $conditions = Condition::orderBy('condition', 'asc')->paginate(10);

        return view('fcu-ams/conditions/conditionsList', compact('conditions'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'condition' => 'required|string',
        ]);

        $condition = Condition::findOrFail($id);
        $condition->condition = $validatedData['condition'];
        $condition->save();

        return redirect()->back()->with('success', 'Condition updated successfully!');
    }

    public function destroy($id)
    {
        $condition = Condition::findOrFail($id);

        $condition = Condition::find($id);
        if ($condition) {
            try {
                $condition->delete();
                return redirect()->back()->with('success', 'Condition deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete condition because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Condition not found']);
        }
    }

    public function list()
    {
        return response()->json(Condition::orderBy('condition', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}
</file>

<file path="app/Http/Controllers/CustomerController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class CustomerController extends Controller
{
    //
}
</file>

<file path="app/Http/Controllers/DepartmentController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Department;

class DepartmentController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'department' => 'required|string|unique:departments,department',
        ], [
            'department.unique' => 'Department already exists.',
        ]);

        $department = new Department();
        $department->department = $validatedData['department'];
        $department->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Department added successfully!');
    }

    public function index() {
        $departments = Department::orderBy('department', 'asc')->paginate(10);

        return view('fcu-ams/departments/departmentsList', compact('departments'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'department' => 'required|string',
        ]);

        $department = Department::findOrFail($id);
        $department->department = $validatedData['department'];
        $department->save();

        return redirect()->back()->with('success', 'Department updated successfully!');
    }

    public function destroy($id)
    {
        $department = Department::findOrFail($id);

        $department = Department::find($id);
        if ($department) {
            try {
                $department->delete();
                return redirect()->back()->with('success', 'Department deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete department because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Department not found']);
        }
    }

    public function list()
    {
        return response()->json(Department::orderBy('department', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/EmployeeController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class EmployeeController extends Controller
{
    //
}
</file>

<file path="app/Http/Controllers/IndexController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Role;
use App\Models\User;

class IndexController extends Controller
{
    public function testForm() {
        $roles = Role::all();
        return view ('fcu-ams/test-form', compact('roles'));
    }
}
</file>

<file path="app/Http/Controllers/LeaseItemController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class LeaseItemController extends Controller
{
    //
}
</file>

<file path="app/Http/Controllers/LocationController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Location;

class LocationController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'location' => 'required|string|unique:locations,location',
        ], [
            'location.unique' => 'Location already exists.',
        ]);

        $location = new Location();
        $location->location = $validatedData['location'];
        $location->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Location added successfully!');
    }

    public function index() {
        $locations = Location::orderBy('location', 'asc')->paginate(10);

        return view('fcu-ams/locations/locationsList', compact('locations'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'location' => 'required|string',
        ]);

        $location = Location::findOrFail($id);
        $location->location = $validatedData['location'];
        $location->save();

        return redirect()->back()->with('success', 'Location updated successfully!');
    }

    public function destroy($id)
    {
        $location = Location::findOrFail($id);

        $location = Location::find($id);
        if ($location) {
            try {
                $location->delete();
                return redirect()->back()->with('success', 'Location deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete location because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Location not found']);
        }
    }

    public function list()
    {
        return response()->json(Location::orderBy('location', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/LoginController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use DB;

class LoginController extends Controller
{
    public  function index() {
        return view ('login');
    }

    public  function asdf() {
        return view ('asdf');
    }

    public function signup() {
        $roles = DB::table('roles')->get();
        return view ('signup', compact('roles'));
    }

    public function login(Request $request)
    {
        $credentials = $request->only('username', 'password');

        if (Auth::attempt($credentials)) {
            return redirect()->route('dashboard');
        }

        return back()->withErrors([
            'login' => 'The provided credentials do not match our records.',
        ])->withInput($request->except('password'));
    }

    public function logout(Request $request)
    {
        Auth::logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return redirect()->route('login');
    }

}
</file>

<file path="app/Http/Controllers/MaintenanceController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class MaintenanceController extends Controller
{
    //
}
</file>

<file path="app/Http/Controllers/ProfileController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use DB;
use App\Models\Asset;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Condition;
use App\Models\Inventory;
use App\Models\Department;
use App\Models\User;
use App\Models\AssetEditHistory;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\AssetsExport;
use App\Imports\AssetsImport;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Hash;

class ProfileController extends Controller
{
    public function index(Request $request) {
        $user = auth()->user();
        return view('fcu-ams/profile/profile', compact('user'));
    }

    public function update(Request $request) {
        $request->validate([
            'current_password' => 'required|string',
            'new_password' => 'required|string',
            'confirm_new_password' => 'required|string|same:new_password',
        ]);

        $user = auth()->user();

        if (!Hash::check($request->current_password, $user->password)) {
            return back()->withErrors(['current_password' => 'Current password is incorrect']);
        }

        $user->password = Hash::make($request->new_password);
        $user->save();

        return back()->with('success', 'Password updated successfully');
    }

    public function updatePersonalInformation(Request $request)
    {
        $request->validate([
            'full_name' => 'required|string',
            'email' => 'required|email',
            'contact_number' => 'required|string',
            'address' => 'required|string',
            'profile_picture' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:10000',
        ]);

        $user = auth()->user();
        $nameParts = explode(' ', $request->input('full_name'));

        if ($request->hasFile('profile_picture')) {
            if ($user->profile_picture && 
                file_exists(public_path($user->profile_picture)) && 
                !in_array(basename($user->profile_picture), ['mele.png', 'liling.jpg', '1728809102.jpg'])) {
                unlink(public_path($user->profile_picture));
            }

            $imageName = time() . '.' . $request->profile_picture->extension();
            $request->profile_picture->move(public_path('profile'), $imageName);
            $user->profile_picture = 'profile/' . $imageName;
        }

        if (count($nameParts) === 2) {
            $user->first_name = $nameParts[0];
            $user->middle_name = null;
            $user->last_name = $nameParts[1];
        } elseif (count($nameParts) >= 3) {
            $user->first_name = $nameParts[0];
            $user->middle_name = $nameParts[1];
            $user->last_name = implode(' ', array_slice($nameParts, 2));
        } else {
            return back()->withErrors(['full_name' => 'Please provide a valid full name.']);
        }

        $user->email = $request->input('email');
        $user->contact_number = $request->input('contact_number');
        $user->address = $request->input('address');
        $user->save();

        return redirect()->back()->with('success', 'Profile updated successfully!');
    }
}
</file>

<file path="app/Http/Controllers/PurchaseOrderController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\PurchaseOrder;
use App\Models\Department;
use App\Models\Supplier;
use App\Models\Unit;
use App\Models\Location;
use Illuminate\Validation\Rule;
use Illuminate\Support\Str;

class PurchaseOrderController extends Controller
{
    public function index(){
        $departments = Department::all();
        $suppliers = Supplier::all();
        $units = Unit::all();
        $locations = location::all();
        return view('fcu-ams/inventory/purchaseOrder', compact('departments', 'suppliers', 'units', 'locations'));
    }

    public function store(Request $request)
{
    $validatedData = $request->validate([
        'department_id' => 'required|integer|exists:departments,id',
        'supplier_id' => 'required|integer|exists:suppliers,id',
        'location_id' => 'required|integer|exists:locations,id',
        'po_date' => 'required|date',
        'po_number' => 'required|integer',
        'mr_number' => 'required|integer',
        'approved_by' => 'required|string',
        'note' => 'nullable|string',
        'items_specs' => 'required|array',
        'items_specs.*' => 'required|string',
        'quantity' => 'required|array',
        'quantity.*' => 'required|integer',
        'unit_id' => 'required|array',
        'unit_id.*' => 'required|integer|exists:units,id',
        'unit_price' => 'required|array',
        'unit_price.*' => 'required|numeric',
    ]);

    $purchaseOrderGroupId = Str::uuid();

    foreach ($validatedData['items_specs'] as $key => $itemSpec) {
        $purchaseOrder = new PurchaseOrder();
        $purchaseOrder->group_id_for_items_purchased_at_the_same_time = $purchaseOrderGroupId;
        $purchaseOrder->department_id = $validatedData['department_id'];
        $purchaseOrder->supplier_id = $validatedData['supplier_id'];
        $purchaseOrder->unit_id = $validatedData['unit_id'][$key];
        $purchaseOrder->location_id = $validatedData['location_id'];
        $purchaseOrder->po_date = $validatedData['po_date'];
        $purchaseOrder->po_number = $validatedData['po_number'];
        $purchaseOrder->mr_number = $validatedData['mr_number'];
        $purchaseOrder->approved_by = $validatedData['approved_by'];
        $purchaseOrder->quantity = $validatedData['quantity'][$key];
        $purchaseOrder->items_specs = $itemSpec;
        $purchaseOrder->unit_price = $validatedData['unit_price'][$key];
        $purchaseOrder->note = $validatedData['note'];

        $purchaseOrder->save();
    }

    return redirect()->route('purchase.order.index')->with('success', 'Purchase order created successfully');
}
}
</file>

<file path="app/Http/Controllers/RoleController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class RoleController extends Controller
{
    //
}
</file>

<file path="app/Http/Controllers/SiteController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Site;

class SiteController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'site' => 'required|string|unique:sites,site',
        ], [
            'site.unique' => 'Site already exists.',
        ]);

        $site = new Site();
        $site->site = $validatedData['site'];
        $site->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Site added successfully!');
    }

    public function index() {
        $sites = Site::orderBy('site', 'asc')->paginate(10);

        return view('fcu-ams/sites/sitesList', compact('sites'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'site' => 'required|string',
        ]);

        $site = Site::findOrFail($id);
        $site->site = $validatedData['site'];
        $site->save();

        return redirect()->back()->with('success', 'Site updated successfully!');
    }

    public function destroy($id)
    {
        $site = Site::findOrFail($id);

        $site = Site::find($id);
        if ($site) {
            try {
                $site->delete();
                return redirect()->back()->with('success', 'Site deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete site because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Site not found']);
        }
    }

    public function list()
    {
        return response()->json(Site::orderBy('site', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/StatusController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Status;

class StatusController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'status' => 'required|string|unique:statuses,status',
        ], [
            'status.unique' => 'Status already exists.',
        ]);

        $status = new Status();
        $status->status = $validatedData['status'];
        $status->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Status added successfully!');
    }

    public function index() {
        $statuses = Status::orderBy('status', 'asc')->paginate(10);

        return view('fcu-ams/statuses/statusesList', compact('statuses'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'status' => 'required|string',
        ]);

        $status = Status::findOrFail($id);
        $status->status = $validatedData['status'];
        $status->save();

        return redirect()->back()->with('success', 'Status updated successfully!');
    }

    public function destroy($id)
    {
        $status = Status::findOrFail($id);

        $status = Status::find($id);
        if ($status) {
            try {
                $status->delete();
                return redirect()->back()->with('success', 'Status deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete status because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Status not found']);
        }
    }

    public function list()
    {
        return response()->json(Status::orderBy('status', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/StockOutController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class StockOutController extends Controller
{
    //
}
</file>

<file path="app/Http/Controllers/SupplierController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use DB;
use App\Models\Asset;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Department;
use App\Models\AssetEditHistory;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\AssetsExport;
use App\Imports\AssetsImport;
use Illuminate\Validation\Rule;

class SupplierController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'supplier' => 'required|string|unique:suppliers,supplier',
        ], [
            'supplier.unique' => 'Supplier already exists.',
        ]);

        $supplier = new Supplier();
        $supplier->supplier = $validatedData['supplier'];
        $supplier->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Supplier added successfully!');
    }

    public function index() {
        $suppliers = Supplier::orderBy('supplier', 'asc')->paginate(10);

        return view('fcu-ams/suppliers/suppliersList', compact('suppliers'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'supplier' => 'required|string',
        ]);

        $supplier = Supplier::findOrFail($id);
        $supplier->supplier = $validatedData['supplier'];
        $supplier->save();

        return redirect()->route('supplier.index')->with('success', 'Supplier updated successfully!');
    }

    public function destroy($id)
    {
        $supplier = Supplier::findOrFail($id);

        $supplier = Supplier::find($id);
        if ($supplier) {
            try {
                $supplier->delete();
                return redirect()->back()->with('success', 'Supplier deleted successfully!');
            } catch (\Illuminate\Database\QueryException $e) {
                return redirect()->back()->withErrors(['error' => 'Cannot delete supplier because it is
                associated with other data.']);
            }
        } else {
            return redirect()->back()->withErrors(['error' => 'Supplier not found']);
        }
    }

    public function list()
    {
        return response()->json(Supplier::orderBy('supplier', 'asc')->get());
    }
}
</file>

<file path="app/Http/Controllers/TestController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

class TestController extends Controller
{
    public function dashboardTest(){
        return view('test.dashboard');
    }
}
</file>

<file path="app/Http/Controllers/UnitController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Unit;

class UnitController extends Controller
{
    public function add(Request $request)
    {
        $validatedData = $request->validate([
            'unit' => 'required|string|unique:units,unit',
        ], [
            'unit.unique' => 'Unit already exists.',
        ]);

        $unit = new Unit();
        $unit->unit = $validatedData['unit'];
        $unit->save();

        if ($request->ajax()) {
            return response()->json(['success' => true]);
        }

        return redirect()->back()->with('success', 'Unit added successfully!');
    }

    public function list()
    {
        return response()->json(Unit::orderBy('unit', 'asc')->get());
    }
}
</file>

<file path="app/Http/Kernel.php">
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */
    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
        \App\Http\Middleware\CheckUserRole::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
            \App\Http\Middleware\CheckUserRole::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'precognitive' => \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
        'auth.user' => \App\Http\Middleware\AuthenticateUser::class,
        'auth.redirect' => \App\Http\Middleware\RedirectIfAuthenticated::class,
    ];
}
</file>

<file path="app/Http/Middleware/Authenticate.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}
</file>

<file path="app/Http/Middleware/AuthenticateUser.php">
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class AuthenticateUser
{
    public function handle(Request $request, Closure $next)
    {
        if (!Auth::check()) {
            return redirect()->route('login');
        }

        $response = $next($request);

        if ($response instanceof \Symfony\Component\HttpFoundation\BinaryFileResponse) {
            $response->headers->set('Cache-Control', 'no-cache, no-store, must-revalidate');
            $response->headers->set('Pragma', 'no-cache');
            $response->headers->set('Expires', '0');
        } else {
            $response->withHeaders([
                'Cache-Control' => 'no-cache, no-store, must-revalidate',
                'Pragma' => 'no-cache',
                'Expires' => '0',
            ]);
        }

        return $response;
    }
}
</file>

<file path="app/Http/Middleware/AuthMiddleware.php">
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class AuthMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        return $next($request);
    }
}
</file>

<file path="app/Http/Middleware/ClearCacheMiddleware.php">
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class ClearCacheMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        return $next($request);
    }
}
</file>

<file path="app/Http/Middleware/EncryptCookies.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
</file>

<file path="app/Http/Middleware/PreventRequestsDuringMaintenance.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
</file>

<file path="app/Http/Middleware/RedirectIfAuthenticated.php">
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RedirectIfAuthenticated
{
    public function handle(Request $request, Closure $next, ...$guards)
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect()->route('dashboard');
            }
        }

        return $next($request);
    }
}

// namespace App\Http\Middleware;

// use App\Providers\RouteServiceProvider;
// use Closure;
// use Illuminate\Http\Request;
// use Illuminate\Support\Facades\Auth;
// use Symfony\Component\HttpFoundation\Response;

// class RedirectIfAuthenticated
// {
//     /**
//      * Handle an incoming request.
//      *
//      * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
//      */
//     public function handle(Request $request, Closure $next, string ...$guards): Response
//     {
//         $guards = empty($guards) ? [null] : $guards;

//         foreach ($guards as $guard) {
//             if (Auth::guard($guard)->check()) {
//                 return redirect(RouteServiceProvider::HOME);
//             }
//         }

//         return $next($request);
//     }
// }
</file>

<file path="app/Http/Middleware/TrimStrings.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}
</file>

<file path="app/Http/Middleware/TrustHosts.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts(): array
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}
</file>

<file path="app/Http/Middleware/TrustProxies.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}
</file>

<file path="app/Http/Middleware/ValidateSignature.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}
</file>

<file path="app/Http/Middleware/VerifyCsrfToken.php">
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
</file>

<file path="app/Models/Alert.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Alert extends Model
{
    use HasFactory;
}
</file>

<file path="app/Models/AssetEditHistory.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AssetEditHistory extends Model
{
    use HasFactory;

    protected $fillable = [
        'asset_id',
        'user_id',
        'changes',
    ];

    // public function asset()
    // {
    //     return $this->belongsTo(Asset::class);
    // }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function asset()
    {
    return $this->belongsTo(Asset::class, 'asset_id');
    }
}
</file>

<file path="app/Models/Brand.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Brand extends Model
{
    use HasFactory;

    protected $fillable = [
        'brand',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }

    public function inventories()
    {
        return $this->hasMany(Inventory::class);
    }
}
</file>

<file path="app/Models/Category.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Category extends Model
{
    use HasFactory;

    protected $fillable = [
        'category',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }

    public function inventories()
    {
        return $this->hasMany(Inventory::class);
    }
}
</file>

<file path="app/Models/Condition.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Condition extends Model
{
    use HasFactory;

    protected $fillable = [
        'condition',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }
}
</file>

<file path="app/Models/Customer.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Customer extends Model
{
    use HasFactory;

    protected $fillable = [
        'first_name',
        'middle_name',
        'last_name',
        'address',
        'contact_number',
        'email',
    ];
}
</file>

<file path="app/Models/Department.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Department extends Model
{
    use HasFactory;

    protected $fillable = [
        'department',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }
}
</file>

<file path="app/Models/Employee.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Employee extends Model
{
    use HasFactory;
}
</file>

<file path="app/Models/InventoryEditHistory.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class InventoryEditHistory extends Model
{
    use HasFactory;

    protected $fillable = [
        'inventory_id',
        'user_id',
        'changes'
    ];

    public function inventory()
    {
        return $this->belongsTo(Inventory::class, 'inventory_id');
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
</file>

<file path="app/Models/LeaseItem.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class LeaseItem extends Model
{
    use HasFactory;
    
    protected $fillable = [
        'lease_id',
        'asset_id',
    ];

    public function lease()
    {
        return $this->belongsTo(Lease::class);
    }

    public function asset()
    {
        return $this->belongsTo(Asset::class);
    }
}
</file>

<file path="app/Models/Location.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Location extends Model
{
    use HasFactory;

    protected $fillable = [
        'location',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }
}
</file>

<file path="app/Models/Maintenance.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Maintenance extends Model
{
    use HasFactory;

    protected $fillable = [
        'maintenance_title',
        'maintenance_detail',
        'maintenance_due_date',
        'maintenance_by',
        'maintenance_status',
        'date_completed',
        'maintenance_cost',
    ];
}
</file>

<file path="app/Models/PurchaseOrder.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class PurchaseOrder extends Model
{
    use HasFactory;

    protected $fillable = [
        'group_id_for_items_purchased_at_the_same_time',
        'department_id',
        'supplier_id',
        'unit_id',
        'location_id',
        'po_number',
        'mr_number',
        'quantity',
        'items_specs',
        'approved_by',
        'unit_price',
        'note',
    ];

    public function supplier()
    {
        return $this->belongsTo(Supplier::class);
    }

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    public function unit()
    {
        return $this->belongsTo(Unit::class);
    }

    public function location()
    {
        return $this->belongsTo(Location::class);
    }
}
</file>

<file path="app/Models/RequestedItem.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class RequestedItem extends Model
{
    protected $fillable = [
        'brand_id',
        'items_specs',
        'unit_id',
        'quantity',
        'unit_price',
        'supplier_id',
        'status',
        'remarks'
    ];

    public function brand()
    {
        return $this->belongsTo(Brand::class);
    }

    public function unit()
    {
        return $this->belongsTo(Unit::class);
    }

    public function supplier()
    {
        return $this->belongsTo(Supplier::class);
    }
}
</file>

<file path="app/Models/Role.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Role extends Model
{
    use HasFactory;

    protected $fillable = [
        'role',
    ];

    public function users()
    {
        return $this->hasMany(User::class);
    }
}
</file>

<file path="app/Models/Site.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Site extends Model
{
    use HasFactory;

    protected $fillable = [
        'site',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }
}
</file>

<file path="app/Models/Status.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Status extends Model
{
    use HasFactory;

    protected $fillable = [
        'status',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }
}
</file>

<file path="app/Models/StockOut.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class StockOut extends Model
{
    use HasFactory;

    protected $fillable = [
        'stock_out_id',
        'inventory_id',
        'quantity',
        'department_id',
        'stock_out_date',
        'receiver',
        'created_by'
    ];

    public function inventory()
    {
        return $this->belongsTo(Inventory::class);
    }

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'created_by');
    }
}
</file>

<file path="app/Models/Supplier.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Supplier extends Model
{
    use HasFactory;

    protected $fillable = [
        'supplier',
    ];

    public function assets()
    {
        return $this->hasMany(Asset::class);
    }

    public function inventories()
    {
        return $this->hasMany(Inventory::class);
    }
}
</file>

<file path="app/Models/SupplyRequest.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class SupplyRequest extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'request_id',
        'request_group_id',
        'department_id',
        'inventory_id',
        'requester',
        'quantity',
        'request_date',
        'item_name',
        'notes',
        'status',
        'is_approved'
    ];

    protected $casts = [
        'request_date' => 'date',
        'is_approved' => 'boolean'
    ];

    protected $with = ['department', 'unit'];

    public function inventory()
    {
        return $this->belongsTo(Inventory::class);
    }

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    public function unit()
    {
        return $this->belongsTo(Unit::class);
    }
}
</file>

<file path="app/Models/Unit.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Unit extends Model
{
    use HasFactory;

    protected $fillable = [
        'unit',
    ];

    public function inventories()
    {
        return $this->hasMany(Inventory::class);
    }
}
</file>

<file path="app/Models/ViewedAlert.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ViewedAlert extends Model
{
    protected $fillable = ['user_id', 'asset_id'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function asset()
    {
        return $this->belongsTo(Asset::class);
    }
}
</file>

<file path="app/Providers/AuthServiceProvider.php">
<?php

namespace App\Providers;

// use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        //
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        //
    }
}
</file>

<file path="app/Providers/BroadcastServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}
</file>

<file path="app/Providers/EventServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        //
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}
</file>

<file path="app/Providers/RouteServiceProvider.php">
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/home';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }
}
</file>

<file path="app/View/Components/AddItemModal.php">
<?php

namespace App\View\Components;

use Illuminate\View\Component;

class AddItemModal extends Component
{
    public $title;
    public $id;
    public $route;
    public $field;

    public function __construct($title, $id, $route, $field)
    {
        $this->title = $title;
        $this->id = $id;
        $this->route = $route;
        $this->field = $field;
    }

    public function render()
    {
        return view('components.add-item-modal');
    }
}
</file>

<file path="app/View/Components/MonthlySupplierReport.php">
<?php

// app/View/Components/MonthlySupplierReport.php
namespace App\View\Components;

use Illuminate\View\Component;
use Carbon\Carbon;

class MonthlySupplierReport extends Component
{
    public $inventories;
    public $startDate;
    public $endDate;
    public $totalValue;

    public function __construct($inventories, $startDate, $endDate)
    {
        $this->inventories = $inventories;
        $this->startDate = Carbon::parse($startDate)->format('F j, Y');
        $this->endDate = Carbon::parse($endDate)->format('F j, Y');
        $this->totalValue = $this->calculateTotalValue();
    }

    private function calculateTotalValue()
    {
        return $this->inventories->sum(function ($inventory) {
            return $inventory->quantity * $inventory->unit_price;
        });
    }

    public function render()
    {
        return view('components.monthly-supplier-report');
    }
}
</file>

<file path="artisan">
#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any of our classes manually. It's great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
</file>

<file path="bootstrap/app.php">
<?php

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| The first thing we will do is create a new Laravel application instance
| which serves as the "glue" for all the components of Laravel, and is
| the IoC container for the system binding all of the various parts.
|
*/

$app = new Illuminate\Foundation\Application(
    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)
);

/*
|--------------------------------------------------------------------------
| Bind Important Interfaces
|--------------------------------------------------------------------------
|
| Next, we need to bind some important interfaces into the container so
| we will be able to resolve them when needed. The kernels serve the
| incoming requests to this application from both the web and CLI.
|
*/

$app->singleton(
    Illuminate\Contracts\Http\Kernel::class,
    App\Http\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    App\Console\Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

/*
|--------------------------------------------------------------------------
| Return The Application
|--------------------------------------------------------------------------
|
| This script returns the application instance. The instance is given to
| the calling script so we can separate the building of the instances
| from the actual running of the application and sending responses.
|
*/

return $app;
</file>

<file path="bootstrap/cache/.gitignore">
*
!.gitignore
</file>

<file path="composer install.cmd">
composer install
</file>

<file path="composer.json">
{
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.1",
        "barryvdh/laravel-dompdf": "^3.0",
        "guzzlehttp/guzzle": "^7.2",
        "laravel/framework": "^10.10",
        "laravel/sanctum": "^3.3",
        "laravel/tinker": "^2.8",
        "maatwebsite/excel": "^3.1",
        "simplesoftwareio/simple-qrcode": "^4.2"
    },
    "require-dev": {
        "fakerphp/faker": "^1.9.1",
        "laravel/pint": "^1.0",
        "laravel/sail": "^1.18",
        "mockery/mockery": "^1.4.4",
        "nunomaduro/collision": "^7.0",
        "phpunit/phpunit": "^10.1",
        "spatie/laravel-ignition": "^2.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
</file>

<file path="config/app.php">
<?php

use Illuminate\Support\Facades\Facade;
use Illuminate\Support\ServiceProvider;

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application. This value is used when the
    | framework needs to place the application's name in a notification or
    | any other location as required by the application or its packages.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | your application so that it is used when running Artisan tasks.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. We have gone
    | ahead and set this to a sensible default for you out of the box.
    |
    */

    'timezone' => 'Asia/Manila',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by the translation service provider. You are free to set this value
    | to any of the locales which will be supported by the application.
    |
    */

    'locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Application Fallback Locale
    |--------------------------------------------------------------------------
    |
    | The fallback locale determines the locale to use when the current one
    | is not available. You may change the value to correspond to any of
    | the language folders that are provided through your application.
    |
    */

    'fallback_locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Faker Locale
    |--------------------------------------------------------------------------
    |
    | This locale will be used by the Faker PHP library when generating fake
    | data for your database seeds. For example, this will be used to get
    | localized telephone numbers, street address information and more.
    |
    */

    'faker_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is used by the Illuminate encrypter service and should be set
    | to a random, 32 character string, otherwise these encrypted strings
    | will not be safe. Please do this before deploying an application!
    |
    */

    'key' => env('APP_KEY'),

    'cipher' => 'AES-256-CBC',

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => 'file',
        // 'store' => 'redis',
    ],

    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    |
    | The service providers listed here will be automatically loaded on the
    | request to your application. Feel free to add your own services to
    | this array to grant expanded functionality to your applications.
    |
    */

    'providers' => ServiceProvider::defaultProviders()->merge([
        /*
         * Package Service Providers...
         */
        Maatwebsite\Excel\ExcelServiceProvider::class,
        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        // App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
        App\Providers\RouteServiceProvider::class,
        Barryvdh\DomPDF\ServiceProvider::class,
    ])->toArray(),

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    |
    | This array of class aliases will be registered when this application
    | is started. However, feel free to register as many as you wish as
    | the aliases are "lazy" loaded so they don't hinder performance.
    |
    */

    'aliases' => Facade::defaultAliases()->merge([
        // 'Example' => App\Facades\Example::class,
        'Excel' => Maatwebsite\Excel\Facades\Excel::class,
        'PDF' => Barryvdh\DomPDF\Facade\Pdf::class,
    ])->toArray(),

];
</file>

<file path="config/auth.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option controls the default authentication "guard" and password
    | reset options for your application. You may change these defaults
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => 'web',
        'passwords' => 'users',
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | here which uses session storage and the Eloquent user provider.
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | If you have multiple user tables or models you may configure multiple
    | sources which represent each model / table. These sources may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | You may specify multiple password reset configurations if you have more
    | than one user table or model in the application and you want to have
    | separate password reset settings based on the specific user types.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => 'password_reset_tokens',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | times out and the user is prompted to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => 10800,

];
</file>

<file path="config/broadcasting.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' => env('BROADCAST_DRIVER', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over websockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' => [

        'pusher' => [
            'driver' => 'pusher',
            'key' => env('PUSHER_APP_KEY'),
            'secret' => env('PUSHER_APP_SECRET'),
            'app_id' => env('PUSHER_APP_ID'),
            'options' => [
                'cluster' => env('PUSHER_APP_CLUSTER'),
                'host' => env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
                'port' => env('PUSHER_PORT', 443),
                'scheme' => env('PUSHER_SCHEME', 'https'),
                'encrypted' => true,
                'useTLS' => env('PUSHER_SCHEME', 'https') === 'https',
            ],
            'client_options' => [
                // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
            ],
        ],

        'ably' => [
            'driver' => 'ably',
            'key' => env('ABLY_KEY'),
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
        ],

        'log' => [
            'driver' => 'log',
        ],

        'null' => [
            'driver' => 'null',
        ],

    ],

];
</file>

<file path="config/cache.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache connection that gets used while
    | using this caching library. This connection is used when another is
    | not explicitly specified when executing a given caching function.
    |
    */

    'default' => env('CACHE_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "apc", "array", "database", "file",
    |         "memcached", "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'apc' => [
            'driver' => 'apc',
        ],

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'cache',
            'connection' => null,
            'lock_connection' => null,
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'cache',
            'lock_connection' => 'default',
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, or DynamoDB cache
    | stores there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];
</file>

<file path="config/cors.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => ['api/*', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['*'],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => false,

];
</file>

<file path="config/database.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];
</file>

<file path="config/excel.php">
<?php

use Maatwebsite\Excel\Excel;
use PhpOffice\PhpSpreadsheet\Reader\Csv;

return [
    'exports' => [

        /*
        |--------------------------------------------------------------------------
        | Chunk size
        |--------------------------------------------------------------------------
        |
        | When using FromQuery, the query is automatically chunked.
        | Here you can specify how big the chunk should be.
        |
        */
        'chunk_size'             => 1000,

        /*
        |--------------------------------------------------------------------------
        | Pre-calculate formulas during export
        |--------------------------------------------------------------------------
        */
        'pre_calculate_formulas' => false,

        /*
        |--------------------------------------------------------------------------
        | Enable strict null comparison
        |--------------------------------------------------------------------------
        |
        | When enabling strict null comparison empty cells ('') will
        | be added to the sheet.
        */
        'strict_null_comparison' => false,

        /*
        |--------------------------------------------------------------------------
        | CSV Settings
        |--------------------------------------------------------------------------
        |
        | Configure e.g. delimiter, enclosure and line ending for CSV exports.
        |
        */
        'csv'                    => [
            'delimiter'              => ',',
            'enclosure'              => '"',
            'line_ending'            => PHP_EOL,
            'use_bom'                => false,
            'include_separator_line' => false,
            'excel_compatibility'    => false,
            'output_encoding'        => '',
            'test_auto_detect'       => true,
        ],

        /*
        |--------------------------------------------------------------------------
        | Worksheet properties
        |--------------------------------------------------------------------------
        |
        | Configure e.g. default title, creator, subject,...
        |
        */
        'properties'             => [
            'creator'        => '',
            'lastModifiedBy' => '',
            'title'          => '',
            'description'    => '',
            'subject'        => '',
            'keywords'       => '',
            'category'       => '',
            'manager'        => '',
            'company'        => '',
        ],
    ],

    'imports'            => [

        /*
        |--------------------------------------------------------------------------
        | Read Only
        |--------------------------------------------------------------------------
        |
        | When dealing with imports, you might only be interested in the
        | data that the sheet exists. By default we ignore all styles,
        | however if you want to do some logic based on style data
        | you can enable it by setting read_only to false.
        |
        */
        'read_only'    => true,

        /*
        |--------------------------------------------------------------------------
        | Ignore Empty
        |--------------------------------------------------------------------------
        |
        | When dealing with imports, you might be interested in ignoring
        | rows that have null values or empty strings. By default rows
        | containing empty strings or empty values are not ignored but can be
        | ignored by enabling the setting ignore_empty to true.
        |
        */
        'ignore_empty' => false,

        /*
        |--------------------------------------------------------------------------
        | Heading Row Formatter
        |--------------------------------------------------------------------------
        |
        | Configure the heading row formatter.
        | Available options: none|slug|custom
        |
        */
        'heading_row'  => [
            'formatter' => 'slug',
        ],

        /*
        |--------------------------------------------------------------------------
        | CSV Settings
        |--------------------------------------------------------------------------
        |
        | Configure e.g. delimiter, enclosure and line ending for CSV imports.
        |
        */
        'csv'          => [
            'delimiter'        => null,
            'enclosure'        => '"',
            'escape_character' => '\\',
            'contiguous'       => false,
            'input_encoding'   => Csv::GUESS_ENCODING,
        ],

        /*
        |--------------------------------------------------------------------------
        | Worksheet properties
        |--------------------------------------------------------------------------
        |
        | Configure e.g. default title, creator, subject,...
        |
        */
        'properties'   => [
            'creator'        => '',
            'lastModifiedBy' => '',
            'title'          => '',
            'description'    => '',
            'subject'        => '',
            'keywords'       => '',
            'category'       => '',
            'manager'        => '',
            'company'        => '',
        ],

        /*
       |--------------------------------------------------------------------------
       | Cell Middleware
       |--------------------------------------------------------------------------
       |
       | Configure middleware that is executed on getting a cell value
       |
       */
        'cells'        => [
            'middleware' => [
                //\Maatwebsite\Excel\Middleware\TrimCellValue::class,
                //\Maatwebsite\Excel\Middleware\ConvertEmptyCellValuesToNull::class,
            ],
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Extension detector
    |--------------------------------------------------------------------------
    |
    | Configure here which writer/reader type should be used when the package
    | needs to guess the correct type based on the extension alone.
    |
    */
    'extension_detector' => [
        'xlsx'     => Excel::XLSX,
        'xlsm'     => Excel::XLSX,
        'xltx'     => Excel::XLSX,
        'xltm'     => Excel::XLSX,
        'xls'      => Excel::XLS,
        'xlt'      => Excel::XLS,
        'ods'      => Excel::ODS,
        'ots'      => Excel::ODS,
        'slk'      => Excel::SLK,
        'xml'      => Excel::XML,
        'gnumeric' => Excel::GNUMERIC,
        'htm'      => Excel::HTML,
        'html'     => Excel::HTML,
        'csv'      => Excel::CSV,
        'tsv'      => Excel::TSV,

        /*
        |--------------------------------------------------------------------------
        | PDF Extension
        |--------------------------------------------------------------------------
        |
        | Configure here which Pdf driver should be used by default.
        | Available options: Excel::MPDF | Excel::TCPDF | Excel::DOMPDF
        |
        */
        'pdf'      => Excel::DOMPDF,
    ],

    /*
    |--------------------------------------------------------------------------
    | Value Binder
    |--------------------------------------------------------------------------
    |
    | PhpSpreadsheet offers a way to hook into the process of a value being
    | written to a cell. In there some assumptions are made on how the
    | value should be formatted. If you want to change those defaults,
    | you can implement your own default value binder.
    |
    | Possible value binders:
    |
    | [x] Maatwebsite\Excel\DefaultValueBinder::class
    | [x] PhpOffice\PhpSpreadsheet\Cell\StringValueBinder::class
    | [x] PhpOffice\PhpSpreadsheet\Cell\AdvancedValueBinder::class
    |
    */
    'value_binder'       => [
        'default' => Maatwebsite\Excel\DefaultValueBinder::class,
    ],

    'cache'        => [
        /*
        |--------------------------------------------------------------------------
        | Default cell caching driver
        |--------------------------------------------------------------------------
        |
        | By default PhpSpreadsheet keeps all cell values in memory, however when
        | dealing with large files, this might result into memory issues. If you
        | want to mitigate that, you can configure a cell caching driver here.
        | When using the illuminate driver, it will store each value in the
        | cache store. This can slow down the process, because it needs to
        | store each value. You can use the "batch" store if you want to
        | only persist to the store when the memory limit is reached.
        |
        | Drivers: memory|illuminate|batch
        |
        */
        'driver'      => 'memory',

        /*
        |--------------------------------------------------------------------------
        | Batch memory caching
        |--------------------------------------------------------------------------
        |
        | When dealing with the "batch" caching driver, it will only
        | persist to the store when the memory limit is reached.
        | Here you can tweak the memory limit to your liking.
        |
        */
        'batch'       => [
            'memory_limit' => 60000,
        ],

        /*
        |--------------------------------------------------------------------------
        | Illuminate cache
        |--------------------------------------------------------------------------
        |
        | When using the "illuminate" caching driver, it will automatically use
        | your default cache store. However if you prefer to have the cell
        | cache on a separate store, you can configure the store name here.
        | You can use any store defined in your cache config. When leaving
        | at "null" it will use the default store.
        |
        */
        'illuminate'  => [
            'store' => null,
        ],

        /*
        |--------------------------------------------------------------------------
        | Cache Time-to-live (TTL)
        |--------------------------------------------------------------------------
        |
        | The TTL of items written to cache. If you want to keep the items cached
        | indefinitely, set this to null.  Otherwise, set a number of seconds,
        | a \DateInterval, or a callable.
        |
        | Allowable types: callable|\DateInterval|int|null
        |
         */
        'default_ttl' => 10800,
    ],

    /*
    |--------------------------------------------------------------------------
    | Transaction Handler
    |--------------------------------------------------------------------------
    |
    | By default the import is wrapped in a transaction. This is useful
    | for when an import may fail and you want to retry it. With the
    | transactions, the previous import gets rolled-back.
    |
    | You can disable the transaction handler by setting this to null.
    | Or you can choose a custom made transaction handler here.
    |
    | Supported handlers: null|db
    |
    */
    'transactions' => [
        'handler' => 'db',
        'db'      => [
            'connection' => null,
        ],
    ],

    'temporary_files' => [

        /*
        |--------------------------------------------------------------------------
        | Local Temporary Path
        |--------------------------------------------------------------------------
        |
        | When exporting and importing files, we use a temporary file, before
        | storing reading or downloading. Here you can customize that path.
        | permissions is an array with the permission flags for the directory (dir)
        | and the create file (file).
        |
        */
        'local_path'          => storage_path('framework/cache/laravel-excel'),

        /*
        |--------------------------------------------------------------------------
        | Local Temporary Path Permissions
        |--------------------------------------------------------------------------
        |
        | Permissions is an array with the permission flags for the directory (dir)
        | and the create file (file).
        | If omitted the default permissions of the filesystem will be used.
        |
        */
        'local_permissions'   => [
            // 'dir'  => 0755,
            // 'file' => 0644,
        ],

        /*
        |--------------------------------------------------------------------------
        | Remote Temporary Disk
        |--------------------------------------------------------------------------
        |
        | When dealing with a multi server setup with queues in which you
        | cannot rely on having a shared local temporary path, you might
        | want to store the temporary file on a shared disk. During the
        | queue executing, we'll retrieve the temporary file from that
        | location instead. When left to null, it will always use
        | the local path. This setting only has effect when using
        | in conjunction with queued imports and exports.
        |
        */
        'remote_disk'         => null,
        'remote_prefix'       => null,

        /*
        |--------------------------------------------------------------------------
        | Force Resync
        |--------------------------------------------------------------------------
        |
        | When dealing with a multi server setup as above, it's possible
        | for the clean up that occurs after entire queue has been run to only
        | cleanup the server that the last AfterImportJob runs on. The rest of the server
        | would still have the local temporary file stored on it. In this case your
        | local storage limits can be exceeded and future imports won't be processed.
        | To mitigate this you can set this config value to be true, so that after every
        | queued chunk is processed the local temporary file is deleted on the server that
        | processed it.
        |
        */
        'force_resync_remote' => null,
    ],
];
</file>

<file path="config/filesystems.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application. Just store away!
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Here you may configure as many filesystem "disks" as you wish, and you
    | may even configure multiple disks of the same driver. Defaults have
    | been set up for each driver as an example of the required values.
    |
    | Supported Drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app'),
            'throw' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
</file>

<file path="config/hashing.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Hash Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default hash driver that will be used to hash
    | passwords for your application. By default, the bcrypt algorithm is
    | used; however, you remain free to modify this option if you wish.
    |
    | Supported: "bcrypt", "argon", "argon2id"
    |
    */

    'driver' => 'bcrypt',

    /*
    |--------------------------------------------------------------------------
    | Bcrypt Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Bcrypt algorithm. This will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'bcrypt' => [
        'rounds' => env('BCRYPT_ROUNDS', 12),
        'verify' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Argon Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Argon algorithm. These will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'argon' => [
        'memory' => 65536,
        'threads' => 1,
        'time' => 4,
        'verify' => true,
    ],

];
</file>

<file path="config/logging.php">
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that gets used when writing
    | messages to the logs. The name specified in this option should match
    | one of the channels defined in the "channels" configuration array.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => false,
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Out of
    | the box, Laravel uses the Monolog PHP logging library. This gives
    | you a variety of powerful log handlers / formatters to utilize.
    |
    | Available Drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog",
    |                    "custom", "stack"
    |
    */

    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => ['single'],
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => 14,
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => 'Laravel Log',
            'emoji' => ':boom:',
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => LOG_USER,
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],
    ],

];
</file>

<file path="config/mail.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send any email
    | messages sent by your application. Alternative mailers may be setup
    | and used as needed; however, this mailer will be used by default.
    |
    */

    'default' => env('MAIL_MAILER', 'smtp'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers to be used while
    | sending an e-mail. You will specify which one you are using for your
    | mailers below. You are free to add additional mailers as required.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "log", "array", "failover", "roundrobin"
    |
    */

    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
            'port' => env('MAIL_PORT', 587),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN'),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => null,
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'mailgun' => [
            'transport' => 'mailgun',
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all e-mails sent by your application to be sent from
    | the same address. Here, you may specify a name and address that is
    | used globally for all e-mails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Markdown Mail Settings
    |--------------------------------------------------------------------------
    |
    | If you are using Markdown based email rendering, you may configure your
    | theme and component paths here, allowing you to customize the design
    | of the emails. Or, you may simply stick with the Laravel defaults!
    |
    */

    'markdown' => [
        'theme' => 'default',

        'paths' => [
            resource_path('views/vendor/mail'),
        ],
    ],

];
</file>

<file path="config/queue.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue API supports an assortment of back-ends via a single
    | API, giving you convenient access to each back-end using the same
    | syntax for every one. Here you may define a default connection.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'sync'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection information for each server that
    | is used by your application. A default configuration has been added
    | for each back-end shipped with Laravel. You are free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => 'localhost',
            'queue' => 'default',
            'retry_after' => 90,
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => 90,
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control which database and table are used to store the jobs that
    | have failed. You may change them to any database / table you wish.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];
</file>

<file path="config/sanctum.php">
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. This will override any values set in the token's
    | "expires_at" attribute, but first-party sessions are not affected.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    |
    | Sanctum can prefix new tokens in order to take advantage of numerous
    | security scanning initiatives maintained by open source platforms
    | that notify developers if they commit tokens into repositories.
    |
    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => App\Http\Middleware\EncryptCookies::class,
        'verify_csrf_token' => App\Http\Middleware\VerifyCsrfToken::class,
    ],

];
</file>

<file path="config/services.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'mailgun' => [
        'domain' => env('MAILGUN_DOMAIN'),
        'secret' => env('MAILGUN_SECRET'),
        'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
        'scheme' => 'https',
    ],

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

];
</file>

<file path="config/session.php">
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default session "driver" that will be used on
    | requests. By default, we will use the lightweight native driver but
    | you may specify any of the other wonderful drivers provided here.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to immediately expire on the browser closing, set that option.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it is stored. All encryption will be run
    | automatically by Laravel and you can use the Session like normal.
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When using the native session driver, we need a location where session
    | files may be stored. A default has been set for you but a different
    | location may be specified. This is only needed for file sessions.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table we
    | should use to manage the sessions. Of course, a sensible default is
    | provided for you; however, you are free to change this as needed.
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | While using one of the framework's cache driven session backends you may
    | list a cache store that should be used for these sessions. This value
    | must match with one of the application's configured cache "stores".
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the cookie used to identify a session
    | instance by ID. The name specified here will get used every time a
    | new session cookie is created by the framework for every driver.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application but you are free to change this when necessary.
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Here you may change the domain of the cookie used to identify a session
    | in your application. This will determine which domains the cookie is
    | available to in your application. A sensible default has been set.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. You are free to modify this option if needed.
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" since this is a secure default value.
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => false,

];
</file>

<file path="config/view.php">
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | View Storage Paths
    |--------------------------------------------------------------------------
    |
    | Most templating systems load templates from disk. Here you may specify
    | an array of paths that should be checked for your views. Of course
    | the usual Laravel view path has already been registered for you.
    |
    */

    'paths' => [
        resource_path('views'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Compiled View Path
    |--------------------------------------------------------------------------
    |
    | This option determines where all the compiled Blade templates will be
    | stored for your application. Typically, this is within the storage
    | directory. However, as usual, you are free to change this value.
    |
    */

    'compiled' => env(
        'VIEW_COMPILED_PATH',
        realpath(storage_path('framework/views'))
    ),

];
</file>

<file path="database/.gitignore">
*.sqlite*
</file>

<file path="database/factories/UserFactory.php">
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
</file>

<file path="database/migrations/2014_10_12_000000_create_users_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users_old', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users_old');
    }
};
</file>

<file path="database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('password_reset_tokens');
    }
};
</file>

<file path="database/migrations/2019_08_19_000000_create_failed_jobs_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};
</file>

<file path="database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};
</file>

<file path="database/migrations/2024_08_09_144335_create_catergories_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('category');
            $table->timestamps();
        });

        Schema::create('brands', function (Blueprint $table) {
            $table->id();
            $table->string('brand');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('categories');
        Schema::dropIfExists('brands');
    }
};
</file>

<file path="database/migrations/2024_08_09_144418_create_departments_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('department');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('departments');
    }
};
</file>

<file path="database/migrations/2024_08_09_144434_create_sites_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('sites', function (Blueprint $table) {
            $table->id();
            $table->string('site');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('sites');
    }
};
</file>

<file path="database/migrations/2024_08_09_144442_create_locations_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('locations', function (Blueprint $table) {
            $table->id();
            $table->string('location');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('locations');
    }
};
</file>

<file path="database/migrations/2024_08_09_144510_create_suppliers_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('suppliers', function (Blueprint $table) {
            $table->id();
            $table->string('supplier');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('suppliers');
    }
};
</file>

<file path="database/migrations/2024_08_09_144535_create_customers_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('customers', function (Blueprint $table) {
            $table->id();
            $table->string('first_name');
            $table->string('middle_name')->nullable();
            $table->string('last_name');
            $table->string('address');
            $table->string('contact_number');
            $table->string('email');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('customers');
    }
};
</file>

<file path="database/migrations/2024_08_09_144549_create_maintenances_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('maintenances', function (Blueprint $table) {
            $table->id();
            $table->string('maintenance_title');
            $table->string('maintenance_detail')->nullable();
            $table->date('maintenance_due_date');
            $table->string('maintenance_by');
            $table->string('maintenance_status');
            $table->date('date_completed')->nullable();
            $table->decimal('maintenance_cost', 10, 2);
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('maintenances');
    }
};
</file>

<file path="database/migrations/2024_08_09_144604_create_roles_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('roles', function (Blueprint $table) {
            $table->id();
            $table->string('role');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('roles');
    }
};
</file>

<file path="database/migrations/2024_08_09_144832_create_inventories_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('units', function (Blueprint $table) {
            $table->id();
            $table->string('unit');
            $table->timestamps();
        });

        Schema::create('inventories', function (Blueprint $table) {
            $table->id();
            $table->string('unique_tag');
            $table->string('stock_image')->nullable();
            $table->integer('quantity');
            $table->unsignedBigInteger('unit_id');
            $table->foreign('unit_id')->references('id')->on('units');
            $table->string('items_specs');
            $table->unsignedBigInteger('brand_id');
            $table->foreign('brand_id')->references('id')->on('brands');
            $table->decimal('unit_price', 10, 2);
            $table->unsignedBigInteger('supplier_id');
            $table->foreign('supplier_id')->references('id')->on('suppliers');
            $table->unsignedBigInteger('department_id')->nullable();
            $table->foreign('department_id')->references('id')->on('departments');
            $table->date('stock_out_date')->nullable();
            $table->timestamps();
            $table->softDeletes();
            $table->unsignedBigInteger('created_by')->nullable();
            $table->unsignedBigInteger('deleted_by')->nullable();            
            $table->foreign('created_by')->references('id')->on('users');
            $table->foreign('deleted_by')->references('id')->on('users');
        });
    }

    public function down()
    {
        Schema::dropIfExists('inventories');
        Schema::dropIfExists('units');
    }
};
</file>

<file path="database/migrations/2024_08_18_092805_create_lease_items_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('lease_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('lease_id')->constrained()->onDelete('cascade');
            $table->foreignId('asset_id')->constrained('assets')->onDelete('cascade');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('lease_items');
    }
};
</file>

<file path="database/migrations/2024_08_30_072217_create_asset_edit_history_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('asset_edit_histories', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('asset_id');
            $table->foreign('asset_id')->references('id')->on('assets');
            $table->unsignedBigInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users');
            $table->text('changes');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('asset_edit_history');
    }
};
</file>

<file path="database/migrations/2024_09_28_171531_create_stock_outs_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('stock_outs', function (Blueprint $table) {
            $table->id();
            $table->uuid('stock_out_id');
            $table->unsignedBigInteger('inventory_id');
            $table->foreign('inventory_id')->references('id')->on('inventories');
            $table->integer('quantity');
            $table->unsignedBigInteger('department_id');
            $table->foreign('department_id')->references('id')->on('departments');
            $table->date('stock_out_date');
            $table->string('receiver');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('stock_outs');
    }
};
</file>

<file path="database/migrations/2024_10_01_055732_create_alerts_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('alerts', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('alerts');
    }
};
</file>

<file path="database/migrations/2024_10_09_053834_create_purchase_orders_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('purchase_orders', function (Blueprint $table) {
            $table->id();
            $table->uuid('group_id_for_items_purchased_at_the_same_time');
            $table->unsignedBigInteger('department_id');
            $table->foreign('department_id')->references('id')->on('departments');
            $table->unsignedBigInteger('supplier_id');
            $table->foreign('supplier_id')->references('id')->on('suppliers');
            $table->unsignedBigInteger('unit_id');
            $table->foreign('unit_id')->references('id')->on('units');
            $table->unsignedBigInteger('location_id');
            $table->foreign('location_id')->references('id')->on('locations');
            $table->date('po_date');
            $table->integer('po_number');
            $table->integer('mr_number');
            $table->integer('quantity');
            $table->string('items_specs');
            $table->string('approved_by');
            $table->decimal('unit_price', 10, 2);
            $table->string('note')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('purchase_orders');
    }
};
</file>

<file path="database/migrations/2024_12_11_043000_create_inventory_edit_histories_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('inventory_edit_histories', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('inventory_id');
            $table->foreign('inventory_id')->references('id')->on('inventories');
            $table->unsignedBigInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users');
            $table->text('changes');
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('inventory_edit_histories');
    }
};
</file>

<file path="database/migrations/2024_12_15_093510_create_employees_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('employees', function (Blueprint $table) {
            $table->id();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('employees');
    }
};
</file>

<file path="database/migrations/2025_01_13_224834_create_requested_items_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('requested_items', function (Blueprint $table) {
            $table->id();
            $table->uuid('request_group_id')->nullable();
            $table->foreignId('brand_id')->constrained('brands');
            $table->string('items_specs');
            $table->foreignId('unit_id')->constrained('units');
            $table->integer('quantity');
            $table->decimal('unit_price', 10, 2);
            $table->foreignId('supplier_id')->constrained('suppliers');
            $table->enum('status', ['pending', 'approved', 'rejected'])->default('pending');
            $table->text('remarks')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('requested_items');
    }
};
</file>

<file path="database/migrations/2025_01_16_075827_create_viewed_alerts_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('viewed_alerts', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id');
            $table->unsignedBigInteger('asset_id');
            $table->timestamps();
            $table->foreign('user_id')->references('id')->on('users');
            $table->foreign('asset_id')->references('id')->on('assets');
            $table->unique(['user_id', 'asset_id']);
        });
    }

    public function down()
    {
        Schema::dropIfExists('viewed_alerts');
    }
};
</file>

<file path="database/seeders/AssetSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Asset;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Department;
use App\Models\Condition;
use App\Models\Status;
use App\Models\Brand;
use Carbon\Carbon;

class AssetSeeder extends Seeder
{
    /**
     * Generate a unique asset tag based on prefix and index
     */
    private function generateUniqueAssetTag($prefix, $index)
    {
        return $prefix . str_pad($index, 3, '0', STR_PAD_LEFT);
    }

    /**
     * Run the database seeds.
     */
    public function run()
    {
        $supplier = Supplier::all();
        $site = Site::where('site', 'Annex Campus')->first();
        $location = Location::where('location', 'Roxas City')->first();
        $category = Category::all();
        $ccsDepartment = Department::where('department', 'CCS Department')->first();
        $casDepartment = Department::where('department', 'CAS Department')->first();
        $conditions = Condition::all();
        $status = Status::all();
        $Canon = Brand::where('brand', 'Canon')->first();
        $FaberCastell = Brand::where('brand', 'Faber-Castell')->first();
        $Pilot = Brand::where('brand', 'Pilot')->first();
        $Staedtler = Brand::where('brand', 'Staedtler')->first();
        $StaedtlerNoris = Brand::where('brand', 'Staedtler Noris')->first();
        $Tombow = Brand::where('brand', 'Tombow')->first();
        $Zebra = Brand::where('brand', 'Zebra')->first();
        $HP = Brand::where('brand', 'HP')->first();
        $Dell = Brand::where('brand', 'Dell')->first();
        $Cisco = Brand::where('brand', 'Cisco')->first();
        $maintenanceStartDate = Carbon::now()->subDays(rand(30, 365)); 
        $maintenanceEndDate = Carbon::now()->subDays(rand(1, 29)); 

        if ($supplier && $site && $location && $category && $ccsDepartment) {
            // Desktop PCs (FCCPC)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPC', 1),
                'specs' => 'HP OMEN Desktop PC with Intel Core i7 processor, 16GB RAM, 1TB SSD, and NVIDIA RTX 3060 graphics card',
                'brand_id' => $HP->id,
                'model' => 'HP OMEN',
                'serial_number' => '4CE8061CQG',
                'cost' => 12350.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 1,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPC', 2),
                'specs' => 'HP OMEN Desktop PC featuring Intel Core i5 processor, 8GB RAM, 512GB SSD, and NVIDIA GTX 1660 Super graphics card',
                'brand_id' => $HP->id,
                'model' => 'HP OMEN',
                'serial_number' => 'CZC7139K48',
                'cost' => 11425.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 1,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => '2023-01-24',
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            // Additional Desktop PCs (FCCPC)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPC', 3),
                'specs' => 'Dell OptiPlex 7090 Desktop with Intel Core i7-11700 processor, 32GB RAM, 1TB NVMe SSD, and integrated Intel UHD Graphics',
                'brand_id' => $Dell->id,
                'model' => 'OptiPlex 7090',
                'serial_number' => 'DLL7090X441',
                'cost' => 45350.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 1,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPC', 4),
                'specs' => 'HP ProDesk 600 G6 Desktop featuring Intel Core i5-10500 processor, 16GB RAM, 512GB SSD, and integrated Intel UHD Graphics',
                'brand_id' => $HP->id,
                'model' => 'ProDesk 600 G6',
                'serial_number' => 'HP600G6X552',
                'cost' => 42800.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 1,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-01-18',
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            // Additional Desktop PCs with different configurations
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPC', 5),
                'specs' => 'HP Z4 G4 Workstation powered by Intel Xeon W-2245 processor, 64GB RAM, 2TB NVMe SSD, and NVIDIA Quadro RTX 4000',
                'brand_id' => $HP->id,
                'model' => 'Z4 G4',
                'serial_number' => 'HPZ4G4X661',
                'cost' => 85000.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 1,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPC', 6),
                'specs' => 'Dell Precision 3660 Workstation with Intel Xeon W-2223 processor, 32GB RAM, 1TB SSD, and NVIDIA RTX A2000',
                'brand_id' => $Dell->id,
                'model' => 'Precision 3660',
                'serial_number' => 'DLL3660X772',
                'cost' => 78500.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 1,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-06-05',
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            // Monitors (FCCMO)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCMO', 1),
                'specs' => 'HP EliteDisplay 23.8-inch FHD IPS monitor with 1920x1080 resolution, 60Hz refresh rate, and built-in speakers',
                'brand_id' => $HP->id,
                'model' => 'HP EliteDisplay',
                'serial_number' => 'CNC634P8KD',
                'cost' => 3859.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 2,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            // Additional Monitors (FCCMO)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCMO', 2),
                'specs' => 'Dell P2419H 24-inch Professional monitor with 1920x1080 resolution, 60Hz refresh rate, and anti-glare coating',
                'brand_id' => $Dell->id,
                'model' => 'P2419H',
                'serial_number' => 'DLL2419H773',
                'cost' => 12500.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 2,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => '2024-02-01',
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCMO', 3),
                'specs' => 'HP Z27n G2 27-inch QHD monitor with 2560x1440 resolution, 60Hz refresh rate, and USB-C connectivity',
                'brand_id' => $HP->id,
                'model' => 'Z27n G2',
                'serial_number' => 'HPZ27G2X884',
                'cost' => 15800.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 2,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-02-05',
                'condition_id' => 2,
                'status_id' => 2,
                'maintenance_start_date' => $maintenanceStartDate,
                'maintenance_end_date' => $maintenanceEndDate,
            ]);

            // Additional High-End Monitors
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCMO', 4),
                'specs' => 'Dell UltraSharp U3219Q 32-inch 4K monitor with 3840x2160 resolution, HDR support, and USB-C hub functionality',
                'brand_id' => $Dell->id,
                'model' => 'UltraSharp U3219Q',
                'serial_number' => 'DLLU3219X883',
                'cost' => 32000.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 2,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCMO', 5),
                'specs' => 'HP E27q G4 27-inch QHD monitor with 2560x1440 resolution, 75Hz refresh rate, and integrated USB hub',
                'brand_id' => $HP->id,
                'model' => 'E27q G4',
                'serial_number' => 'HPE27Q4X994',
                'cost' => 28500.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 2,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-07-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Laptops (FCCLT)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCLT', 1),
                'specs' => 'Dell Alienware laptop with Intel Core i9 processor, 32GB RAM, 1TB NVMe SSD, and NVIDIA RTX 3080 mobile GPU',
                'brand_id' => $Dell->id,
                'model' => 'Alienware',
                'serial_number' => '8C2W533',
                'cost' => 125520.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 3,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Additional Laptops (FCCLT)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCLT', 2),
                'specs' => 'HP ProBook 450 G8 laptop featuring Intel Core i5-1135G7 processor, 16GB RAM, 512GB SSD, and integrated Intel Iris Xe graphics',
                'brand_id' => $HP->id,
                'model' => 'ProBook 450 G8',
                'serial_number' => 'HP450G8X995',
                'cost' => 52300.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 3,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => '2024-03-01',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCLT', 3),
                'specs' => 'Dell Latitude 5520 laptop with Intel Core i7-1165G7 processor, 16GB RAM, 512GB SSD, and Intel Iris Xe graphics',
                'brand_id' => $Dell->id,
                'model' => 'Latitude 5520',
                'serial_number' => 'DLL5520X116',
                'cost' => 54800.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 3,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-03-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Additional High-Performance Laptops
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCLT', 4),
                'specs' => 'HP ZBook Fury 15 G8 mobile workstation with Intel Xeon W-11955M processor, 64GB RAM, 2TB NVMe SSD, and NVIDIA RTX A5000',
                'brand_id' => $HP->id,
                'model' => 'ZBook Fury 15 G8',
                'serial_number' => 'HPZBK15X105',
                'cost' => 125000.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 3,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCLT', 5),
                'specs' => 'Dell Precision 5570 mobile workstation featuring Intel Core i9-12900H processor, 32GB RAM, 1TB SSD, and NVIDIA RTX A3000',
                'brand_id' => $Dell->id,
                'model' => 'Precision 5570',
                'serial_number' => 'DLLP5570X216',
                'cost' => 118000.00,
                'supplier_id' => 4,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 3,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-08-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Printers (FCCPR)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPR', 1),
                'specs' => 'HP Color LaserJet Enterprise printer with automatic duplex printing, 30ppm color/black, and network connectivity',
                'brand_id' => $HP->id,
                'model' => 'HP Color LaserJet',
                'serial_number' => 'NLBVM8H0LX',
                'cost' => 63299.00,
                'supplier_id' => 5,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 4,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Additional Printers (FCCPR)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPR', 2),
                'specs' => 'HP LaserJet Pro M404dn monochrome printer with 40ppm print speed, automatic duplex printing, and Gigabit Ethernet',
                'brand_id' => $HP->id,
                'model' => 'LaserJet Pro M404dn',
                'serial_number' => 'HPM404X227',
                'cost' => 22500.00,
                'supplier_id' => 5,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 4,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => '2024-04-01',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPR', 3),
                'specs' => 'Canon PIXMA G7070 all-in-one printer with high-yield ink tanks, wireless connectivity, and automatic document feeder',
                'brand_id' => $Canon->id,
                'model' => 'PIXMA G7070',
                'serial_number' => 'CNG7070X338',
                'cost' => 18900.00,
                'supplier_id' => 5,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 4,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-04-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Additional Enterprise Printers
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPR', 4),
                'specs' => 'HP Color LaserJet Enterprise M555x with 40ppm color printing, 2GB RAM, and advanced security features',
                'brand_id' => $HP->id,
                'model' => 'Color LaserJet Enterprise M555x',
                'serial_number' => 'HPM555X327',
                'cost' => 45000.00,
                'supplier_id' => 5,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 4,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => '2024-09-01',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPR', 5),
                'specs' => 'Canon imageRUNNER 2630i multifunction printer with 30ppm printing, scanning, copying, and advanced document handling',
                'brand_id' => $Canon->id,
                'model' => 'imageRUNNER 2630i',
                'serial_number' => 'CNI2630X438',
                'cost' => 52000.00,
                'supplier_id' => 5,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 4,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-09-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // IP Phones (FCCPH)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPH', 1),
                'specs' => 'Cisco IP Phone with 5-inch display, HD voice, and Power over Ethernet capability',
                'brand_id' => $Cisco->id,
                'model' => 'Cisco IP Phone',
                'serial_number' => '20EZIZCL30229E46',
                'cost' => 14259.00,
                'supplier_id' => 6,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 5,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Additional IP Phones (FCCPH)
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPH', 2),
                'specs' => 'Cisco IP Phone 8841 with 5-inch color display, HD audio, and advanced calling features',
                'brand_id' => $Cisco->id,
                'model' => 'IP Phone 8841',
                'serial_number' => 'CSC8841X449',
                'cost' => 12800.00,
                'supplier_id' => 6,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 5,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => '2024-05-01',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPH', 3),
                'specs' => 'Cisco IP Phone 7821 with 3.5-inch grayscale display, dual Gigabit Ethernet ports, and basic calling features',
                'brand_id' => $Cisco->id,
                'model' => 'IP Phone 7821',
                'serial_number' => 'CSC7821X550',
                'cost' => 9800.00,
                'supplier_id' => 6,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 5,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-05-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            // Additional Advanced IP Phones
            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPH', 4),
                'specs' => 'Cisco IP Phone 8861 with 5-inch color display, built-in Bluetooth, Wi-Fi, and USB port for headsets',
                'brand_id' => $Cisco->id,
                'model' => 'IP Phone 8861',
                'serial_number' => 'CSC8861X549',
                'cost' => 18500.00,
                'supplier_id' => 6,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 5,
                'department_id' => $ccsDepartment->id,
                'purchase_date' => Carbon::now(),
                'condition_id' => 1,
                'status_id' => 1,
            ]);

            Asset::create([
                'asset_tag_id' => $this->generateUniqueAssetTag('FCCPH', 5),
                'specs' => 'Cisco IP Phone 8845 with 5-inch color display, 720p HD video calling, and advanced telephony features',
                'brand_id' => $Cisco->id,
                'model' => 'IP Phone 8845',
                'serial_number' => 'CSC8845X650',
                'cost' => 16800.00,
                'supplier_id' => 6,
                'site_id' => $site->id,
                'location_id' => $location->id,
                'category_id' => 5,
                'department_id' => $casDepartment->id,
                'purchase_date' => '2024-10-05',
                'condition_id' => 1,
                'status_id' => 1,
            ]);
        }
    }
}
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php

namespace Database\Seeders;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            ConditionSeeder::class,
            RoleSeeder::class,
            ForeignRelatedTablesSeeder::class,
            AssetSeeder::class,
            InventorySeeder::class,
            DefaultUserSeeder::class,
        ]);
    }
}
</file>

<file path="database/seeders/InventorySeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Inventory;
use App\Models\Supplier;
use App\Models\Unit;
use App\Models\Brand;
use Carbon\Carbon;

class InventorySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run()
    {
        $supplier = Supplier::all();
        $units = Unit::all();
        $Canon = Brand::where('brand', 'Canon')->first();
        $FaberCastell = Brand::where('brand', 'Faber-Castell')->first();
        $Pilot = Brand::where('brand', 'Pilot')->first();
        $Staedtler = Brand::where('brand', 'Staedtler')->first();
        $StaedtlerNoris = Brand::where('brand', 'Staedtler Noris')->first();
        $Tombow = Brand::where('brand', 'Tombow')->first();
        $Zebra = Brand::where('brand', 'Zebra')->first();
        $HP = Brand::where('brand', 'HP')->first();
        $Dell = Brand::where('brand', 'Dell')->first();
        $Cisco = Brand::where('brand', 'Cisco')->first();
        $pastMonth = Carbon::now()->subMonth()->startOfMonth();
        $pastPastMonth = Carbon::now()->subMonths(2)->startOfMonth();

        if ($supplier) {
            Inventory::create([
                'quantity' => 15, 
                'unit_id' => 2, 
                'items_specs' => 'Ballpen', 
                'brand_id' => $FaberCastell->id,
                'unit_price' => 50.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 10, 
                'unit_id' => 2, 
                'items_specs' => 'G-Tec-C4 Gel Ink Pen',
                'brand_id' => $Pilot->id,
                'unit_price' => 30.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 5, 
                'unit_id' => 2, 
                'items_specs' => 'Pencil', 
                'brand_id' => $StaedtlerNoris->id,
                'unit_price' => 20.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 10, 
                'unit_id' => 2, 
                'items_specs' => '9000 Graphite Pencil', 
                'brand_id' => $FaberCastell->id,
                'unit_price' => 25.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 15, 
                'unit_id' => 2, 
                'items_specs' => 'Mono 100 Pencil', 
                'brand_id' => $Tombow->id,
                'unit_price' => 30.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 5, 
                'unit_id' => 2, 
                'items_specs' => 'Acroball Pen', 
                'brand_id' => $Pilot->id,
                'unit_price' => 40.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 5, 
                'unit_id' => 2, 
                'items_specs' => 'Sarasa Gel Pen', 
                'brand_id' => $Zebra->id,
                'unit_price' => 35.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 0, 
                'unit_id' => 2, 
                'items_specs' => 'Pitt Artist Pen', 
                'brand_id' => $FaberCastell->id,
                'unit_price' => 45.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 10, 
                'unit_id' => 2, 
                'items_specs' => 'Lumocolor Permanent Marker', 
                'brand_id' => $Staedtler->id,
                'unit_price' => 50.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 2, 
                'items_specs' => 'ABT Dual Tip Marker', 
                'brand_id' => $Tombow->id,
                'unit_price' => 40.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 10, 
                'unit_id' => 2, 
                'items_specs' => 'Polychromos Pencil', 
                'brand_id' => $FaberCastell->id,
                'unit_price' => 55.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 2, 
                'items_specs' => 'G2 Gel Ink Pen', 
                'brand_id' => $Pilot->id,
                'unit_price' => 35.00, 
                'supplier_id' => 1,
                'created_at' => $pastPastMonth,
            ]);

            Inventory::create([
                'quantity' => 0, 
                'unit_id' => 2, 
                'items_specs' => 'F-701 Ballpoint Pen', 
                'brand_id' => $Zebra->id,
                'unit_price' => 30.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 5, 
                'unit_id' => 2, 
                'items_specs' => 'Ergosoft Pencil', 
                'brand_id' => $Staedtler->id,
                'unit_price' => 25.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 1, 
                'unit_id' => 2, 
                'items_specs' => 'Fudenosuke Brush Pen', 
                'brand_id' => $Tombow->id,
                'unit_price' => 40.00, 
                'supplier_id' => 1,
                'created_at' => $pastPastMonth,
            ]);

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 2, 
                'items_specs' => 'Kneaded Eraser', 
                'brand_id' => $FaberCastell->id,
                'unit_price' => 20.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 1, 
                'unit_id' => 2, 
                'items_specs' => 'FriXion Erasable Pen', 
                'brand_id' => $Pilot->id,
                'unit_price' => 35.00, 
                'supplier_id' => 1,
                'created_at' => $pastPastMonth,
            ]);

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 2, 
                'items_specs' => 'Midliner Highlighter', 
                'brand_id' => $Zebra->id,
                'unit_price' => 30.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 2, 
                'items_specs' => 'Textsurfer Highlighter', 
                'brand_id' => $Staedtler->id,
                'unit_price' => 25.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 0, 
                'unit_id' => 2, 
                'items_specs' => 'Dual Tip Highlighter', 
                'brand_id' => $Tombow->id,
                'unit_price' => 40.00, 
                'supplier_id' => 1,
            ]);

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 1, 
                'items_specs' => 'Bond Paper Long', 
                'brand_id' => $Canon->id,
                'unit_price' => 450.00,
                'supplier_id' => 2,
                'created_at' => $pastMonth,
            ]); 

            Inventory::create([
                'quantity' => 100, 
                'unit_id' => 1, 
                'items_specs' => 'Bond Paper Short', 
                'brand_id' => $Canon->id,
                'unit_price' => 350.00,
                'supplier_id' => 2,
                'created_at' => $pastMonth,
            ]);

        } else {
            echo "Supplier 'Company X' is required but not found.\n";
        }
    }
}
</file>

<file path="For QR Code/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FCU Asset Details</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen py-8">
    <div class="max-w-2xl mx-auto px-4">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="text-center mb-6">
                <h1 class="text-2xl font-bold text-gray-800">FCU Asset Details</h1>
                <p class="text-gray-600" id="assetTagId"></p>
            </div>

            <div id="assetImage" class="hidden mb-6">
                <img id="assetImageElement" src="" alt="Asset Image" class="mx-auto max-h-48 object-cover">
            </div>

            <div class="space-y-6">
                <!-- Basic Info -->
                <div class="border-b pb-4">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">Basic Information</h2>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-500">Assigned To</p>
                            <p id="assignedTo" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Brand</p>
                            <p id="brand" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Model</p>
                            <p id="model" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Serial Number</p>
                            <p id="serial" class="font-medium"></p>
                        </div>
                    </div>
                </div>

                <!-- Location Info -->
                <div class="border-b pb-4">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">Location Information</h2>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-500">Site</p>
                            <p id="site" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Location</p>
                            <p id="location" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Department</p>
                            <p id="department" class="font-medium"></p>
                        </div>
                    </div>
                </div>

                <!-- Details -->
                <div class="border-b pb-4">
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">Asset Details</h2>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-500">Category</p>
                            <p id="category" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Status</p>
                            <p id="status" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Condition</p>
                            <p id="condition" class="font-medium"></p>
                        </div>
                    </div>
                    <div class="mt-4">
                        <p class="text-sm text-gray-500">Specifications</p>
                        <p id="specs" class="font-medium"></p>
                    </div>
                </div>

                <!-- Purchase Info -->
                <div>
                    <h2 class="text-lg font-semibold text-gray-700 mb-3">Purchase Information</h2>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-gray-500">Supplier</p>
                            <p id="supplier" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Cost</p>
                            <p id="cost" class="font-medium"></p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-500">Purchase Date</p>
                            <p id="purchaseDate" class="font-medium"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get the data parameter from URL
            const urlParams = new URLSearchParams(window.location.search);
            const encodedData = urlParams.get('data');

            if (encodedData) {
                try {
                    // Decode the base64 data
                    const jsonString = atob(encodedData);
                    const data = JSON.parse(jsonString);

                    // Update all fields
                    document.getElementById('assetTagId').textContent = `Asset Tag ID: ${data.tag_id}`;
                    document.getElementById('assignedTo').textContent = data.assigned_to;
                    document.getElementById('brand').textContent = data.brand;
                    document.getElementById('model').textContent = data.model;
                    document.getElementById('serial').textContent = data.serial;
                    document.getElementById('site').textContent = data.site;
                    document.getElementById('location').textContent = data.location;
                    document.getElementById('department').textContent = data.department;
                    document.getElementById('category').textContent = data.category;
                    document.getElementById('status').textContent = data.status;
                    document.getElementById('condition').textContent = data.condition;
                    document.getElementById('specs').textContent = data.specs;
                    document.getElementById('supplier').textContent = data.supplier;
                    document.getElementById('cost').textContent = data.cost;
                    document.getElementById('purchaseDate').textContent = data.purchase_date;

                    // Handle image if present
                    if (data.image) {
                        document.getElementById('assetImage').classList.remove('hidden');
                        document.getElementById('assetImageElement').src = data.image;
                    }
                } catch (error) {
                    console.error('Error parsing asset data:', error);
                    document.body.innerHTML = '<div class="max-w-2xl mx-auto px-4 py-8"><div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert"><strong class="font-bold">Error!</strong><span class="block sm:inline"> Unable to load asset details.</span></div></div>';
                }
            } else {
                document.body.innerHTML = '<div class="max-w-2xl mx-auto px-4 py-8"><div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative" role="alert"><strong class="font-bold">No Data!</strong><span class="block sm:inline"> No asset data provided.</span></div></div>';
            }
        });
    </script>
</body>
</html>
</file>

<file path="generate_sample_data.php">
<?php

$data = [
    [
        'asset_tag_id' => 'ASSET-001',
        'brand' => 'Dell',  // Make sure this brand exists in your brands table
        'model' => 'Latitude 5420',
        'specs' => 'Intel Core i5, 16GB RAM, 512GB SSD',
        'serial_number' => 'SN12345678',
        'cost' => '45000',
        'supplier' => 'TechVendor Inc',  // Make sure this supplier exists in your suppliers table
        'site' => 'Main Campus',  // Make sure this site exists in your sites table
        'location' => 'IT Department',  // Make sure this location exists in your locations table
        'category' => 'Laptop',  // Make sure this category exists in your categories table
        'department' => 'Information Technology',  // Make sure this department exists in your departments table
        'purchase_date' => '2024-01-15',
        'condition' => 'New',  // Should match a condition in your conditions table
        'status' => 'Available',  // Should match a status in your statuses table
        'assigned_to' => 'John Doe',
        'issued_date' => '2024-01-20',
        'notes' => 'Company laptop for development team'
    ],
    [
        'asset_tag_id' => 'ASSET-002',
        'brand' => 'HP',
        'model' => 'ProDesk 600',
        'specs' => 'Intel Core i7, 32GB RAM, 1TB SSD',
        'serial_number' => 'HP98765432',
        'cost' => '55000',
        'supplier' => 'TechVendor Inc',
        'site' => 'Main Campus',
        'location' => 'Finance Department',
        'category' => 'Desktop',
        'department' => 'Finance',
        'purchase_date' => '2024-01-16',
        'condition' => 'New',
        'status' => 'Available',
        'assigned_to' => 'Jane Smith',
        'issued_date' => '2024-01-21',
        'notes' => 'Finance department workstation'
    ],
    [
        'asset_tag_id' => 'ASSET-003',
        'brand' => 'Lenovo',
        'model' => 'ThinkPad X1',
        'specs' => 'Intel Core i7, 16GB RAM, 512GB SSD',
        'serial_number' => 'LN11223344',
        'cost' => '65000',
        'supplier' => 'TechVendor Inc',
        'site' => 'Main Campus',
        'location' => 'HR Department',
        'category' => 'Laptop',
        'department' => 'Human Resources',
        'purchase_date' => '2024-01-17',
        'condition' => 'New',
        'status' => 'Available',
        'assigned_to' => 'Robert Johnson',
        'issued_date' => '2024-01-22',
        'notes' => 'HR manager laptop'
    ]
];

// Open CSV file
$fp = fopen('sample_assets_import.csv', 'w');

// Write headers
fputcsv($fp, array_keys($data[0]));

// Write data
foreach ($data as $row) {
    fputcsv($fp, $row);
}

fclose($fp);

echo "Sample import file 'sample_assets_import.csv' has been generated.\n";
echo "\nBefore importing, please ensure that the following exist in your database:\n";
echo "Brands: Dell, HP, Lenovo\n";
echo "Suppliers: TechVendor Inc\n";
echo "Sites: Main Campus\n";
echo "Locations: IT Department, Finance Department, HR Department\n";
echo "Categories: Laptop, Desktop\n";
echo "Departments: Information Technology, Finance, Human Resources\n";
echo "Conditions: New\n";
echo "Statuses: Available\n";
</file>

<file path="If you want to install maatwebsiteexcel, read this first.txt">
Install the package using git bash
</file>

<file path="Notes for printing the supplies purchased per month.txt">
Files used:
    resources\views\fcu-ams\reports\reports.blade.php
    app\Http\Controllers\ReportController.php
    resources\views\reports\monthly-supplier-pdf.blade.php
    app\Services\ReportPrintService.php
    config\app.php (registered the Barryvdh in providers and aliases)
</file>

<file path="npm install.cmd">
npm install
</file>

<file path="npm run build.cmd">
npm run build
</file>

<file path="npm run dev.cmd">
npm run dev
</file>

<file path="Open the project.url">
[{000214A0-0000-0000-C000-000000000046}]
Prop3=19,2
[InternetShortcut]
IDList=
URL=http://127.0.0.1:8000/
</file>

<file path="package.json">
{
    "private": true,
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.20",
        "axios": "^1.6.4",
        "laravel-vite-plugin": "^1.0.0",
        "postcss": "^8.4.41",
        "tailwindcss": "^3.4.9",
        "vite": "^5.0.0"
    },
    "dependencies": {
        "alpinejs": "^3.14.1",
        "chart.js": "^4.4.3"
    }
}
</file>

<file path="php artisan dbseed.cmd">
php artisan db:seed

pause
</file>

<file path="php artisan dbwipe.cmd">
php artisan db:wipe

pause
</file>

<file path="php artisan keygenerate.cmd">
php artisan key:generate

pause
</file>

<file path="php artisan migrate.cmd">
php artisan migrate

pause
</file>

<file path="php artisan serve.cmd">
php artisan serve
</file>

<file path="php artisan storagelink.cmd">
php artisan storage:link

pause
</file>

<file path="phpunit.xml">
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>
        <!-- <env name="DB_CONNECTION" value="sqlite"/> -->
        <!-- <env name="DB_DATABASE" value=":memory:"/> -->
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="public/.htaccess">
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
</file>

<file path="public/css/addAsset.css">
.fcu-icon {
    width: 150px;
    height: 150px;
}

.content {
    max-height: 100dvh;
    overflow-y: scroll;
}

.dropdown-content a {
    transition: max-height 0.3s ease-out;
}

input[type="file"]::file-selector-button {
    background-color: #007bff;
    color: white;
    border: none; 
    padding: 0.5rem 1rem; 
    border-radius: 0.375rem;
    cursor: pointer; 
    transition: background-color 0.3s ease; 
}

input[type="file"]::file-selector-button:hover {
    background-color: #0056b3;
}
</file>

<file path="public/css/asset.css">
.fcu-icon {
    width: 150px;
    height: 150px;
}

.content {
    max-height: 100dvh;
    overflow-y: scroll;
}

.dropdown-content a {
    transition: max-height 0.3s ease-out;
}
</file>

<file path="public/css/dashboard.css">
.fcu-icon {
    width: 150px;
    height: 150px;
}

.content {
    max-height: 100dvh;
    overflow-y: scroll;
}

/* Dashboard Cards */
.dashboard-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    background: white;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.dashboard-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Chart Containers */
.chart-container {
    background: white;
    border-radius: 0.75rem;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

/* Recent Actions */
.recent-action-item {
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    margin-bottom: 0.5rem;
    transition: background-color 0.2s ease;
}

.recent-action-item:hover {
    background-color: #f1f5f9;
}

/* Header Navigation */
.dashboard-nav {
    background: white;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin: 1rem;
    padding: 1rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.profile-link {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
}

.profile-link:hover {
    background-color: #f1f5f9;
}

/* Scrollbar Styling */
.content::-webkit-scrollbar {
    width: 8px;
}

.content::-webkit-scrollbar-track {
    background: #f1f5f9;
}

.content::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
}

.content::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
}
</file>

<file path="public/css/inventory.css">
.fcu-icon {
    width: 150px;
    height: 150px;
}

.content {
    max-height: 100dvh;
    overflow-y: scroll;
}

.dropdown-content a {
    transition: max-height 0.3s ease-out;
}
</file>

<file path="public/css/login.css">
form {
    display: block !important;
}

.body {
    background-image: url(/img/login/bg-2.jpg);
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

.login-container {
    min-height: 94dvh;
    min-width: 97dvw;
    background-image: url(/img/login/transparent.png);
    /* backdrop-filter: blur(1px); */
}

.form-container {
    margin: auto;
}

.login-title {
    padding-bottom: 15dvh;
}

.login-form {
    background-color: #ffffff;
    width: 444px;
}

.fcu-icon {
    margin: 0 auto;
    height: 222px;
    width: 222px;
}

.input-container {
    position: relative;
    width: 100%;
}

.input-container input {
    width: 100%;
    padding: 10px 10px 10px 40px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.input-container .icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 18px;
    color: #aaa;
}
</file>

<file path="public/css/signup.css">
form {
    display: block !important;
}

.body {
    background-image: url(/img/login/bg-2.jpg) !important;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

.bg-picture {
background-image: url(/img/login/bg-2.jpg) !important;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
}

.login-container {
    min-height: 94dvh;
    /* min-width: 97dvw; */
    background-image: url(/img/login/transparent.png);
    /* backdrop-filter: blur(1px); */
}

.form-container {
    margin: auto;
}

.login-title {
    padding-bottom: 15dvh;
}

.login-form {
    background-color: #ffffff;
    min-width: 30dvw;
}

.fcu-icon {
    margin: 0 auto;
    height: 222px;
    width: 222px;
}

/* .input-container {
    position: relative;
    width: 100%;
}

.input-container input {
    width: 100%;
    padding: 10px 10px 10px 40px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.input-container .icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 18px;
    color: #aaa;
} */
</file>

<file path="public/css/stockin.css">
.fcu-icon {
    width: 150px;
    height: 150px;
}

.content {
    max-height: 100dvh;
    overflow-y: scroll;
}

.dropdown-content a {
    transition: max-height 0.3s ease-out;
}

input[type="file"]::file-selector-button {
    background-color: #007bff;
    color: white;
    border: none; 
    padding: 0.5rem 1rem; 
    border-radius: 0.375rem;
    cursor: pointer; 
    transition: background-color 0.3s ease; 
}

input[type="file"]::file-selector-button:hover {
    background-color: #0056b3;
}
</file>

<file path="public/css/style.css">
@font-face {
    font-family: "Archivo";
    font-style: black;
    font-weight: 900;
    src: local("Archivo"), local("Archivo"),
        url("/fonts/Archivo.ttf") format("truetype");
}

@font-face {
    font-family: "Urbanist";
    font-style: black;
    font-weight: 900;
    src: local("Urbanist"), local("Urbanist"),
        url("/fonts/Urbanist.ttf") format("truetype");
}

h1 {
    font-family: "Archivo", sans-serif;
}

.archivo {
    font-family: "Archivo", sans-serif;
}

.segoe {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.urbanist {
    font-family: 'Urbanist', sans-serif;
}

* {
    font-family: 'Urbanist', sans-serif;
    /* outline: 1px dotted red; */
}

html {
    scroll-behavior: smooth;
}

.sidebar {
    max-height: 100dvh;
}

.min-width {
    min-width: 100px;
}

input[type="file"]::file-selector-button {
    background-color: #007bff;
    color: white;
    border: none; 
    padding: 0.5rem 1rem; 
    border-radius: 0.375rem;
    cursor: pointer; 
    transition: background-color 0.3s ease; 
}

input[type="file"]::file-selector-button:hover {
    background-color: #0056b3;
}

#defaultModal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


.modalBg {
    background-color: rgba(0, 0, 0, 0.5);
}
</file>

<file path="public/index.php">
<?php

use Illuminate\Contracts\Http\Kernel;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Check If The Application Is Under Maintenance
|--------------------------------------------------------------------------
|
| If the application is in maintenance / demo mode via the "down" command
| we will load this file so that any pre-rendered content can be shown
| instead of starting the framework, which could cause an exception.
|
*/

if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader for
| this application. We just need to utilize it! We'll simply require it
| into the script here so we don't need to manually load our classes.
|
*/

require __DIR__.'/../vendor/autoload.php';

/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Once we have the application, we can handle the incoming request using
| the application's HTTP kernel. Then, we will send the response back
| to this client's browser, allowing them to enjoy our application.
|
*/

$app = require_once __DIR__.'/../bootstrap/app.php';

$kernel = $app->make(Kernel::class);

$response = $kernel->handle(
    $request = Request::capture()
)->send();

$kernel->terminate($request, $response);
</file>

<file path="public/js/alpine.min.js">
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /gh/alpinejs/alpine@2.8.2/dist/alpine.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Alpine=t()}(this,(function(){"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function n(n){for(var i=1;i<arguments.length;i++){var r=null!=arguments[i]?arguments[i]:{};i%2?t(Object(r),!0).forEach((function(t){e(n,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function i(e){return Array.from(new Set(e))}function r(){return navigator.userAgent.includes("Node.js")||navigator.userAgent.includes("jsdom")}function s(e,t){return e==t}function o(e,t){"template"!==e.tagName.toLowerCase()?console.warn(`Alpine: [${t}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${t}`):1!==e.content.childElementCount&&console.warn(`Alpine: <template> tag with [${t}] encountered with an unexpected number of root elements. Make sure <template> has a single root element. `)}function a(e){return e.toLowerCase().replace(/-(\w)/g,((e,t)=>t.toUpperCase()))}function l(e,t){if(!1===t(e))return;let n=e.firstElementChild;for(;n;)l(n,t),n=n.nextElementSibling}function c(e,t){var n;return function(){var i=this,r=arguments;clearTimeout(n),n=setTimeout((function(){n=null,e.apply(i,r)}),t)}}const u=(e,t,n)=>{if(console.warn(`Alpine Error: "${n}"\n\nExpression: "${t}"\nElement:`,e),!r())throw Object.assign(n,{el:e,expression:t}),n};function d(e,{el:t,expression:n}){try{const i=e();return i instanceof Promise?i.catch((e=>u(t,n,e))):i}catch(e){u(t,n,e)}}function f(e,t,n,i={}){return d((()=>"function"==typeof t?t.call(n):new Function(["$data",...Object.keys(i)],`var __alpine_result; with($data) { __alpine_result = ${t} }; return __alpine_result`)(n,...Object.values(i))),{el:e,expression:t})}const m=/^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\b/;function p(e){const t=y(e.name);return m.test(t)}function h(e,t,n){let i=Array.from(e.attributes).filter(p).map(v),r=i.filter((e=>"spread"===e.type))[0];if(r){let n=f(e,r.expression,t.$data);i=i.concat(Object.entries(n).map((([e,t])=>v({name:e,value:t}))))}return n?i.filter((e=>e.type===n)):function(e){let t=["bind","model","show","catch-all"];return e.sort(((e,n)=>{let i=-1===t.indexOf(e.type)?"catch-all":e.type,r=-1===t.indexOf(n.type)?"catch-all":n.type;return t.indexOf(i)-t.indexOf(r)}))}(i)}function v({name:e,value:t}){const n=y(e),i=n.match(m),r=n.match(/:([a-zA-Z0-9\-:]+)/),s=n.match(/\.[^.\]]+(?=[^\]]*$)/g)||[];return{type:i?i[1]:null,value:r?r[1]:null,modifiers:s.map((e=>e.replace(".",""))),expression:t}}function y(e){return e.startsWith("@")?e.replace("@","x-on:"):e.startsWith(":")?e.replace(":","x-bind:"):e}function b(e,t=Boolean){return e.split(" ").filter(t)}const g="in",x="out",_="cancelled";function w(e,t,n,i,r=!1){if(r)return t();if(e.__x_transition&&e.__x_transition.type===g)return;const s=h(e,i,"transition"),o=h(e,i,"show")[0];if(o&&o.modifiers.includes("transition")){let i=o.modifiers;if(i.includes("out")&&!i.includes("in"))return t();const r=i.includes("in")&&i.includes("out");i=r?i.filter(((e,t)=>t<i.indexOf("out"))):i,function(e,t,n,i){const r={duration:O(t,"duration",150),origin:O(t,"origin","center"),first:{opacity:0,scale:O(t,"scale",95)},second:{opacity:1,scale:100}};k(e,t,n,(()=>{}),i,r,g)}(e,i,t,n)}else s.some((e=>["enter","enter-start","enter-end"].includes(e.value)))?function(e,t,n,i,r){const s=b(A((n.find((e=>"enter"===e.value))||{expression:""}).expression,e,t)),o=b(A((n.find((e=>"enter-start"===e.value))||{expression:""}).expression,e,t)),a=b(A((n.find((e=>"enter-end"===e.value))||{expression:""}).expression,e,t));S(e,s,o,a,i,(()=>{}),g,r)}(e,i,s,t,n):t()}function E(e,t,n,i,r=!1){if(r)return t();if(e.__x_transition&&e.__x_transition.type===x)return;const s=h(e,i,"transition"),o=h(e,i,"show")[0];if(o&&o.modifiers.includes("transition")){let i=o.modifiers;if(i.includes("in")&&!i.includes("out"))return t();const r=i.includes("in")&&i.includes("out");i=r?i.filter(((e,t)=>t>i.indexOf("out"))):i,function(e,t,n,i,r){const s=n?O(t,"duration",150):O(t,"duration",150)/2,o={duration:s,origin:O(t,"origin","center"),first:{opacity:1,scale:100},second:{opacity:0,scale:O(t,"scale",95)}};k(e,t,(()=>{}),i,r,o,x)}(e,i,r,t,n)}else s.some((e=>["leave","leave-start","leave-end"].includes(e.value)))?function(e,t,n,i,r){const s=b(A((n.find((e=>"leave"===e.value))||{expression:""}).expression,e,t)),o=b(A((n.find((e=>"leave-start"===e.value))||{expression:""}).expression,e,t)),a=b(A((n.find((e=>"leave-end"===e.value))||{expression:""}).expression,e,t));S(e,s,o,a,(()=>{}),i,x,r)}(e,i,s,t,n):t()}function O(e,t,n){if(-1===e.indexOf(t))return n;const i=e[e.indexOf(t)+1];if(!i)return n;if("scale"===t&&!P(i))return n;if("duration"===t){let e=i.match(/([0-9]+)ms/);if(e)return e[1]}return"origin"===t&&["top","right","left","center","bottom"].includes(e[e.indexOf(t)+2])?[i,e[e.indexOf(t)+2]].join(" "):i}function k(e,t,n,i,r,s,o){e.__x_transition&&e.__x_transition.cancel&&e.__x_transition.cancel();const a=e.style.opacity,l=e.style.transform,c=e.style.transformOrigin,u=!t.includes("opacity")&&!t.includes("scale"),d=u||t.includes("opacity"),f=u||t.includes("scale"),m={start(){d&&(e.style.opacity=s.first.opacity),f&&(e.style.transform=`scale(${s.first.scale/100})`)},during(){f&&(e.style.transformOrigin=s.origin),e.style.transitionProperty=[d?"opacity":"",f?"transform":""].join(" ").trim(),e.style.transitionDuration=s.duration/1e3+"s",e.style.transitionTimingFunction="cubic-bezier(0.4, 0.0, 0.2, 1)"},show(){n()},end(){d&&(e.style.opacity=s.second.opacity),f&&(e.style.transform=`scale(${s.second.scale/100})`)},hide(){i()},cleanup(){d&&(e.style.opacity=a),f&&(e.style.transform=l),f&&(e.style.transformOrigin=c),e.style.transitionProperty=null,e.style.transitionDuration=null,e.style.transitionTimingFunction=null}};$(e,m,o,r)}const A=(e,t,n)=>"function"==typeof e?n.evaluateReturnExpression(t,e):e;function S(e,t,n,i,r,s,o,a){e.__x_transition&&e.__x_transition.cancel&&e.__x_transition.cancel();const l=e.__x_original_classes||[],c={start(){e.classList.add(...n)},during(){e.classList.add(...t)},show(){r()},end(){e.classList.remove(...n.filter((e=>!l.includes(e)))),e.classList.add(...i)},hide(){s()},cleanup(){e.classList.remove(...t.filter((e=>!l.includes(e)))),e.classList.remove(...i.filter((e=>!l.includes(e))))}};$(e,c,o,a)}function $(e,t,n,i){const r=C((()=>{t.hide(),e.isConnected&&t.cleanup(),delete e.__x_transition}));e.__x_transition={type:n,cancel:C((()=>{i(_),r()})),finish:r,nextFrame:null},t.start(),t.during(),e.__x_transition.nextFrame=requestAnimationFrame((()=>{let n=1e3*Number(getComputedStyle(e).transitionDuration.replace(/,.*/,"").replace("s",""));0===n&&(n=1e3*Number(getComputedStyle(e).animationDuration.replace("s",""))),t.show(),e.__x_transition.nextFrame=requestAnimationFrame((()=>{t.end(),setTimeout(e.__x_transition.finish,n)}))}))}function P(e){return!Array.isArray(e)&&!isNaN(e)}function C(e){let t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function j(e,t,i,r,s){o(t,"x-for");let a=D("function"==typeof i?e.evaluateReturnExpression(t,i):i),l=function(e,t,n,i){let r=h(t,e,"if")[0];if(r&&!e.evaluateReturnExpression(t,r.expression))return[];let s=e.evaluateReturnExpression(t,n.items,i);P(s)&&s>=0&&(s=Array.from(Array(s).keys(),(e=>e+1)));return s}(e,t,a,s),c=t;l.forEach(((i,o)=>{let u=function(e,t,i,r,s){let o=s?n({},s):{};o[e.item]=t,e.index&&(o[e.index]=i);e.collection&&(o[e.collection]=r);return o}(a,i,o,l,s()),d=function(e,t,n,i){let r=h(t,e,"bind").filter((e=>"key"===e.value))[0];return r?e.evaluateReturnExpression(t,r.expression,(()=>i)):n}(e,t,o,u),f=function(e,t){if(!e)return;if(void 0===e.__x_for_key)return;if(e.__x_for_key===t)return e;let n=e;for(;n;){if(n.__x_for_key===t)return n.parentElement.insertBefore(n,e);n=!(!n.nextElementSibling||void 0===n.nextElementSibling.__x_for_key)&&n.nextElementSibling}}(c.nextElementSibling,d);f?(delete f.__x_for_key,f.__x_for=u,e.updateElements(f,(()=>f.__x_for))):(f=function(e,t){let n=document.importNode(e.content,!0);return t.parentElement.insertBefore(n,t.nextElementSibling),t.nextElementSibling}(t,c),w(f,(()=>{}),(()=>{}),e,r),f.__x_for=u,e.initializeElements(f,(()=>f.__x_for))),c=f,c.__x_for_key=d})),function(e,t){var n=!(!e.nextElementSibling||void 0===e.nextElementSibling.__x_for_key)&&e.nextElementSibling;for(;n;){let e=n,i=n.nextElementSibling;E(n,(()=>{e.remove()}),(()=>{}),t),n=!(!i||void 0===i.__x_for_key)&&i}}(c,e)}function D(e){let t=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,n=String(e).match(/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/);if(!n)return;let i={};i.items=n[2].trim();let r=n[1].trim().replace(/^\(|\)$/g,""),s=r.match(t);return s?(i.item=r.replace(t,"").trim(),i.index=s[1].trim(),s[2]&&(i.collection=s[2].trim())):i.item=r,i}function T(e,t,n,r,o,l,c){var u=e.evaluateReturnExpression(t,r,o);if("value"===n){if(ge.ignoreFocusedForValueBinding&&document.activeElement.isSameNode(t))return;if(void 0===u&&String(r).match(/\./)&&(u=""),"radio"===t.type)void 0===t.attributes.value&&"bind"===l?t.value=u:"bind"!==l&&(t.checked=s(t.value,u));else if("checkbox"===t.type)"boolean"==typeof u||[null,void 0].includes(u)||"bind"!==l?"bind"!==l&&(Array.isArray(u)?t.checked=u.some((e=>s(e,t.value))):t.checked=!!u):t.value=String(u);else if("SELECT"===t.tagName)!function(e,t){const n=[].concat(t).map((e=>e+""));Array.from(e.options).forEach((e=>{e.selected=n.includes(e.value||e.text)}))}(t,u);else{if(t.value===u)return;t.value=u}}else if("class"===n)if(Array.isArray(u)){const e=t.__x_original_classes||[];t.setAttribute("class",i(e.concat(u)).join(" "))}else if("object"==typeof u){Object.keys(u).sort(((e,t)=>u[e]-u[t])).forEach((e=>{u[e]?b(e).forEach((e=>t.classList.add(e))):b(e).forEach((e=>t.classList.remove(e)))}))}else{const e=t.__x_original_classes||[],n=u?b(u):[];t.setAttribute("class",i(e.concat(n)).join(" "))}else n=c.includes("camel")?a(n):n,[null,void 0,!1].includes(u)?t.removeAttribute(n):!function(e){return["disabled","checked","required","readonly","hidden","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(e)}(n)?L(t,n,u):L(t,n,n)}function L(e,t,n){e.getAttribute(t)!=n&&e.setAttribute(t,n)}function N(e,t,n,i,r,s={}){const o={passive:i.includes("passive")};let l,u;if(i.includes("camel")&&(n=a(n)),i.includes("away")?(u=document,l=a=>{t.contains(a.target)||t.offsetWidth<1&&t.offsetHeight<1||(z(e,r,a,s),i.includes("once")&&document.removeEventListener(n,l,o))}):(u=i.includes("window")?window:i.includes("document")?document:t,l=a=>{if(u!==window&&u!==document||document.body.contains(t)){if(!(function(e){return["keydown","keyup"].includes(e)}(n)&&function(e,t){let n=t.filter((e=>!["window","document","prevent","stop"].includes(e)));if(n.includes("debounce")){let e=n.indexOf("debounce");n.splice(e,P((n[e+1]||"invalid-wait").split("ms")[0])?2:1)}if(0===n.length)return!1;if(1===n.length&&n[0]===R(e.key))return!1;const i=["ctrl","shift","alt","meta","cmd","super"].filter((e=>n.includes(e)));if(n=n.filter((e=>!i.includes(e))),i.length>0){if(i.filter((t=>("cmd"!==t&&"super"!==t||(t="meta"),e[`${t}Key`]))).length===i.length&&n[0]===R(e.key))return!1}return!0}(a,i)||(i.includes("prevent")&&a.preventDefault(),i.includes("stop")&&a.stopPropagation(),i.includes("self")&&a.target!==t))){z(e,r,a,s).then((e=>{!1===e?a.preventDefault():i.includes("once")&&u.removeEventListener(n,l,o)}))}}else u.removeEventListener(n,l,o)}),i.includes("debounce")){let e=i[i.indexOf("debounce")+1]||"invalid-wait",t=P(e.split("ms")[0])?Number(e.split("ms")[0]):250;l=c(l,t)}u.addEventListener(n,l,o)}function z(e,t,i,r){return e.evaluateCommandExpression(i.target,t,(()=>n(n({},r()),{},{$event:i})))}function R(e){switch(e){case"/":return"slash";case" ":case"Spacebar":return"space";default:return e&&e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}}function F(e,t,n){return"radio"===e.type&&(e.hasAttribute("name")||e.setAttribute("name",n)),(n,i)=>{if(n instanceof CustomEvent&&n.detail)return n.detail;if("checkbox"===e.type){if(Array.isArray(i)){const e=t.includes("number")?I(n.target.value):n.target.value;return n.target.checked?i.concat([e]):i.filter((t=>!s(t,e)))}return n.target.checked}if("select"===e.tagName.toLowerCase()&&e.multiple)return t.includes("number")?Array.from(n.target.selectedOptions).map((e=>I(e.value||e.text))):Array.from(n.target.selectedOptions).map((e=>e.value||e.text));{const e=n.target.value;return t.includes("number")?I(e):t.includes("trim")?e.trim():e}}}function I(e){const t=e?parseFloat(e):null;return P(t)?t:e}const{isArray:M}=Array,{getPrototypeOf:B,create:q,defineProperty:U,defineProperties:W,isExtensible:K,getOwnPropertyDescriptor:G,getOwnPropertyNames:H,getOwnPropertySymbols:V,preventExtensions:Z,hasOwnProperty:J}=Object,{push:Q,concat:X,map:Y}=Array.prototype;function ee(e){return void 0===e}function te(e){return"function"==typeof e}const ne=new WeakMap;function ie(e,t){ne.set(e,t)}const re=e=>ne.get(e)||e;function se(e,t){return e.valueIsObservable(t)?e.getProxy(t):t}function oe(e,t,n){X.call(H(n),V(n)).forEach((i=>{let r=G(n,i);r.configurable||(r=ve(e,r,se)),U(t,i,r)})),Z(t)}class ae{constructor(e,t){this.originalTarget=t,this.membrane=e}get(e,t){const{originalTarget:n,membrane:i}=this,r=n[t],{valueObserved:s}=i;return s(n,t),i.getProxy(r)}set(e,t,n){const{originalTarget:i,membrane:{valueMutated:r}}=this;return i[t]!==n?(i[t]=n,r(i,t)):"length"===t&&M(i)&&r(i,t),!0}deleteProperty(e,t){const{originalTarget:n,membrane:{valueMutated:i}}=this;return delete n[t],i(n,t),!0}apply(e,t,n){}construct(e,t,n){}has(e,t){const{originalTarget:n,membrane:{valueObserved:i}}=this;return i(n,t),t in n}ownKeys(e){const{originalTarget:t}=this;return X.call(H(t),V(t))}isExtensible(e){const t=K(e);if(!t)return t;const{originalTarget:n,membrane:i}=this,r=K(n);return r||oe(i,e,n),r}setPrototypeOf(e,t){}getPrototypeOf(e){const{originalTarget:t}=this;return B(t)}getOwnPropertyDescriptor(e,t){const{originalTarget:n,membrane:i}=this,{valueObserved:r}=this.membrane;r(n,t);let s=G(n,t);if(ee(s))return s;const o=G(e,t);return ee(o)?(s=ve(i,s,se),s.configurable||U(e,t,s),s):o}preventExtensions(e){const{originalTarget:t,membrane:n}=this;return oe(n,e,t),Z(t),!0}defineProperty(e,t,n){const{originalTarget:i,membrane:r}=this,{valueMutated:s}=r,{configurable:o}=n;if(J.call(n,"writable")&&!J.call(n,"value")){const e=G(i,t);n.value=e.value}return U(i,t,function(e){return J.call(e,"value")&&(e.value=re(e.value)),e}(n)),!1===o&&U(e,t,ve(r,n,se)),s(i,t),!0}}function le(e,t){return e.valueIsObservable(t)?e.getReadOnlyProxy(t):t}class ce{constructor(e,t){this.originalTarget=t,this.membrane=e}get(e,t){const{membrane:n,originalTarget:i}=this,r=i[t],{valueObserved:s}=n;return s(i,t),n.getReadOnlyProxy(r)}set(e,t,n){return!1}deleteProperty(e,t){return!1}apply(e,t,n){}construct(e,t,n){}has(e,t){const{originalTarget:n,membrane:{valueObserved:i}}=this;return i(n,t),t in n}ownKeys(e){const{originalTarget:t}=this;return X.call(H(t),V(t))}setPrototypeOf(e,t){}getOwnPropertyDescriptor(e,t){const{originalTarget:n,membrane:i}=this,{valueObserved:r}=i;r(n,t);let s=G(n,t);if(ee(s))return s;const o=G(e,t);return ee(o)?(s=ve(i,s,le),J.call(s,"set")&&(s.set=void 0),s.configurable||U(e,t,s),s):o}preventExtensions(e){return!1}defineProperty(e,t,n){return!1}}function ue(e){let t;return M(e)?t=[]:"object"==typeof e&&(t={}),t}const de=Object.prototype;function fe(e){if(null===e)return!1;if("object"!=typeof e)return!1;if(M(e))return!0;const t=B(e);return t===de||null===t||null===B(t)}const me=(e,t)=>{},pe=(e,t)=>{},he=e=>e;function ve(e,t,n){const{set:i,get:r}=t;return J.call(t,"value")?t.value=n(e,t.value):(ee(r)||(t.get=function(){return n(e,r.call(re(this)))}),ee(i)||(t.set=function(t){i.call(re(this),e.unwrapProxy(t))})),t}class ye{constructor(e){if(this.valueDistortion=he,this.valueMutated=pe,this.valueObserved=me,this.valueIsObservable=fe,this.objectGraph=new WeakMap,!ee(e)){const{valueDistortion:t,valueMutated:n,valueObserved:i,valueIsObservable:r}=e;this.valueDistortion=te(t)?t:he,this.valueMutated=te(n)?n:pe,this.valueObserved=te(i)?i:me,this.valueIsObservable=te(r)?r:fe}}getProxy(e){const t=re(e),n=this.valueDistortion(t);if(this.valueIsObservable(n)){const i=this.getReactiveState(t,n);return i.readOnly===e?e:i.reactive}return n}getReadOnlyProxy(e){e=re(e);const t=this.valueDistortion(e);return this.valueIsObservable(t)?this.getReactiveState(e,t).readOnly:t}unwrapProxy(e){return re(e)}getReactiveState(e,t){const{objectGraph:n}=this;let i=n.get(t);if(i)return i;const r=this;return i={get reactive(){const n=new ae(r,t),i=new Proxy(ue(t),n);return ie(i,e),U(this,"reactive",{value:i}),i},get readOnly(){const n=new ce(r,t),i=new Proxy(ue(t),n);return ie(i,e),U(this,"readOnly",{value:i}),i}},n.set(t,i),i}}class be{constructor(e,t=null){this.$el=e;const n=this.$el.getAttribute("x-data"),i=""===n?"{}":n,r=this.$el.getAttribute("x-init");let s={$el:this.$el},o=t?t.$el:this.$el;Object.entries(ge.magicProperties).forEach((([e,t])=>{Object.defineProperty(s,`$${e}`,{get:function(){return t(o)}})})),this.unobservedData=t?t.getUnobservedData():f(e,i,s);let{membrane:a,data:l}=this.wrapDataInObservable(this.unobservedData);var c;this.$data=l,this.membrane=a,this.unobservedData.$el=this.$el,this.unobservedData.$refs=this.getRefsProxy(),this.nextTickStack=[],this.unobservedData.$nextTick=e=>{this.nextTickStack.push(e)},this.watchers={},this.unobservedData.$watch=(e,t)=>{this.watchers[e]||(this.watchers[e]=[]),this.watchers[e].push(t)},Object.entries(ge.magicProperties).forEach((([e,t])=>{Object.defineProperty(this.unobservedData,`$${e}`,{get:function(){return t(o,this.$el)}})})),this.showDirectiveStack=[],this.showDirectiveLastElement,t||ge.onBeforeComponentInitializeds.forEach((e=>e(this))),r&&!t&&(this.pauseReactivity=!0,c=this.evaluateReturnExpression(this.$el,r),this.pauseReactivity=!1),this.initializeElements(this.$el,(()=>{}),t),this.listenForNewElementsToInitialize(),"function"==typeof c&&c.call(this.$data),t||setTimeout((()=>{ge.onComponentInitializeds.forEach((e=>e(this)))}),0)}getUnobservedData(){return function(e,t){let n=e.unwrapProxy(t),i={};return Object.keys(n).forEach((e=>{["$el","$refs","$nextTick","$watch"].includes(e)||(i[e]=n[e])})),i}(this.membrane,this.$data)}wrapDataInObservable(e){var t=this;let n=c((function(){t.updateElements(t.$el)}),0);return function(e,t){let n=new ye({valueMutated(e,n){t(e,n)}});return{data:n.getProxy(e),membrane:n}}(e,((e,i)=>{t.watchers[i]?t.watchers[i].forEach((t=>t(e[i]))):Array.isArray(e)?Object.keys(t.watchers).forEach((n=>{let r=n.split(".");"length"!==i&&r.reduce(((i,r)=>(Object.is(e,i[r])&&t.watchers[n].forEach((t=>t(e))),i[r])),t.unobservedData)})):Object.keys(t.watchers).filter((e=>e.includes("."))).forEach((n=>{let r=n.split(".");i===r[r.length-1]&&r.reduce(((r,s)=>(Object.is(e,r)&&t.watchers[n].forEach((t=>t(e[i]))),r[s])),t.unobservedData)})),t.pauseReactivity||n()}))}walkAndSkipNestedComponents(e,t,n=(()=>{})){l(e,(e=>e.hasAttribute("x-data")&&!e.isSameNode(this.$el)?(e.__x||n(e),!1):t(e)))}initializeElements(e,t=(()=>{}),n=!1){this.walkAndSkipNestedComponents(e,(e=>void 0===e.__x_for_key&&(void 0===e.__x_inserted_me&&void this.initializeElement(e,t,!n))),(e=>{n||(e.__x=new be(e))})),this.executeAndClearRemainingShowDirectiveStack(),this.executeAndClearNextTickStack(e)}initializeElement(e,t,n=!0){e.hasAttribute("class")&&h(e,this).length>0&&(e.__x_original_classes=b(e.getAttribute("class"))),n&&this.registerListeners(e,t),this.resolveBoundAttributes(e,!0,t)}updateElements(e,t=(()=>{})){this.walkAndSkipNestedComponents(e,(e=>{if(void 0!==e.__x_for_key&&!e.isSameNode(this.$el))return!1;this.updateElement(e,t)}),(e=>{e.__x=new be(e)})),this.executeAndClearRemainingShowDirectiveStack(),this.executeAndClearNextTickStack(e)}executeAndClearNextTickStack(e){e===this.$el&&this.nextTickStack.length>0&&requestAnimationFrame((()=>{for(;this.nextTickStack.length>0;)this.nextTickStack.shift()()}))}executeAndClearRemainingShowDirectiveStack(){this.showDirectiveStack.reverse().map((e=>new Promise(((t,n)=>{e(t,n)})))).reduce(((e,t)=>e.then((()=>t.then((e=>{e()}))))),Promise.resolve((()=>{}))).catch((e=>{if(e!==_)throw e})),this.showDirectiveStack=[],this.showDirectiveLastElement=void 0}updateElement(e,t){this.resolveBoundAttributes(e,!1,t)}registerListeners(e,t){h(e,this).forEach((({type:i,value:r,modifiers:s,expression:o})=>{switch(i){case"on":N(this,e,r,s,o,t);break;case"model":!function(e,t,i,r,s){var o="select"===t.tagName.toLowerCase()||["checkbox","radio"].includes(t.type)||i.includes("lazy")?"change":"input";N(e,t,o,i,`${r} = rightSideOfExpression($event, ${r})`,(()=>n(n({},s()),{},{rightSideOfExpression:F(t,i,r)})))}(this,e,s,o,t)}}))}resolveBoundAttributes(e,t=!1,n){let i=h(e,this);i.forEach((({type:r,value:s,modifiers:a,expression:l})=>{switch(r){case"model":T(this,e,"value",l,n,r,a);break;case"bind":if("template"===e.tagName.toLowerCase()&&"key"===s)return;T(this,e,s,l,n,r,a);break;case"text":var c=this.evaluateReturnExpression(e,l,n);!function(e,t,n){void 0===t&&String(n).match(/\./)&&(t=""),e.textContent=t}(e,c,l);break;case"html":!function(e,t,n,i){t.innerHTML=e.evaluateReturnExpression(t,n,i)}(this,e,l,n);break;case"show":c=this.evaluateReturnExpression(e,l,n);!function(e,t,n,i,r=!1){const s=()=>{t.style.display="none",t.__x_is_shown=!1},o=()=>{1===t.style.length&&"none"===t.style.display?t.removeAttribute("style"):t.style.removeProperty("display"),t.__x_is_shown=!0};if(!0===r)return void(n?o():s());const a=(i,r)=>{n?(("none"===t.style.display||t.__x_transition)&&w(t,(()=>{o()}),r,e),i((()=>{}))):"none"!==t.style.display?E(t,(()=>{i((()=>{s()}))}),r,e):i((()=>{}))};i.includes("immediate")?a((e=>e()),(()=>{})):(e.showDirectiveLastElement&&!e.showDirectiveLastElement.contains(t)&&e.executeAndClearRemainingShowDirectiveStack(),e.showDirectiveStack.push(a),e.showDirectiveLastElement=t)}(this,e,c,a,t);break;case"if":if(i.some((e=>"for"===e.type)))return;c=this.evaluateReturnExpression(e,l,n);!function(e,t,n,i,r){o(t,"x-if");const s=t.nextElementSibling&&!0===t.nextElementSibling.__x_inserted_me;if(!n||s&&!t.__x_transition)!n&&s&&E(t.nextElementSibling,(()=>{t.nextElementSibling.remove()}),(()=>{}),e,i);else{const n=document.importNode(t.content,!0);t.parentElement.insertBefore(n,t.nextElementSibling),w(t.nextElementSibling,(()=>{}),(()=>{}),e,i),e.initializeElements(t.nextElementSibling,r),t.nextElementSibling.__x_inserted_me=!0}}(this,e,c,t,n);break;case"for":j(this,e,l,t,n);break;case"cloak":e.removeAttribute("x-cloak")}}))}evaluateReturnExpression(e,t,i=(()=>{})){return f(e,t,this.$data,n(n({},i()),{},{$dispatch:this.getDispatchFunction(e)}))}evaluateCommandExpression(e,t,i=(()=>{})){return function(e,t,n,i={}){return d((()=>{if("function"==typeof t)return Promise.resolve(t.call(n,i.$event));let e=Function;if(e=Object.getPrototypeOf((async function(){})).constructor,Object.keys(n).includes(t)){let e=new Function(["dataContext",...Object.keys(i)],`with(dataContext) { return ${t} }`)(n,...Object.values(i));return"function"==typeof e?Promise.resolve(e.call(n,i.$event)):Promise.resolve()}return Promise.resolve(new e(["dataContext",...Object.keys(i)],`with(dataContext) { ${t} }`)(n,...Object.values(i)))}),{el:e,expression:t})}(e,t,this.$data,n(n({},i()),{},{$dispatch:this.getDispatchFunction(e)}))}getDispatchFunction(e){return(t,n={})=>{e.dispatchEvent(new CustomEvent(t,{detail:n,bubbles:!0}))}}listenForNewElementsToInitialize(){const e=this.$el;new MutationObserver((e=>{for(let t=0;t<e.length;t++){const n=e[t].target.closest("[x-data]");if(n&&n.isSameNode(this.$el)){if("attributes"===e[t].type&&"x-data"===e[t].attributeName){const n=e[t].target.getAttribute("x-data")||"{}",i=f(this.$el,n,{$el:this.$el});Object.keys(i).forEach((e=>{this.$data[e]!==i[e]&&(this.$data[e]=i[e])}))}e[t].addedNodes.length>0&&e[t].addedNodes.forEach((e=>{1!==e.nodeType||e.__x_inserted_me||(!e.matches("[x-data]")||e.__x?this.initializeElements(e):e.__x=new be(e))}))}}})).observe(e,{childList:!0,attributes:!0,subtree:!0})}getRefsProxy(){var e=this;return new Proxy({},{get(t,n){return"$isAlpineProxy"===n||(e.walkAndSkipNestedComponents(e.$el,(e=>{e.hasAttribute("x-ref")&&e.getAttribute("x-ref")===n&&(i=e)})),i);var i}})}}const ge={version:"2.8.2",pauseMutationObserver:!1,magicProperties:{},onComponentInitializeds:[],onBeforeComponentInitializeds:[],ignoreFocusedForValueBinding:!1,start:async function(){r()||await new Promise((e=>{"loading"==document.readyState?document.addEventListener("DOMContentLoaded",e):e()})),this.discoverComponents((e=>{this.initializeComponent(e)})),document.addEventListener("turbolinks:load",(()=>{this.discoverUninitializedComponents((e=>{this.initializeComponent(e)}))})),this.listenForNewUninitializedComponentsAtRunTime()},discoverComponents:function(e){document.querySelectorAll("[x-data]").forEach((t=>{e(t)}))},discoverUninitializedComponents:function(e,t=null){const n=(t||document).querySelectorAll("[x-data]");Array.from(n).filter((e=>void 0===e.__x)).forEach((t=>{e(t)}))},listenForNewUninitializedComponentsAtRunTime:function(){const e=document.querySelector("body");new MutationObserver((e=>{if(!this.pauseMutationObserver)for(let t=0;t<e.length;t++)e[t].addedNodes.length>0&&e[t].addedNodes.forEach((e=>{1===e.nodeType&&(e.parentElement&&e.parentElement.closest("[x-data]")||this.discoverUninitializedComponents((e=>{this.initializeComponent(e)}),e.parentElement))}))})).observe(e,{childList:!0,attributes:!0,subtree:!0})},initializeComponent:function(e){if(!e.__x)try{e.__x=new be(e)}catch(e){setTimeout((()=>{throw e}),0)}},clone:function(e,t){t.__x||(t.__x=new be(t,e))},addMagicProperty:function(e,t){this.magicProperties[e]=t},onComponentInitialized:function(e){this.onComponentInitializeds.push(e)},onBeforeComponentInitialized:function(e){this.onBeforeComponentInitializeds.push(e)}};return r()||(window.Alpine=ge,window.deferLoadingAlpine?window.deferLoadingAlpine((function(){window.Alpine.start()})):window.Alpine.start()),ge}));
//# sourceMappingURL=/sm/f14685ec89fb3572e3f00624425a45d857caae8b82bfcf9039bd3d781c53a477.map
</file>

<file path="public/js/assetValueDistributionChart.js">
document.addEventListener("DOMContentLoaded", function () {
    const assetValueDistributionChart = document
        .getElementById("assetValueDistributionChart")
        .getContext("2d");
    const assetValueDistributionData = JSON.parse(
        document.getElementById("assetValueDistributionData").textContent
    );

    function processAssetData(data, thresholdPercentage = 3) {
        if (!data || data.length === 0) {
            console.error("No asset data available");
            return [];
        }

        const sortedData = data.sort((a, b) => b.total_value - a.total_value);

        const majorCategories = sortedData.filter(
            (item) => item.percentage >= thresholdPercentage
        );
        const minorCategories = sortedData.filter(
            (item) => item.percentage < thresholdPercentage
        );

        const combinedMinorCategories = {
            category: "Other Categories",
            total_value: minorCategories.reduce(
                (sum, item) => sum + item.total_value,
                0
            ),
            asset_count: minorCategories.reduce(
                (sum, item) => sum + item.asset_count,
                0
            ),
            percentage: minorCategories
                .reduce((sum, item) => sum + item.percentage, 0)
                .toFixed(2),
        };

        return [...majorCategories, combinedMinorCategories];
    }

    function generateUniqueColors(count) {
        return Array.from({ length: count }, (_, i) => {
            const hue = ((i * 360) / count) % 360;
            return `hsla(${hue}, 70%, 50%, 0.8)`;
        });
    }

    const processedAssetData = processAssetData(assetValueDistributionData);

    if (processedAssetData.length === 0) {
        document.getElementById("assetValueDistributionChart").innerHTML =
            "No Asset Data Available";
        return;
    }

    const backgroundColors = generateUniqueColors(processedAssetData.length);
    const categories = processedAssetData.map((item) => item.category);
    const totalValues = processedAssetData.map((item) => item.total_value);

    const chart = new Chart(assetValueDistributionChart, {
        type: "doughnut",
        data: {
            labels: categories,
            datasets: [
                {
                    data: totalValues,
                    backgroundColor: backgroundColors,
                    borderColor: backgroundColors.map((color) =>
                        color.replace("0.8)", "1)")
                    ),
                    borderWidth: 1,
                },
            ],
        },
        options: {
            responsive: true,
            aspectRatio: 2.5,
            title: {
                display: true,
                text: "Asset Value Distribution by Category",
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        const dataset = data.datasets[tooltipItem.datasetIndex];
                        const total = dataset.data.reduce((a, b) => a + b, 0);
                        const currentValue = dataset.data[tooltipItem.index];
                        const percentage = (
                            (currentValue / total) *
                            100
                        ).toFixed(2);
                        return `₱${currentValue.toLocaleString()} (${percentage}%)`;
                    },
                },
            },
        },
    });

    function createAssetExpandableLegend() {
        const container = document.getElementById("assetValueLegend");
        container.innerHTML = "";

        processedAssetData.forEach((item, index) => {
            const legendItem = document.createElement("div");
            legendItem.className = "flex items-center mb-2";
            legendItem.innerHTML = `
                <span class="inline-block w-4 h-4 mr-2" style="background-color: ${
                    backgroundColors[index]
                }"></span>
                <span class="mr-2">${item.category}:</span>
                <span class="font-bold">₱${item.total_value.toLocaleString()} (${
                item.percentage
            }%)</span>
                <span class="ml-2 text-gray-500">(${
                    item.asset_count
                } assets)</span>
            `;
            container.appendChild(legendItem);
        });
    }

    createAssetExpandableLegend();
});
</file>

<file path="public/js/chart.js">
/**
 * Skipped minification because the original files appears to be already minified.
 * Original file: /npm/chart.js@4.4.3/dist/chart.umd.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/*!
 * Chart.js v4.4.3
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Chart=e()}(this,(function(){"use strict";var t=Object.freeze({__proto__:null,get Colors(){return Go},get Decimation(){return Qo},get Filler(){return ma},get Legend(){return ya},get SubTitle(){return ka},get Title(){return Ma},get Tooltip(){return Ba}});function e(){}const i=(()=>{let t=0;return()=>t++})();function s(t){return null==t}function n(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function o(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function a(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function r(t,e){return a(t)?t:e}function l(t,e){return void 0===t?e:t}const h=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:+t/e,c=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function d(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function u(t,e,i,s){let a,r,l;if(n(t))if(r=t.length,s)for(a=r-1;a>=0;a--)e.call(i,t[a],a);else for(a=0;a<r;a++)e.call(i,t[a],a);else if(o(t))for(l=Object.keys(t),r=l.length,a=0;a<r;a++)e.call(i,t[l[a]],l[a])}function f(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function g(t){if(n(t))return t.map(g);if(o(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=g(t[i[n]]);return e}return t}function p(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function m(t,e,i,s){if(!p(t))return;const n=e[t],a=i[t];o(n)&&o(a)?x(n,a,s):e[t]=g(a)}function x(t,e,i){const s=n(e)?e:[e],a=s.length;if(!o(t))return t;const r=(i=i||{}).merger||m;let l;for(let e=0;e<a;++e){if(l=s[e],!o(l))continue;const n=Object.keys(l);for(let e=0,s=n.length;e<s;++e)r(n[e],t,l,i)}return t}function b(t,e){return x(t,e,{merger:_})}function _(t,e,i){if(!p(t))return;const s=e[t],n=i[t];o(s)&&o(n)?b(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=g(n))}const y={"":t=>t,x:t=>t.x,y:t=>t.y};function v(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}function M(t,e){const i=y[e]||(y[e]=function(t){const e=v(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function w(t){return t.charAt(0).toUpperCase()+t.slice(1)}const k=t=>void 0!==t,S=t=>"function"==typeof t,P=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};function D(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}const C=Math.PI,O=2*C,A=O+C,T=Number.POSITIVE_INFINITY,L=C/180,E=C/2,R=C/4,I=2*C/3,z=Math.log10,F=Math.sign;function V(t,e,i){return Math.abs(t-e)<i}function B(t){const e=Math.round(t);t=V(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(z(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function W(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}function N(t){return!isNaN(parseFloat(t))&&isFinite(t)}function H(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}function j(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function $(t){return t*(C/180)}function Y(t){return t*(180/C)}function U(t){if(!a(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function X(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*C&&(o+=O),{angle:o,distance:n}}function q(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function K(t,e){return(t-e+A)%O-C}function G(t){return(t%O+O)%O}function Z(t,e,i,s){const n=G(t),o=G(e),a=G(i),r=G(o-n),l=G(a-n),h=G(n-o),c=G(n-a);return n===o||n===a||s&&o===a||r>l&&h<c}function J(t,e,i){return Math.max(e,Math.min(i,t))}function Q(t){return J(t,-32768,32767)}function tt(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function et(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const it=(t,e,i,s)=>et(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),st=(t,e,i)=>et(t,i,(s=>t[s][e]>=i));function nt(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}const ot=["push","pop","shift","splice","unshift"];function at(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),ot.forEach((e=>{const i="_onData"+w(e),s=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const n=s.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[i]&&t[i](...e)})),n}})})))}function rt(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(ot.forEach((e=>{delete t[e]})),delete t._chartjs)}function lt(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const ht="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function ct(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,ht.call(window,(()=>{s=!1,t.apply(e,i)})))}}function dt(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}const ut=t=>"start"===t?"left":"end"===t?"right":"center",ft=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,gt=(t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e;function pt(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:h,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=J(Math.min(it(r,l,h).lo,i?s:it(e,l,a.getPixelForValue(h)).lo),0,s-1)),o=u?J(Math.max(it(r,a.axis,c,!0).hi+1,i?0:it(e,l,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function mt(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}class xt{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=ht.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var bt=new xt;
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */function _t(t){return t+.5|0}const yt=(t,e,i)=>Math.max(Math.min(t,i),e);function vt(t){return yt(_t(2.55*t),0,255)}function Mt(t){return yt(_t(255*t),0,255)}function wt(t){return yt(_t(t/2.55)/100,0,1)}function kt(t){return yt(_t(100*t),0,100)}const St={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Pt=[..."0123456789ABCDEF"],Dt=t=>Pt[15&t],Ct=t=>Pt[(240&t)>>4]+Pt[15&t],Ot=t=>(240&t)>>4==(15&t);function At(t){var e=(t=>Ot(t.r)&&Ot(t.g)&&Ot(t.b)&&Ot(t.a))(t)?Dt:Ct;return t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0}const Tt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Lt(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function Et(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function Rt(t,e,i){const s=Lt(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function It(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,h;return n!==o&&(h=n-o,l=a>.5?h/(2-n-o):h/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,h,n),r=60*r+.5),[0|r,l||0,a]}function zt(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(Mt)}function Ft(t,e,i){return zt(Lt,t,e,i)}function Vt(t){return(t%360+360)%360}function Bt(t){const e=Tt.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?vt(+e[5]):Mt(+e[5]));const n=Vt(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return zt(Rt,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return zt(Et,t,e,i)}(n,o,a):Ft(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}const Wt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Nt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ht;function jt(t){Ht||(Ht=function(){const t={},e=Object.keys(Nt),i=Object.keys(Wt);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,Wt[o]);o=parseInt(Nt[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),Ht.transparent=[0,0,0,0]);const e=Ht[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const $t=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;const Yt=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Ut=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Xt(t,e,i){if(t){let s=It(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=Ft(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function qt(t,e){return t?Object.assign(e||{},t):t}function Kt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Mt(t[3]))):(e=qt(t,{r:0,g:0,b:0,a:1})).a=Mt(e.a),e}function Gt(t){return"r"===t.charAt(0)?function(t){const e=$t.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=e[8]?vt(t):yt(255*t,0,255)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?vt(i):yt(i,0,255)),s=255&(e[4]?vt(s):yt(s,0,255)),n=255&(e[6]?vt(n):yt(n,0,255)),{r:i,g:s,b:n,a:o}}}(t):Bt(t)}class Zt{constructor(t){if(t instanceof Zt)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=Kt(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*St[s[1]],g:255&17*St[s[2]],b:255&17*St[s[3]],a:5===o?17*St[s[4]]:255}:7!==o&&9!==o||(n={r:St[s[1]]<<4|St[s[2]],g:St[s[3]]<<4|St[s[4]],b:St[s[5]]<<4|St[s[6]],a:9===o?St[s[7]]<<4|St[s[8]]:255})),i=n||jt(t)||Gt(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=qt(this._rgb);return t&&(t.a=wt(t.a)),t}set rgb(t){this._rgb=Kt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${wt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?At(this._rgb):void 0}hslString(){return this._valid?function(t){if(!t)return;const e=It(t),i=e[0],s=kt(e[1]),n=kt(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${wt(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=Ut(wt(t.r)),n=Ut(wt(t.g)),o=Ut(wt(t.b));return{r:Mt(Yt(s+i*(Ut(wt(e.r))-s))),g:Mt(Yt(n+i*(Ut(wt(e.g))-n))),b:Mt(Yt(o+i*(Ut(wt(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Zt(this.rgb)}alpha(t){return this._rgb.a=Mt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=_t(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Xt(this._rgb,2,t),this}darken(t){return Xt(this._rgb,2,-t),this}saturate(t){return Xt(this._rgb,1,t),this}desaturate(t){return Xt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=It(t);i[0]=Vt(i[0]+e),i=Ft(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function Jt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Qt(t){return Jt(t)?t:new Zt(t)}function te(t){return Jt(t)?t:new Zt(t).saturate(.5).darken(.1).hexString()}const ee=["x","y","borderWidth","radius","tension"],ie=["color","borderColor","backgroundColor"];const se=new Map;function ne(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=se.get(i);return s||(s=new Intl.NumberFormat(t,e),se.set(i,s)),s}(e,i).format(t)}const oe={values:t=>n(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t));return i}(t,i)}const a=z(Math.abs(o)),r=isNaN(a)?1:Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),ne(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(z(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?oe.numeric.call(this,t,e,i):""}};var ae={formatters:oe};const re=Object.create(null),le=Object.create(null);function he(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function ce(t,e,i){return"string"==typeof e?x(he(t,e),i):x(he(t,""),e)}class de{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>te(e.backgroundColor),this.hoverBorderColor=(t,e)=>te(e.borderColor),this.hoverColor=(t,e)=>te(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return ce(this,t,e)}get(t){return he(this,t)}describe(t,e){return ce(le,t,e)}override(t,e){return ce(re,t,e)}route(t,e,i,s){const n=he(this,t),a=he(this,i),r="_"+e;Object.defineProperties(n,{[r]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=a[s];return o(t)?Object.assign({},e,t):l(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var ue=new de({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:ie},numbers:{type:"number",properties:ee}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:ae.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function fe(){return"undefined"!=typeof window&&"undefined"!=typeof document}function ge(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function pe(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const me=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);function xe(t,e){return me(t).getPropertyValue(e)}const be=["top","right","bottom","left"];function _e(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=be[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}const ye=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function ve(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=me(i),o="border-box"===n.boxSizing,a=_e(n,"padding"),r=_e(n,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(ye(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/s),y:Math.round((h-u)/g*i.height/s)}}const Me=t=>Math.round(10*t)/10;function we(t,e,i,s){const n=me(t),o=_e(n,"margin"),a=pe(n.maxWidth,t,"clientWidth")||T,r=pe(n.maxHeight,t,"clientHeight")||T,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=t&&ge(t);if(o){const t=o.getBoundingClientRect(),a=me(o),r=_e(a,"border","width"),l=_e(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=pe(a.maxWidth,o,"clientWidth"),n=pe(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||T,maxHeight:n||T}}(t,e,i);let{width:h,height:c}=l;if("content-box"===n.boxSizing){const t=_e(n,"border","width"),e=_e(n,"padding");h-=e.width+t.width,c-=e.height+t.height}h=Math.max(0,h-o.width),c=Math.max(0,s?h/s:c-o.height),h=Me(Math.min(h,a,l.maxWidth)),c=Me(Math.min(c,r,l.maxHeight)),h&&!c&&(c=Me(h/2));return(void 0!==e||void 0!==i)&&s&&l.height&&c>l.height&&(c=l.height,h=Me(Math.floor(c*s))),{width:h,height:c}}function ke(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const Se=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};fe()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function Pe(t,e){const i=xe(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function De(t){return!t||s(t.size)||s(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function Ce(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function Oe(t,e,i,s){let o=(s=s||{}).data=s.data||{},a=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(o=s.data={},a=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let r=0;const l=i.length;let h,c,d,u,f;for(h=0;h<l;h++)if(u=i[h],null==u||n(u)){if(n(u))for(c=0,d=u.length;c<d;c++)f=u[c],null==f||n(f)||(r=Ce(t,o,a,r,f))}else r=Ce(t,o,a,r,u);t.restore();const g=a.length/2;if(g>i.length){for(h=0;h<g;h++)delete o[a[h]];a.splice(0,g)}return r}function Ae(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function Te(t,e){(e||t)&&((e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore())}function Le(t,e,i,s){Ee(t,e,i,s,null)}function Ee(t,e,i,s,n){let o,a,r,l,h,c,d,u;const f=e.pointStyle,g=e.rotation,p=e.radius;let m=(g||0)*L;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),f){default:n?t.ellipse(i,s,n/2,p,0,0,O):t.arc(i,s,p,0,O),t.closePath();break;case"triangle":c=n?n/2:p,t.moveTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=I,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=I,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),t.closePath();break;case"rectRounded":h=.516*p,l=p-h,a=Math.cos(m+R)*l,d=Math.cos(m+R)*(n?n/2-h:l),r=Math.sin(m+R)*l,u=Math.sin(m+R)*(n?n/2-h:l),t.arc(i-d,s-r,h,m-C,m-E),t.arc(i+u,s-a,h,m-E,m),t.arc(i+d,s+r,h,m,m+E),t.arc(i-u,s+a,h,m+E,m+C),t.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*p,c=n?n/2:l,t.rect(i-c,s-l,2*c,2*l);break}m+=R;case"rectRot":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=R;case"cross":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=R,d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Re(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Ie(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ze(t){t.restore()}function Fe(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Ve(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function Be(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function We(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function Ne(t,e,i,o,a,r={}){const l=n(e)?e:[e],h=r.strokeWidth>0&&""!==r.strokeColor;let c,d;for(t.save(),t.font=a.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),s(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,r),c=0;c<l.length;++c)d=l[c],r.backdrop&&We(t,r.backdrop),h&&(r.strokeColor&&(t.strokeStyle=r.strokeColor),s(r.strokeWidth)||(t.lineWidth=r.strokeWidth),t.strokeText(d,i,o,r.maxWidth)),t.fillText(d,i,o,r.maxWidth),Be(t,i,o,d,r),o+=Number(a.lineHeight);t.restore()}function He(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,1.5*C,C,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,C,E,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,E,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-E,!0),t.lineTo(i+a.topLeft,s)}function je(t,e=[""],i,s,n=(()=>t[0])){const o=i||t;void 0===s&&(s=ti("_fallback",t));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:s,_getTarget:n,override:i=>je([i,...t],e,o,s)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>qe(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=ti(Ue(o,t),i),void 0!==n)return Xe(t,n)?Je(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>ei(t).includes(e),ownKeys:t=>ei(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function $e(t,e,i,s){const a={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Ye(t,s),setContext:e=>$e(t,e,i,s),override:n=>$e(t.override(n),e,i,s)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>qe(t,e,(()=>function(t,e,i){const{_proxy:s,_context:a,_subProxy:r,_descriptors:l}=t;let h=s[e];S(h)&&l.isScriptable(e)&&(h=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t);let l=e(o,a||s);r.delete(t),Xe(t,l)&&(l=Je(n._scopes,n,t,l));return l}(e,h,t,i));n(h)&&h.length&&(h=function(t,e,i,s){const{_proxy:n,_context:a,_subProxy:r,_descriptors:l}=i;if(void 0!==a.index&&s(t))return e[a.index%e.length];if(o(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const o of i){const i=Je(s,n,t,o);e.push($e(i,a,r&&r[t],l))}}return e}(e,h,t,l.isIndexable));Xe(e,h)&&(h=$e(h,a,r&&r[e],l));return h}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function Ye(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:S(i)?i:()=>i,isIndexable:S(s)?s:()=>s}}const Ue=(t,e)=>t?t+w(e):e,Xe=(t,e)=>o(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function qe(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e)||"constructor"===e)return t[e];const s=i();return t[e]=s,s}function Ke(t,e,i){return S(t)?t(e,i):t}const Ge=(t,e)=>!0===t?e:"string"==typeof t?M(e,t):void 0;function Ze(t,e,i,s,n){for(const o of e){const e=Ge(i,o);if(e){t.add(e);const o=Ke(e._fallback,i,n);if(void 0!==o&&o!==i&&o!==s)return o}else if(!1===e&&void 0!==s&&i!==s)return null}return!1}function Je(t,e,i,s){const a=e._rootScopes,r=Ke(e._fallback,i,s),l=[...t,...a],h=new Set;h.add(s);let c=Qe(h,l,i,r||i,s);return null!==c&&((void 0===r||r===i||(c=Qe(h,l,r,c,s),null!==c))&&je(Array.from(h),[""],a,r,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const a=s[e];if(n(a)&&o(i))return i;return a||{}}(e,i,s))))}function Qe(t,e,i,s,n){for(;i;)i=Ze(t,e,i,s,n);return i}function ti(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function ei(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function ii(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={r:n.parse(M(c,o),h)};return a}const si=Number.EPSILON||1e-14,ni=(t,e)=>e<t.length&&!t[e].skip&&t[e],oi=t=>"x"===t?"y":"x";function ai(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=q(o,n),l=q(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=s*h,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function ri(t,e="x"){const i=oi(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,h=ni(t,0);for(a=0;a<s;++a)if(r=l,l=h,h=ni(t,a+1),l){if(h){const t=h[e]-l[e];n[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?F(n[a-1])!==F(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,h=ni(t,0);for(let c=0;c<s-1;++c)l=h,h=ni(t,c+1),l&&h&&(V(e[c],0,si)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=oi(i),n=t.length;let o,a,r,l=ni(t,0);for(let h=0;h<n;++h){if(a=r,r=l,l=ni(t,h+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[h]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[h])}}(t,o,e)}function li(t,e,i){return Math.max(Math.min(t,i),e)}function hi(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)ri(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=ai(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=Re(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&Re(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=li(n.cp1x,e.left,e.right),n.cp1y=li(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=li(n.cp2x,e.left,e.right),n.cp2y=li(n.cp2y,e.top,e.bottom)))}(t,i)}const ci=t=>0===t||1===t,di=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*O/i),ui=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*O/i)+1,fi={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*E),easeOutSine:t=>Math.sin(t*E),easeInOutSine:t=>-.5*(Math.cos(C*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ci(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ci(t)?t:di(t,.075,.3),easeOutElastic:t=>ci(t)?t:ui(t,.075,.3),easeInOutElastic(t){const e=.1125;return ci(t)?t:t<.5?.5*di(2*t,e,.45):.5+.5*ui(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-fi.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*fi.easeInBounce(2*t):.5*fi.easeOutBounce(2*t-1)+.5};function gi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function pi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function mi(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=gi(t,n,i),r=gi(n,o,i),l=gi(o,e,i),h=gi(a,r,i),c=gi(r,l,i);return gi(h,c,i)}const xi=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,bi=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function _i(t,e){const i=(""+t).match(xi);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const yi=t=>+t||0;function vi(t,e){const i={},s=o(e),n=s?Object.keys(e):e,a=o(t)?s?i=>l(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=yi(a(t));return i}function Mi(t){return vi(t,{top:"y",right:"x",bottom:"y",left:"x"})}function wi(t){return vi(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ki(t){const e=Mi(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Si(t,e){t=t||{},e=e||ue.font;let i=l(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=l(t.style,e.style);s&&!(""+s).match(bi)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:l(t.family,e.family),lineHeight:_i(l(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:l(t.weight,e.weight),string:""};return n.string=De(n),n}function Pi(t,e,i,s){let o,a,r,l=!0;for(o=0,a=t.length;o<a;++o)if(r=t[o],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),l=!1),void 0!==i&&n(r)&&(r=r[i%r.length],l=!1),void 0!==r))return s&&!l&&(s.cacheable=!1),r}function Di(t,e,i){const{min:s,max:n}=t,o=c(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}function Ci(t,e){return Object.assign(Object.create(t),e)}function Oi(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ai(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function Ti(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Li(t){return"angle"===t?{between:Z,compare:K,normalize:G}:{between:tt,compare:(t,e)=>t-e,normalize:t=>t}}function Ei({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function Ri(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=Li(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=Li(s),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][s]),n,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,x,b=!1,_=null;const y=()=>b||l(n,x,p)&&0!==r(n,x),v=()=>!b||0===r(o,p)||l(o,x,p);for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[s]),p!==x&&(b=l(p,n,o),null===_&&y()&&(_=0===r(p,n)?t:i),null!==_&&v()&&(g.push(Ei({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,x=p));return null!==_&&g.push(Ei({start:_,end:d,loop:u,count:a,style:f})),g}function Ii(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=Ri(s[n],t.points,e);o.length&&i.push(...o)}return i}function zi(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);if(!0===s)return Fi(t,[{start:a,end:r,loop:o}],i,e);return Fi(t,function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}function Fi(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=Vi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:s,style:n}),c=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=Vi(s.setContext(Ci(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),Bi(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,s):e}function Vi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function Bi(t,e){if(!e)return!1;const i=[],s=function(t,e){return Jt(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,s)!==JSON.stringify(e,s)}var Wi=Object.freeze({__proto__:null,HALF_PI:E,INFINITY:T,PI:C,PITAU:A,QUARTER_PI:R,RAD_PER_DEG:L,TAU:O,TWO_THIRDS_PI:I,_addGrace:Di,_alignPixel:Ae,_alignStartEnd:ft,_angleBetween:Z,_angleDiff:K,_arrayUnique:lt,_attachContext:$e,_bezierCurveTo:Ve,_bezierInterpolation:mi,_boundSegment:Ri,_boundSegments:Ii,_capitalize:w,_computeSegments:zi,_createResolver:je,_decimalPlaces:U,_deprecated:function(t,e,i,s){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+s+'" instead')},_descriptors:Ye,_elementsEqual:f,_factorize:W,_filterBetween:nt,_getParentNode:ge,_getStartAndCountOfVisiblePoints:pt,_int16Range:Q,_isBetween:tt,_isClickEvent:D,_isDomSupported:fe,_isPointInArea:Re,_limitValue:J,_longestText:Oe,_lookup:et,_lookupByKey:it,_measureText:Ce,_merger:m,_mergerIf:_,_normalizeAngle:G,_parseObjectDataRadialScale:ii,_pointInLine:gi,_readValueToProps:vi,_rlookupByKey:st,_scaleRangesChanged:mt,_setMinAndMaxByKey:j,_splitKey:v,_steppedInterpolation:pi,_steppedLineTo:Fe,_textX:gt,_toLeftRightCenter:ut,_updateBezierControlPoints:hi,addRoundedRectPath:He,almostEquals:V,almostWhole:H,callback:d,clearCanvas:Te,clipArea:Ie,clone:g,color:Qt,createContext:Ci,debounce:dt,defined:k,distanceBetweenPoints:q,drawPoint:Le,drawPointLegend:Ee,each:u,easingEffects:fi,finiteOrDefault:r,fontString:function(t,e,i){return e+" "+t+"px "+i},formatNumber:ne,getAngleFromPoint:X,getHoverColor:te,getMaximumSize:we,getRelativePosition:ve,getRtlAdapter:Oi,getStyle:xe,isArray:n,isFinite:a,isFunction:S,isNullOrUndef:s,isNumber:N,isObject:o,isPatternOrGradient:Jt,listenArrayEvents:at,log10:z,merge:x,mergeIf:b,niceNum:B,noop:e,overrideTextDirection:Ai,readUsedSize:Pe,renderText:Ne,requestAnimFrame:ht,resolve:Pi,resolveObjectKey:M,restoreTextDirection:Ti,retinaScale:ke,setsEqual:P,sign:F,splineCurve:ai,splineCurveMonotone:ri,supportsEventListenerOptions:Se,throttled:ct,toDegrees:Y,toDimension:c,toFont:Si,toFontString:De,toLineHeight:_i,toPadding:ki,toPercentage:h,toRadians:$,toTRBL:Mi,toTRBLCorners:wi,uid:i,unclipArea:ze,unlistenArrayEvents:rt,valueOrDefault:l});function Ni(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?st:it;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function Hi(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=Ni(o[t],e,a,n);for(let t=l;t<=h;++t){const e=r[t];e.skip||s(e,i,t)}}}function ji(t,e,i,s,n){const o=[];if(!n&&!t.isPointInArea(e))return o;return Hi(t,i,e,(function(i,a,r){(n||Re(i,t.chartArea,0))&&i.inRange(e.x,e.y,s)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o}function $i(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return Hi(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!(!!o||t.isPointInArea(u))&&!d)return;const f=r(e,u);f<l?(a=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&a.push({element:i,datasetIndex:h,index:c})})),a}function Yi(t,e,i,s,n,o){return o||t.isPointInArea(e)?"r"!==i||s?$i(t,e,i,s,n,o):function(t,e,i,s){let n=[];return Hi(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:l}=X(t,{x:e.x,y:e.y});Z(l,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function Ui(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return Hi(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var Xi={evaluateInteractionItems:Hi,modes:{index(t,e,i,s){const n=ve(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?ji(t,n,o,s,a):Yi(t,n,o,!1,s,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,s){const n=ve(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?ji(t,n,o,s,a):Yi(t,n,o,!1,s,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,s)=>ji(t,ve(e,t),i.axis||"xy",s,i.includeInvisible||!1),nearest(t,e,i,s){const n=ve(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return Yi(t,n,o,i.intersect,s,a)},x:(t,e,i,s)=>Ui(t,ve(e,t),"x",i.intersect,s),y:(t,e,i,s)=>Ui(t,ve(e,t),"y",i.intersect,s)}};const qi=["left","top","right","bottom"];function Ki(t,e){return t.filter((t=>t.pos===e))}function Gi(t,e){return t.filter((t=>-1===qi.indexOf(t.pos)&&t.box.axis===e))}function Zi(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function Ji(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!qi.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:a&&e.availableHeight)}return i}function Qi(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function ts(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function es(t,e,i,s){const{pos:n,box:a}=i,r=t.maxPadding;if(!o(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?a.height:a.width),i.size=e.size/e.count,t[n]+=i.size}a.getPadding&&ts(r,a.getPadding());const l=Math.max(0,e.outerWidth-Qi(r,t,"left","right")),h=Math.max(0,e.outerHeight-Qi(r,t,"top","bottom")),c=l!==t.w,d=h!==t.h;return t.w=l,t.h=h,i.horizontal?{same:c,other:d}:{same:d,other:c}}function is(t,e){const i=e.maxPadding;function s(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}return s(t?["left","right"]:["top","bottom"])}function ss(t,e,i,s){const n=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,is(r.horizontal,e));const{same:a,other:d}=es(e,i,r,s);h|=a&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&ss(n,e,i,s)||c}function ns(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function os(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*h,o=l.size||t.height;k(l.start)&&(a=l.start),t.fullSize?ns(t,n.left,a,i.outerWidth-n.right-n.left,o):ns(t,e.left+l.placed,a,s,o),l.start=a,l.placed+=s,a=t.bottom}else{const s=e.h*h,a=l.size||t.width;k(l.start)&&(o=l.start),t.fullSize?ns(t,o,n.top,a,i.outerHeight-n.bottom-n.top):ns(t,o,e.top+l.placed,a,s),l.start=o,l.placed+=s,o=t.right}}e.x=o,e.y=a}var as={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=ki(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=Zi(e.filter((t=>t.box.fullSize)),!0),s=Zi(Ki(e,"left"),!0),n=Zi(Ki(e,"right")),o=Zi(Ki(e,"top"),!0),a=Zi(Ki(e,"bottom")),r=Gi(e,"x"),l=Gi(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:Ki(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,h=r.horizontal;u(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),f=Object.assign({},n);ts(f,ki(s));const g=Object.assign({maxPadding:f,w:o,h:a,x:n.left,y:n.top},n),p=Ji(l.concat(h),d);ss(r.fullSize,g,d,p),ss(l,g,d,p),ss(h,g,d,p)&&ss(l,g,d,p),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(g),os(r.leftAndTop,g,d,p),g.x+=g.w,g.y+=g.h,os(r.rightAndBottom,g,d,p),t.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},u(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})}))}};class rs{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class ls extends rs{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const hs="$chartjs",cs={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ds=t=>null===t||""===t;const us=!!Se&&{passive:!0};function fs(t,e,i){t&&t.canvas&&t.canvas.removeEventListener(e,i,us)}function gs(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function ps(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||gs(i.addedNodes,s),e=e&&!gs(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function ms(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||gs(i.removedNodes,s),e=e&&!gs(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const xs=new Map;let bs=0;function _s(){const t=window.devicePixelRatio;t!==bs&&(bs=t,xs.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function ys(t,e,i){const s=t.canvas,n=s&&ge(s);if(!n)return;const o=ct(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){xs.size||window.addEventListener("resize",_s),xs.set(t,e)}(t,o),a}function vs(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){xs.delete(t),xs.size||window.removeEventListener("resize",_s)}(t)}function Ms(t,e,i){const s=t.canvas,n=ct((e=>{null!==t.ctx&&i(function(t,e){const i=cs[t.type]||t.type,{x:s,y:n}=ve(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t);return function(t,e,i){t&&t.addEventListener(e,i,us)}(s,e,n),n}class ws extends rs{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t[hs]={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ds(n)){const e=Pe(t,"width");void 0!==e&&(t.width=e)}if(ds(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Pe(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[hs])return!1;const i=e[hs].initial;["height","width"].forEach((t=>{const n=i[t];s(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[hs],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:ps,detach:ms,resize:ys}[e]||Ms;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];if(!s)return;({attach:vs,detach:vs,resize:vs}[e]||fs)(t,e,s),i[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return we(t,e,i,s)}isAttached(t){const e=t&&ge(t);return!(!e||!e.isConnected)}}function ks(t){return!fe()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?ls:ws}var Ss=Object.freeze({__proto__:null,BasePlatform:rs,BasicPlatform:ls,DomPlatform:ws,_detectPlatform:ks});const Ps="transparent",Ds={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=Qt(t||Ps),n=s.valid&&Qt(e||Ps);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class Cs{constructor(t,e,i,s){const n=e[i];s=Pi([t.to,s,n,t.from]);const o=Pi([t.from,n,s]);this._active=!0,this._fn=t.fn||Ds[t.type||typeof o],this._easing=fi[t.easing]||fi.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=Pi([t.to,e,s,t.from]),this._from=Pi([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Os{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!o(t))return;const e=Object.keys(ue.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const a=t[s];if(!o(a))return;const r={};for(const t of e)r[t]=a[t];(n(a.properties)&&a.properties||[s]).forEach((t=>{t!==s&&i.has(t)||i.set(t,r)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(!i)return void(t.options=e);i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}}));return i}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){s.push(...this._animateOptions(t,e));continue}const h=e[l];let c=n[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,a);continue}c.cancel()}d&&d.duration?(n[l]=c=new Cs(d,t,l,h),s.push(c)):t[l]=h}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(bt.add(this._chart,i),!0):void 0}}function As(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Ts(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Ls(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let r,l,h,c;if(null!==e){for(r=0,l=n.length;r<l;++r){if(h=+n[r],h===i){if(s.all)continue;break}c=t.values[h],a(c)&&(o||0===e||F(e)===F(c))&&(e+=c)}return e}}function Es(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Rs(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Is(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function zs(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=Rs(n,c,o),u[r]=d,u._top=Is(u,a,!0,s.type),u._bottom=Is(u,a,!1,s.type);(u._visualValues||(u._visualValues={}))[r]=d}}function Fs(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Vs(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const Bs=t=>"reset"===t||"none"===t,Ws=(t,e)=>e?t:Object.assign({},t);class Ns{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Es(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Vs(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=l(i.xAxisID,Fs(t,"x")),o=e.yAxisID=l(i.yAxisID,Fs(t,"y")),a=e.rAxisID=l(i.rAxisID,Fs(t,"r")),r=e.indexAxis,h=e.iAxisID=s(r,n,o,a),c=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&rt(this._data,this),t._stacked&&Vs(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(o(e)){const t=this._cachedMeta;this._data=function(t,e){const{iScale:i,vScale:s}=e,n="x"===i.axis?"x":"y",o="x"===s.axis?"x":"y",a=Object.keys(t),r=new Array(a.length);let l,h,c;for(l=0,h=a.length;l<h;++l)c=a[l],r[l]={[n]:c,[o]:t[c]};return r}(e,t)}else if(i!==e){if(i){rt(i,this);const t=this._cachedMeta;Vs(t),t._parsed=[]}e&&Object.isExtensible(e)&&at(e,this),this._syncList=[],this._data=e}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Es(e.vScale,e),e.stack!==i.stack&&(s=!0,Vs(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&zs(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:a,_stacked:r}=i,l=a.axis;let h,c,d,u=0===t&&e===s.length||i._sorted,f=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,d=s;else{d=n(s[t])?this.parseArrayData(i,s,t,e):o(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const a=()=>null===c[l]||f&&c[l]<f[l];for(h=0;h<e;++h)i._parsed[h+t]=c=d[h],u&&(a()&&(u=!1),f=c);i._sorted=u}r&&zs(this,d)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),h=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:h||n.parse(l[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={x:n.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let h,c,d,u;for(h=0,c=s;h<c;++h)d=h+i,u=e[d],l[h]={x:n.parse(M(u,a),d),y:o.parse(M(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Ls({keys:Ts(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Ls(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,r=this._getOtherScale(t),l=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ts(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:d}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(r);let u,f;function g(){f=s[u];const e=f[r.axis];return!a(f[t.axis])||c>e||d<e}for(u=0;u<o&&(g()||(this.updateRangeFromParsed(h,t,f,l),!n));++u);if(n)for(u=o-1;u>=0;--u)if(!g()){this.updateRangeFromParsed(h,t,f,l);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],a(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return o(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(l(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=As(t,i),n=As(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,a,r),h=a;h<a+r;++h){const e=s[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(h=0;h<o.length;++h)o[h].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return Ci(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return Ci(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&k(i);if(a)return Ws(a,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(ue.elements[t]),f=l.resolveNamedOptions(d,u,(()=>this.getContext(i,s,e)),c);return f.$shared&&(f.$shared=r,n[o]=Object.freeze(Ws(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new Os(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Bs(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){Bs(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Bs(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Vs(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}class Hs{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return N(this.x)&&N(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function js(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),o=Math.min(i.maxTicksLimit||n,n),a=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],r=a.length,l=a[0],h=a[r-1],c=[];if(r>o)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,c,a,r/o),c;const d=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=W(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(a,e,o);if(r>0){let t,i;const n=r>1?Math.round((h-l)/(r-1)):null;for($s(e,c,d,s(n)?0:l-n,l),t=0,i=r-1;t<i;t++)$s(e,c,d,a[t],a[t+1]);return $s(e,c,d,h,s(n)?e.length:h+n),c}return $s(e,c,d),c}function $s(t,e,i,s,n){const o=l(s,0),a=Math.min(l(n,t.length),t.length);let r,h,c,d=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),c=o;c<0;)d++,c=Math.round(o+d*i);for(h=Math.max(o,0);h<a;h++)h===c&&(e.push(t[h]),d++,c=Math.round(o+d*i))}const Ys=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,Us=(t,e)=>Math.min(e||t,t);function Xs(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function qs(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?l:-l,h<o-r||h>a+r)))return h}function Ks(t){return t.drawTicks?t.tickLength:0}function Gs(t,e){if(!t.display)return 0;const i=Si(t.font,e),s=ki(t.padding);return(n(t.text)?t.text.length:1)*i.lineHeight+s.height}function Zs(t,e,i){let s=ut(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class Js extends Hs{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=r(t,Number.POSITIVE_INFINITY),e=r(e,Number.NEGATIVE_INFINITY),i=r(i,Number.POSITIVE_INFINITY),s=r(s,Number.NEGATIVE_INFINITY),{min:r(t,i),max:r(e,s),minDefined:a(t),maxDefined:a(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:r(i,r(s,i)),max:r(s,r(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){d(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=Di(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?Xs(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=js(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){d(this.options.afterUpdate,[this])}beforeSetDimensions(){d(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){d(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),d(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){d(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=d(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){d(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){d(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=Us(this.ticks.length,t.ticks.maxTicksLimit),s=e.minRotation||0,n=e.maxRotation;let o,a,r,l=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=J(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Ks(t.grid)-e.padding-Gs(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),l=Y(Math.min(Math.asin(J((h.highest.height+6)/o,-1,1)),Math.asin(J(a/r,-1,1))-Math.asin(J(d/r,-1,1)))),l=Math.max(s,Math.min(n,l))),this.labelRotation=l}afterCalculateLabelRotation(){d(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){d(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Gs(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Ks(n)+o):(t.height=this.maxHeight,t.width=Ks(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,l=$(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(a){const e=i.mirror?0:c*n.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){d(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)s(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Xs(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:o,_longestTextCache:a}=this,r=[],l=[],h=Math.floor(e/Us(e,i));let c,d,f,g,p,m,x,b,_,y,v,M=0,w=0;for(c=0;c<e;c+=h){if(g=t[c].label,p=this._resolveTickFontOptions(c),o.font=m=p.string,x=a[m]=a[m]||{data:{},gc:[]},b=p.lineHeight,_=y=0,s(g)||n(g)){if(n(g))for(d=0,f=g.length;d<f;++d)v=g[d],s(v)||n(v)||(_=Ce(o,x.data,x.gc,_,v),y+=b)}else _=Ce(o,x.data,x.gc,_,g),y=b;r.push(_),l.push(y),M=Math.max(_,M),w=Math.max(y,w)}!function(t,e){u(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(a,e);const k=r.indexOf(M),S=l.indexOf(w),P=t=>({width:r[t]||0,height:l[t]||0});return{first:P(0),last:P(e-1),widest:P(k),highest:P(S),widths:r,heights:l}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Q(this._alignToPixels?Ae(this.chart,e,0):e)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Ci(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Ci(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=$(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:a,border:r}=s,h=n.offset,c=this.isHorizontal(),d=this.ticks.length+(h?1:0),u=Ks(n),f=[],g=r.setContext(this.getContext()),p=g.display?g.width:0,m=p/2,x=function(t){return Ae(i,t,p)};let b,_,y,v,M,w,k,S,P,D,C,O;if("top"===a)b=x(this.bottom),w=this.bottom-u,S=b-m,D=x(t.top)+m,O=t.bottom;else if("bottom"===a)b=x(this.top),D=t.top,O=x(t.bottom)-m,w=b+m,S=this.top+u;else if("left"===a)b=x(this.right),M=this.right-u,k=b-m,P=x(t.left)+m,C=t.right;else if("right"===a)b=x(this.left),P=t.left,C=x(t.right)-m,M=b+m,k=this.left+u;else if("x"===e){if("center"===a)b=x((t.top+t.bottom)/2+.5);else if(o(a)){const t=Object.keys(a)[0],e=a[t];b=x(this.chart.scales[t].getPixelForValue(e))}D=t.top,O=t.bottom,w=b+m,S=w+u}else if("y"===e){if("center"===a)b=x((t.left+t.right)/2);else if(o(a)){const t=Object.keys(a)[0],e=a[t];b=x(this.chart.scales[t].getPixelForValue(e))}M=b-m,k=M-u,P=t.left,C=t.right}const A=l(s.ticks.maxTicksLimit,d),T=Math.max(1,Math.ceil(d/A));for(_=0;_<d;_+=T){const t=this.getContext(_),e=n.setContext(t),s=r.setContext(t),o=e.lineWidth,a=e.color,l=s.dash||[],d=s.dashOffset,u=e.tickWidth,g=e.tickColor,p=e.tickBorderDash||[],m=e.tickBorderDashOffset;y=qs(this,_,h),void 0!==y&&(v=Ae(i,y,o),c?M=k=P=C=v:w=S=D=O=v,f.push({tx1:M,ty1:w,tx2:k,ty2:S,x1:P,y1:D,x2:C,y2:O,width:o,color:a,borderDash:l,borderDashOffset:d,tickWidth:u,tickColor:g,tickBorderDash:p,tickBorderDashOffset:m}))}return this._ticksLength=d,this._borderValue=b,f}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:a}=i,r=this.isHorizontal(),l=this.ticks,{align:h,crossAlign:c,padding:d,mirror:u}=a,f=Ks(i.grid),g=f+d,p=u?-d:g,m=-$(this.labelRotation),x=[];let b,_,y,v,M,w,k,S,P,D,C,O,A="middle";if("top"===s)w=this.bottom-p,k=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+p,k=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(f);k=t.textAlign,M=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(f);k=t.textAlign,M=t.x}else if("x"===e){if("center"===s)w=(t.top+t.bottom)/2+g;else if(o(s)){const t=Object.keys(s)[0],e=s[t];w=this.chart.scales[t].getPixelForValue(e)+g}k=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)M=(t.left+t.right)/2-g;else if(o(s)){const t=Object.keys(s)[0],e=s[t];M=this.chart.scales[t].getPixelForValue(e)}k=this._getYAxisLabelAlignment(f).textAlign}"y"===e&&("start"===h?A="top":"end"===h&&(A="bottom"));const T=this._getLabelSizes();for(b=0,_=l.length;b<_;++b){y=l[b],v=y.label;const t=a.setContext(this.getContext(b));S=this.getPixelForTick(b)+a.labelOffset,P=this._resolveTickFontOptions(b),D=P.lineHeight,C=n(v)?v.length:1;const e=C/2,i=t.color,o=t.textStrokeColor,h=t.textStrokeWidth;let d,f=k;if(r?(M=S,"inner"===k&&(f=b===_-1?this.options.reverse?"left":"right":0===b?this.options.reverse?"right":"left":"center"),O="top"===s?"near"===c||0!==m?-C*D+D/2:"center"===c?-T.highest.height/2-e*D+D:-T.highest.height+D/2:"near"===c||0!==m?D/2:"center"===c?T.highest.height/2-e*D:T.highest.height-C*D,u&&(O*=-1),0===m||t.showLabelBackdrop||(M+=D/2*Math.sin(m))):(w=S,O=(1-C)*D/2),t.showLabelBackdrop){const e=ki(t.backdropPadding),i=T.heights[b],s=T.widths[b];let n=O-e.top,o=0-e.left;switch(A){case"middle":n-=i/2;break;case"bottom":n-=i}switch(k){case"center":o-=s/2;break;case"right":o-=s;break;case"inner":b===_-1?o-=s:b>0&&(o-=s/2)}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}x.push({label:v,font:P,textOffset:O,options:{rotation:m,color:i,strokeColor:o,strokeWidth:h,textAlign:f,textBaseline:A,translation:[M,w],backdrop:d}})}return x}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-$(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));if(i>=0){return e.setContext(this.getContext(i)).lineWidth}return 0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:s}}=this,n=i.setContext(this.getContext()),o=i.display?n.width:0;if(!o)return;const a=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=Ae(t,this.left,o)-o/2,h=Ae(t,this.right,a)+a/2,c=d=r):(c=Ae(t,this.top,o)-o/2,d=Ae(t,this.bottom,a)+a/2,l=h=r),e.save(),e.lineWidth=n.width,e.strokeStyle=n.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Ie(e,i);const s=this.getLabelItems(t);for(const t of s){const i=t.options,s=t.font;Ne(e,t.label,0,t.textOffset,s,i)}i&&ze(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const a=Si(i.font),r=ki(i.padding),l=i.align;let h=a.lineHeight/2;"bottom"===e||"center"===e||o(e)?(h+=r.bottom,n(i.text)&&(h+=a.lineHeight*(i.text.length-1))):h+=r.top;const{titleX:c,titleY:d,maxWidth:u,rotation:f}=function(t,e,i,s){const{top:n,left:a,bottom:r,right:l,chart:h}=t,{chartArea:c,scales:d}=h;let u,f,g,p=0;const m=r-n,x=l-a;if(t.isHorizontal()){if(f=ft(s,a,l),o(i)){const t=Object.keys(i)[0],s=i[t];g=d[t].getPixelForValue(s)+m-e}else g="center"===i?(c.bottom+c.top)/2+m-e:Ys(t,i,e);u=l-a}else{if(o(i)){const t=Object.keys(i)[0],s=i[t];f=d[t].getPixelForValue(s)-x+e}else f="center"===i?(c.left+c.right)/2-x+e:Ys(t,i,e);g=ft(s,r,n),p="left"===i?-E:E}return{titleX:f,titleY:g,maxWidth:u,rotation:p}}(this,h,e,l);Ne(t,i.text,0,0,a,{color:i.color,maxWidth:u,rotation:f,textAlign:Zs(l,e,s),textBaseline:"middle",translation:[c,d]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=l(t.grid&&t.grid.z,-1),s=l(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Js.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return Si(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Qs{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=x(Object.create(null),[i?ue.get(i):{},ue.get(e),t.defaults]);ue.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");ue.route(o,n,l,r)}))}(e,t.defaultRoutes);t.descriptors&&ue.describe(e,t.descriptors)}(t,o,i),this.override&&ue.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in ue[s]&&(delete ue[s][i],this.override&&delete re[i])}}class tn{constructor(){this.controllers=new Qs(Ns,"datasets",!0),this.elements=new Qs(Hs,"elements"),this.plugins=new Qs(Object,"plugins"),this.scales=new Qs(Js,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):u(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=w(t);d(i["before"+s],[],i),e[t](i),d(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var en=new tn;class sn{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===d(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){s(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=l(i.options&&i.options.plugins,{}),n=function(t){const e={},i=[],s=Object.keys(en.plugins.items);for(let t=0;t<s.length;t++)i.push(en.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==s||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=nn(s[e],n);null!==l&&o.push({plugin:r,options:on(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function nn(t,e){return e||!1!==t?!0===t?{}:t:null}function on(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function an(t,e){const i=ue.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function rn(t){if("x"===t||"y"===t||"r"===t)return t}function ln(t,...e){if(rn(t))return t;for(const s of e){const e=s.axis||("top"===(i=s.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&rn(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function hn(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function cn(t,e){const i=re[t.type]||{scales:{}},s=e.scales||{},n=an(t.type,e),a=Object.create(null);return Object.keys(s).forEach((e=>{const r=s[e];if(!o(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=ln(e,r,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return hn(t,"x",i[0])||hn(t,"y",i[0])}return{}}(e,t),ue.scales[r.type]),h=function(t,e){return t===e?"_index_":"_value_"}(l,n),c=i.scales||{};a[e]=b(Object.create(null),[{axis:l},r,c[l],c[h]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,o=i.indexAxis||an(n,e),r=(re[n]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,o),n=i[e+"AxisID"]||e;a[n]=a[n]||Object.create(null),b(a[n],[{axis:e},s[n],r[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];b(e,[ue.scales[e.type],ue.scale])})),a}function dn(t){const e=t.options||(t.options={});e.plugins=l(e.plugins,{}),e.scales=cn(t,e)}function un(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const fn=new Map,gn=new Set;function pn(t,e){let i=fn.get(t);return i||(i=e(),fn.set(t,i),gn.add(i)),i}const mn=(t,e,i)=>{const s=M(e,i);void 0!==s&&t.add(s)};class xn{constructor(t){this._config=function(t){return(t=t||{}).data=un(t.data),dn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=un(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),dn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return pn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return pn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return pn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return pn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>mn(r,t,e)))),e.forEach((t=>mn(r,s,t))),e.forEach((t=>mn(r,re[n]||{},t))),e.forEach((t=>mn(r,ue,t))),e.forEach((t=>mn(r,le,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),gn.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,re[e]||{},ue.datasets[e]||{},{type:e},ue,le]}resolveNamedOptions(t,e,i,s=[""]){const o={$shared:!0},{resolver:a,subPrefixes:r}=bn(this._resolverCache,t,s);let l=a;if(function(t,e){const{isScriptable:i,isIndexable:s}=Ye(t);for(const o of e){const e=i(o),a=s(o),r=(a||e)&&t[o];if(e&&(S(r)||_n(r))||a&&n(r))return!0}return!1}(a,e)){o.$shared=!1;l=$e(a,i=S(i)?i():i,this.createResolver(t,i,r))}for(const t of e)o[t]=l[t];return o}createResolver(t,e,i=[""],s){const{resolver:n}=bn(this._resolverCache,t,i);return o(e)?$e(n,e,void 0,s):n}}function bn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);if(!o){o={resolver:je(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)}return o}const _n=t=>o(t)&&Object.getOwnPropertyNames(t).some((e=>S(t[e])));const yn=["top","bottom","left","right","chartArea"];function vn(t,e){return"top"===t||"bottom"===t||-1===yn.indexOf(t)&&"x"===e}function Mn(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function wn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),d(i&&i.onComplete,[t],e)}function kn(t){const e=t.chart,i=e.options.animation;d(i&&i.onProgress,[t],e)}function Sn(t){return fe()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Pn={},Dn=t=>{const e=Sn(t);return Object.values(Pn).filter((t=>t.canvas===e)).pop()};function Cn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}function On(t,e,i){return t.options.clip?t[i]:e[i]}class An{static defaults=ue;static instances=Pn;static overrides=re;static registry=en;static version="4.4.3";static getChart=Dn;static register(...t){en.add(...t),Tn()}static unregister(...t){en.remove(...t),Tn()}constructor(t,e){const s=this.config=new xn(e),n=Sn(t),o=Dn(n);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas with ID '"+o.canvas.id+"' can be reused.");const a=s.createResolver(s.chartOptionScopes(),this.getContext());this.platform=new(s.platform||ks(n)),this.platform.updateConfig(s);const r=this.platform.acquireContext(n,a.aspectRatio),l=r&&r.canvas,h=l&&l.height,c=l&&l.width;this.id=i(),this.ctx=r,this.canvas=l,this.width=c,this.height=h,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new sn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=dt((t=>this.update(t)),a.resizeDelay||0),this._dataChanges=[],Pn[this.id]=this,r&&l?(bt.listen(this,"complete",wn),bt.listen(this,"progress",kn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:o}=this;return s(t)?e&&o?o:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return en}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ke(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Te(this.canvas,this.ctx),this}stop(){return bt.stop(this),this}resize(t,e){bt.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ke(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),d(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){u(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=ln(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),u(n,(e=>{const n=e.options,o=n.id,a=ln(o,n),r=l(n.type,e.dtype);void 0!==n.position&&vn(n.position,a)===vn(e.dposition)||(n.position=e.dposition),s[o]=!0;let h=null;if(o in i&&i[o].type===r)h=i[o];else{h=new(en.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[h.id]=h}h.init(n,t)})),u(s,((t,e)=>{t||delete i[e]})),u(i,(t=>{as.configure(this,t,t.options),as.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Mn("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||an(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=en.getController(o),{datasetElementType:s,dataElementType:a}=ue.datasets[o];Object.assign(e,{dataElementType:en.getElement(a),datasetElementType:s&&en.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){u(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||u(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Mn("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){u(this.scales,(t=>{as.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);P(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e){Cn(t,s,"_removeElements"===i?-n:n)}}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!P(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;as.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],u(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,S(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(bt.has(this)?this.attached&&!bt.running(this)&&bt.start(this):(this.draw(),wn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=function(t,e){const{xScale:i,yScale:s}=t;return i&&s?{left:On(i,e,"left"),right:On(i,e,"right"),top:On(s,e,"top"),bottom:On(s,e,"bottom")}:e}(t,this.chartArea),o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&Ie(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&ze(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return Re(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=Xi.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=Ci(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);k(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),bt.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Te(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Pn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};u(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){u(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},u(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!f(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=D(t),l=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,d(n.onHover,[t,a,this],this),r&&d(n.onClick,[t,a,this],this));const h=!f(a,s);return(h||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function Tn(){return u(An.instances,(t=>t._plugins.invalidate()))}function Ln(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class En{static override(t){Object.assign(En.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return Ln()}parse(){return Ln()}format(){return Ln()}add(){return Ln()}diff(){return Ln()}startOf(){return Ln()}endOf(){return Ln()}}var Rn={_date:En};function In(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=lt(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(k(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),l();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),l();return r}function zn(t,e,i,s){return n(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Fn(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let h,c,d,u;for(h=i,c=i+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(a[h],h),l.push(zn(u,d,o,h));return l}function Vn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Bn(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=h:(i._bottom||0)===s?n=c:(o[Wn(c,a,r,l)]=!0,n=h)),o[Wn(n,a,r,l)]=!0,t.borderSkipped=o}function Wn(t,e,i,s){var n,o,a;return s?(a=i,t=Nn(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=Nn(t,e,i),t}function Nn(t,e,i){return"start"===t?e:"end"===t?i:t}function Hn(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class jn extends Ns{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,a,r=t=>+i[t];if(o(i[t])){const{key:t="value"}=this._parsing;r=e=>+M(i[e],t)}for(n=t,a=t+e;n<a;++n)s._parsed[n]=r(n)}}_getRotation(){return $(this.options.rotation-90)}_getCircumference(){return $(this.options.circumference)}_getRotationExtents(){let t=O,e=-O;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min(h(this.options.cutout,a),1),l=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:f,ratioY:g,offsetX:p,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<O){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,s)=>Z(t,r,l,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>Z(t,r,l,!0)?-1:Math.min(e,e*i,s,s*i),p=f(0,h,d),m=f(E,c,u),x=g(C,h,d),b=g(C+E,c,u);s=(p-x)/2,n=(m-b)/2,o=-(p+x)/2,a=-(m+b)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),x=(i.width-o)/f,b=(i.height-o)/g,_=Math.max(Math.min(x,b)/2,0),y=c(this.options.radius,_),v=(y-Math.max(y*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*l,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/O)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?O*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=ne(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(l(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class $n extends Ns{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=ne(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}parseObjectData(t,e,i,s){return ii.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,h=r.yCenter,c=r.getIndexAngle(0)-.5*C;let d,u=c;const f=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,s,f);for(d=e;d<e+i;d++){const e=t[d];let i=u,g=u+this._computeAngle(d,s,f),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=g,n&&(a.animateScale&&(p=0),a.animateRotate&&(i=g=c));const m={x:l,y:h,innerRadius:0,outerRadius:p,startAngle:i,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":s)};this.updateElement(e,d,m,s)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?$(this.resolveDataElementOptions(t,e).angle||i):0}}var Yn=Object.freeze({__proto__:null,BarController:class extends Ns{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return Fn(t,e,i,s)}parseArrayData(t,e,i,s){return Fn(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?a:r,h="x"===o.axis?a:r,c=[];let d,u,f,g;for(d=i,u=i+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(M(g,l),d),c.push(zn(M(g,h),f,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Vn(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize();this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const o="reset"===n,{index:a,_cachedMeta:{vScale:r}}=this,l=r.getBasePixel(),h=r.isHorizontal(),c=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(e,n);for(let f=e;f<e+i;f++){const e=this.getParsed(f),i=o||s(e[r.axis])?{base:l,head:l}:this._calculateBarValuePixels(f),g=this._calculateBarIndexPixels(f,c),p=(e._stacks||{})[r.axis],m={horizontal:h,base:i.base,enableBorderRadius:!p||Vn(e._custom)||a===p._top||a===p._bottom,x:h?i.head:g.center,y:h?g.center:i.head,height:h?g.size:Math.abs(i.size),width:h?Math.abs(i.size):g.size};u&&(m.options=d||this.resolveDataElementOptions(f,t[f].active?"active":n));const x=m.options||t[f].options;Bn(m,x,p,a),Hn(m,x,c.ratio),this.updateElement(t[f],f,m,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),o=i.options.stacked,a=[],r=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if(s(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!r(i))&&((!1===o||-1===a.indexOf(i.stack)||void 0===o&&void 0===i.stack)&&a.push(i.stack),i.index===t))break;return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||In(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:o,minBarLength:a}}=this,r=o||0,l=this.getParsed(t),h=l._custom,c=Vn(h);let d,u,f=l[e.axis],g=0,p=i?this.applyStack(e,l,i):f;p!==f&&(g=p-f,p=f),c&&(f=h.barStart,p=h.barEnd-h.barStart,0!==f&&F(f)!==F(h.barEnd)&&(g=0),g+=f);const m=s(o)||c?g:o;let x=e.getPixelForValue(m);if(d=this.chart.getDataVisibility(t)?e.getPixelForValue(g+p):x,u=d-x,Math.abs(u)<a){u=function(t,e,i){return 0!==t?F(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(u,e,r)*a,f===r&&(x-=u/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),o=Math.min(t,s),h=Math.max(t,s);x=Math.max(Math.min(x,h),o),d=x+u,i&&!c&&(l._stacks[e.axis]._visualValues[n]=e.getValueForPixel(d)-e.getValueForPixel(x))}if(x===e.getPixelForValue(r)){const t=F(u)*e.getLineWidthForValue(r)/2;x+=t,u-=t}return{size:u,base:x,head:d,center:d+u/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,o=n.skipNull,a=l(n.maxBarThickness,1/0);let r,h;if(e.grouped){const i=o?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const o=i.barThickness;let a,r;return s(o)?(a=e.min*i.categoryPercentage,r=i.barPercentage):(a=o*n,r=1),{chunk:a/n,ratio:r,start:e.pixels[t]-a/2}}(t,e,n,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);r=l.start+l.chunk*c+l.chunk/2,h=Math.min(a,l.chunk*l.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),h=Math.min(a,e.min*e.ratio);return{base:r-h/2,head:r+h/2,center:r,size:h}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null===this.getParsed(n)[e.axis]||i[n].hidden||i[n].draw(this._ctx)}},BubbleController:class extends Ns{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=l(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=l(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[h]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=l(i&&i._custom,n),s}},DoughnutController:jn,LineController:class extends Ns{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=pt(e,s,o);this._drawStart=a,this._drawCount=r,mt(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,n){const o="reset"===n,{iScale:a,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n),u=a.axis,f=r.axis,{spanGaps:g,segment:p}=this.options,m=N(g)?g:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||o||"none"===n,b=e+i,_=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<_;++i){const g=t[i],_=x?g:{};if(i<e||i>=b){_.skip=!0;continue}const v=this.getParsed(i),M=s(v[f]),w=_[u]=a.getPixelForValue(v[u],i),k=_[f]=o||M?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,v,l):v[f],i);_.skip=isNaN(w)||isNaN(k)||M,_.stop=i>0&&Math.abs(v[u]-y[u])>m,p&&(_.parsed=v,_.raw=h.data[i]),d&&(_.options=c||this.resolveDataElementOptions(i,g.active?"active":n)),x||this.updateElement(g,i,_,n),y=v}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends jn{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:$n,RadarController:class extends Ns{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,s){return ii.bind(this)(t,e,i,s)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,h=o?n.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,s)}}},ScatterController:class extends Ns{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,s=this.chart._animationsDisabled;let{start:n,count:o}=pt(e,i,s);if(this._drawStart=n,this._drawCount=o,mt(e)&&(n=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:n,_dataset:o}=e;n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:a},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,n,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const o="reset"===n,{iScale:a,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,c=this.resolveDataElementOptions(e,n),d=this.getSharedOptions(c),u=this.includeOptions(n,d),f=a.axis,g=r.axis,{spanGaps:p,segment:m}=this.options,x=N(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===n;let _=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),p=b?e:{},y=s(i[g]),v=p[f]=a.getPixelForValue(i[f],c),M=p[g]=o||y?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,i,l):i[g],c);p.skip=isNaN(v)||isNaN(M)||y,p.stop=c>0&&Math.abs(i[f]-_[f])>x,m&&(p.parsed=i,p.raw=h.data[c]),u&&(p.options=d||this.resolveDataElementOptions(c,e.active?"active":n)),b||this.updateElement(e,c,p,n),_=i}this.updateSharedOptions(d,n,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}});function Un(t,e,i,s){const n=vi(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return J(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:J(n.innerStart,0,a),innerEnd:J(n.innerEnd,0,a)}}function Xn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function qn(t,e,i,s,n,o){const{x:a,y:r,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+s+i-h,0),u=c>0?c+s+i+h:0;let f=0;const g=n-l;if(s){const t=((c>0?c-s:0)+(d>0?d-s:0))/2;f=(g-(0!==t?g*t/(t+s):g))/2}const p=(g-Math.max(.001,g*d-i/C)/d)/2,m=l+p+f,x=n-p-f,{outerStart:b,outerEnd:_,innerStart:y,innerEnd:v}=Un(e,u,d,x-m),M=d-b,w=d-_,k=m+b/M,S=x-_/w,P=u+y,D=u+v,O=m+y/P,A=x-v/D;if(t.beginPath(),o){const e=(k+S)/2;if(t.arc(a,r,d,k,e),t.arc(a,r,d,e,S),_>0){const e=Xn(w,S,a,r);t.arc(e.x,e.y,_,S,x+E)}const i=Xn(D,x,a,r);if(t.lineTo(i.x,i.y),v>0){const e=Xn(D,A,a,r);t.arc(e.x,e.y,v,x+E,A+Math.PI)}const s=(x-v/u+(m+y/u))/2;if(t.arc(a,r,u,x-v/u,s,!0),t.arc(a,r,u,s,m+y/u,!0),y>0){const e=Xn(P,O,a,r);t.arc(e.x,e.y,y,O+Math.PI,m-E)}const n=Xn(M,m,a,r);if(t.lineTo(n.x,n.y),b>0){const e=Xn(M,k,a,r);t.arc(e.x,e.y,b,m-E,k)}}else{t.moveTo(a,r);const e=Math.cos(k)*d+a,i=Math.sin(k)*d+r;t.lineTo(e,i);const s=Math.cos(S)*d+a,n=Math.sin(S)*d+r;t.lineTo(s,n)}t.closePath()}function Kn(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,f="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,f?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let g=e.endAngle;if(o){qn(t,e,i,s,g,n);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(g=a+(r%O||O))}f&&function(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:l}=e;let h=n/r;t.beginPath(),t.arc(o,a,r,s-h,i+h),l>n?(h=n/l,t.arc(o,a,l,i+h,s-h,!0)):t.arc(o,a,n,i+E,s-E),t.closePath(),t.clip()}(t,e,g),o||(qn(t,e,i,s,g,n),t.stroke())}function Gn(t,e,i=e){t.lineCap=l(i.borderCapStyle,e.borderCapStyle),t.setLineDash(l(i.borderDash,e.borderDash)),t.lineDashOffset=l(i.borderDashOffset,e.borderDashOffset),t.lineJoin=l(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=l(i.borderWidth,e.borderWidth),t.strokeStyle=l(i.borderColor,e.borderColor)}function Zn(t,e,i){t.lineTo(i.x,i.y)}function Jn(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),h=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:h<l&&!c?s+h-l:h-l}}function Qn(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:l,ilen:h}=Jn(n,i,s),c=function(t){return t.stepped?Fe:t.tension||"monotone"===t.cubicInterpolationMode?Ve:Zn}(o);let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=h;++d)u=n[(r+(p?h-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,o.stepped),f=u);return l&&(u=n[(r+(p?h:0))%a],c(t,f,u,p,o.stepped)),!!l}function to(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=Jn(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,x=0;const b=t=>(a+(h?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[b(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[b(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(x*m+e)/++x):(_(),t.lineTo(e,i),u=s,x=0,f=g=i),p=i}_()}function eo(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return!(t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i)?to:Qn}const io="function"==typeof Path2D;function so(t,e,i,s){io&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),Gn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=eo(e);for(const r of n)Gn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}class no extends Hs{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;hi(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=zi(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=Ii(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?pi:t.tension||"monotone"===t.cubicInterpolationMode?mi:gi}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=n[h],u=n[c];if(d===u){a.push(d);continue}const f=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],a.push(f)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return eo(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=eo(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),so(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function oo(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}function ao(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),h=s-d,c=s+d):(d=o/2,r=i-d,l=i+d,h=Math.min(s,n),c=Math.max(s,n)),{left:r,top:h,right:l,bottom:c}}function ro(t,e,i,s){return t?0:J(e,i,s)}function lo(t){const e=ao(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=Mi(s);return{t:ro(n.top,o.top,0,i),r:ro(n.right,o.right,0,e),b:ro(n.bottom,o.bottom,0,i),l:ro(n.left,o.left,0,e)}}(t,i/2,s/2),a=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,a=wi(n),r=Math.min(e,i),l=t.borderSkipped,h=s||o(n);return{topLeft:ro(!h||l.top||l.left,a.topLeft,0,r),topRight:ro(!h||l.top||l.right,a.topRight,0,r),bottomLeft:ro(!h||l.bottom||l.left,a.bottomLeft,0,r),bottomRight:ro(!h||l.bottom||l.right,a.bottomRight,0,r)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:a},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,a.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,a.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,a.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,a.bottomRight-Math.max(n.b,n.r))}}}}function ho(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&ao(t,s);return a&&(n||tt(e,a.left,a.right))&&(o||tt(i,a.top,a.bottom))}function co(t,e){t.rect(e.x,e.y,e.w,e.h)}function uo(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}var fo=Object.freeze({__proto__:null,ArcElement:class extends Hs{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=X(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:h,outerRadius:c,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=(this.options.spacing+this.options.borderWidth)/2,f=l(d,r-a)>=O||Z(n,a,r),g=tt(o,h+u,c+u);return f&&g}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:l}=this.options,h=(s+n)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/4,n=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>O?Math.floor(i/O):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*s,Math.sin(a)*s);const r=s*(1-Math.sin(Math.min(C,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,s,n){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){qn(t,e,i,s,l,n);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+(r%O||O))}qn(t,e,i,s,l,n),t.fill()}(t,this,r,n,o),Kn(t,this,r,n,o),t.restore()}},BarElement:class extends Hs{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=lo(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?He:co;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,uo(o,e,n)),t.clip(),a(t,uo(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,uo(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return ho(this,t,e,i)}inXRange(t,e){return ho(this,t,null,e)}inYRange(t,e){return ho(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}},LineElement:no,PointElement:class extends Hs{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return oo(this,t,"x",e)}inYRange(t,e){return oo(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;e=Math.max(e,e&&t.hoverRadius||0);return 2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Re(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,Le(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}});function go(t,e,i,s){const n=t.indexOf(e);if(-1===n)return((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s);return n!==t.lastIndexOf(e)?i:n}function po(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function mo(t,e,{horizontal:i,minRotation:s}){const n=$(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class xo extends Js{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return s(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=F(s),e=F(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=0===n?1:Math.abs(.05*n);a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:o,min:a,max:r,precision:l,count:h,maxTicks:c,maxDigits:d,includeBounds:u}=t,f=o||1,g=c-1,{min:p,max:m}=e,x=!s(a),b=!s(r),_=!s(h),y=(m-p)/(d+1);let v,M,w,k,S=B((m-p)/g/f)*f;if(S<1e-14&&!x&&!b)return[{value:p},{value:m}];k=Math.ceil(m/S)-Math.floor(p/S),k>g&&(S=B(k*S/g/f)*f),s(l)||(v=Math.pow(10,l),S=Math.ceil(S*v)/v),"ticks"===n?(M=Math.floor(p/S)*S,w=Math.ceil(m/S)*S):(M=p,w=m),x&&b&&o&&H((r-a)/o,S/1e3)?(k=Math.round(Math.min((r-a)/S,c)),S=(r-a)/k,M=a,w=r):_?(M=x?a:M,w=b?r:w,k=h-1,S=(w-M)/k):(k=(w-M)/S,k=V(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const P=Math.max(U(S),U(M));v=Math.pow(10,s(l)?P:l),M=Math.round(M*v)/v,w=Math.round(w*v)/v;let D=0;for(x&&(u&&M!==a?(i.push({value:a}),M<a&&D++,V(Math.round((M+D*S)*v)/v,a,mo(a,y,t))&&D++):M<a&&D++);D<k;++D){const t=Math.round((M+D*S)*v)/v;if(b&&t>r)break;i.push({value:t})}return b&&u&&w!==r?i.length&&V(i[i.length-1].value,r,mo(r,y,t))?i[i.length-1].value=r:i.push({value:r}):b&&w!==r||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&j(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return ne(t,this.chart.options.locale,this.options.ticks.format)}}class bo extends xo{static id="linear";static defaults={ticks:{callback:ae.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=a(t)?t:0,this.max=a(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=$(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const _o=t=>Math.floor(z(t)),yo=(t,e)=>Math.pow(10,_o(t)+e);function vo(t){return 1===t/Math.pow(10,_o(t))}function Mo(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}function wo(t,{min:e,max:i}){e=r(t.min,e);const s=[],n=_o(e);let o=function(t,e){let i=_o(e-t);for(;Mo(t,e,i)>10;)i++;for(;Mo(t,e,i)<10;)i--;return Math.min(i,_o(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const l=Math.pow(10,o),h=n>o?Math.pow(10,n):0,c=Math.round((e-h)*a)/a,d=Math.floor((e-h)/l/10)*l*10;let u=Math.floor((c-d)/Math.pow(10,o)),f=r(t.min,Math.round((h+d+u*Math.pow(10,o))*a)/a);for(;f<i;)s.push({value:f,major:vo(f),significand:u}),u>=10?u=u<15?15:20:u++,u>=20&&(o++,u=2,a=o>=0?1:a),f=Math.round((h+d+u*Math.pow(10,o))*a)/a;const g=r(t.max,f);return s.push({value:g,major:vo(g),significand:u}),s}class ko extends Js{static id="logarithmic";static defaults={ticks:{callback:ae.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=xo.prototype.parse.apply(this,[t,e]);if(0!==i)return a(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=a(t)?Math.max(0,t):null,this.max=a(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!a(this._userMin)&&(this.min=t===yo(this.min,0)?yo(this.min,-1):yo(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(yo(i,-1)),o(yo(s,1)))),i<=0&&n(yo(s,-1)),s<=0&&o(yo(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=wo({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&j(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":ne(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=z(t),this._valueRange=z(this.max)-z(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(z(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function So(t){const e=t.ticks;if(e.display&&t.display){const t=ki(e.backdropPadding);return l(e.font&&e.font.size,ue.font.size)+t.height}return 0}function Po(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Do(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],o=[],a=t._pointLabels.length,r=t.options.pointLabels,l=r.centerPointLabels?C/a:0;for(let u=0;u<a;u++){const a=r.setContext(t.getPointLabelContext(u));o[u]=a.padding;const f=t.getPointPosition(u,t.drawingArea+o[u],l),g=Si(a.font),p=(h=t.ctx,c=g,d=n(d=t._pointLabels[u])?d:[d],{w:Oe(h,c.string,d),h:d.length*c.lineHeight});s[u]=p;const m=G(t.getIndexAngle(u)+l),x=Math.round(Y(m));Co(i,e,m,Po(x,f.x,p.w,0,180),Po(x,f.y,p.h,90,270))}var h,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,{centerPointLabels:a,display:r}=o.pointLabels,l={extra:So(o)/2,additionalAngle:a?C/n:0};let h;for(let o=0;o<n;o++){l.padding=i[o],l.size=e[o];const n=Oo(t,o,l);s.push(n),"auto"===r&&(n.visible=Ao(n,h),n.visible&&(h=n))}return s}(t,s,o)}function Co(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function Oo(t,e,i){const s=t.drawingArea,{extra:n,additionalAngle:o,padding:a,size:r}=i,l=t.getPointPosition(e,s+n+a,o),h=Math.round(Y(G(l.angle+E))),c=function(t,e,i){90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e);return t}(l.y,r.h,h),d=function(t){if(0===t||180===t)return"center";if(t<180)return"left";return"right"}(h),u=function(t,e,i){"right"===i?t-=e:"center"===i&&(t-=e/2);return t}(l.x,r.w,d);return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+r.w,bottom:c+r.h}}function Ao(t,e){if(!e)return!0;const{left:i,top:s,right:n,bottom:o}=t;return!(Re({x:i,y:s},e)||Re({x:i,y:o},e)||Re({x:n,y:s},e)||Re({x:n,y:o},e))}function To(t,e,i){const{left:n,top:o,right:a,bottom:r}=i,{backdropColor:l}=e;if(!s(l)){const i=wi(e.borderRadius),s=ki(e.backdropPadding);t.fillStyle=l;const h=n-s.left,c=o-s.top,d=a-n+s.width,u=r-o+s.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),He(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function Lo(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,O);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}class Eo extends xo{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:ae.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ki(So(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=a(t)&&!isNaN(t)?t:0,this.max=a(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/So(this.options))}generateTickLabels(t){xo.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=d(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?Do(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return G(t*(O/(this._pointLabels.length||1))+$(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(s(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(s(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Ci(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-E+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Lo(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s,border:n}=e,o=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=t._pointLabelItems[n];if(!e.visible)continue;const o=s.setContext(t.getPointLabelContext(n));To(i,o,e);const a=Si(o.font),{x:r,y:l,textAlign:h}=e;Ne(i,t._pointLabels[n],r,l+a.lineHeight/2,a,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),s.display&&this.ticks.forEach(((t,e)=>{if(0!==e||0===e&&this.min<0){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=s.setContext(i),l=n.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!s||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),Lo(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,l)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&this.min>=0&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=Si(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=ki(r.backdropPadding);t.fillRect(-o/2-e.left,-n-l.size/2-e.top,o+e.width,l.size+e.height)}Ne(t,s.label,0,-n,l,{color:r.color,strokeColor:r.textStrokeColor,strokeWidth:r.textStrokeWidth})})),t.restore()}drawTitle(){}}const Ro={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Io=Object.keys(Ro);function zo(t,e){return t-e}function Fo(t,e){if(s(e))return null;const i=t._adapter,{parser:n,round:o,isoWeekday:r}=t._parseOpts;let l=e;return"function"==typeof n&&(l=n(l)),a(l)||(l="string"==typeof n?i.parse(l,n):i.parse(l)),null===l?null:(o&&(l="week"!==o||!N(r)&&!0!==r?i.startOf(l,o):i.startOf(l,"isoWeek",r)),+l)}function Vo(t,e,i,s){const n=Io.length;for(let o=Io.indexOf(t);o<n-1;++o){const t=Ro[Io[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return Io[o]}return Io[n-1]}function Bo(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=et(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function Wo(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class No extends Js{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),s=this._adapter=new Rn._date(t.adapters.date);s.init(e),b(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Fo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:r}=this.getUserBounds();function l(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),r||isNaN(t.max)||(n=Math.max(n,t.max))}o&&r||(l(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(this.getMinMax(!1))),s=a(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=a(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=nt(s,n,this.max);return this._unit=e.unit||(i.autoSkip?Vo(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=Io.length-1;o>=Io.indexOf(i);o--){const i=Io[o];if(Ro[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return Io[i?Io.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Io.indexOf(t)+1,i=Io.length;e<i;++e)if(Ro[Io[e]].common)return Io[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),Wo(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=J(s,0,o),n=J(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||Vo(n.minUnit,e,i,this._getLabelCapacity(e)),a=l(s.ticks.stepSize,1),r="week"===o&&n.isoWeekday,h=N(r)||!0===r,c={};let d,u,f=e;if(h&&(f=+t.startOf(f,"isoWeek",r)),f=+t.startOf(f,h?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const g="data"===s.ticks.source&&this.getDataTimestamps();for(d=f,u=0;d<i;d=+t.add(d,a,o),u++)Bo(c,d,g);return d!==i&&"ticks"!==s.bounds&&1!==u||Bo(c,d,g),Object.keys(c).sort(zo).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.ticks.callback;if(o)return d(o,[t,e,i],this);const a=n.time.displayFormats,r=this._unit,l=this._majorUnit,h=r&&a[r],c=l&&a[l],u=i[e],f=l&&c&&u&&u.major;return this._adapter.format(t,s||(f?c:h))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=$(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,Wo(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(Fo(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return lt(t.sort(zo))}}function Ho(t,e,i){let s,n,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=it(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=it(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[l]));const h=n-s;return h?o+(a-o)*(e-s)/h:o}var jo=Object.freeze({__proto__:null,CategoryScale:class extends Js{static id="category";static defaults={ticks:{callback:po}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(s(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:J(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:go(i,t,l(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return po.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:bo,LogarithmicScale:ko,RadialLinearScale:Eo,TimeScale:No,TimeSeriesScale:class extends No{static id="timeseries";static defaults=No.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Ho(e,this.min),this._tableRange=Ho(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],r=s[o-1],l=s[o],Math.round((h+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Ho(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Ho(this._table,i*this._tableRange+this._minPos,!0)}}});const $o=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Yo=$o.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Uo(t){return $o[t%$o.length]}function Xo(t){return Yo[t%Yo.length]}function qo(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof jn?e=function(t,e){return t.backgroundColor=t.data.map((()=>Uo(e++))),e}(i,e):n instanceof $n?e=function(t,e){return t.backgroundColor=t.data.map((()=>Xo(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=Uo(e),t.backgroundColor=Xo(e),++e}(i,e))}}function Ko(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Go={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(Ko(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&Ko(o)))return;var a;const r=qo(t);s.forEach(r)}};function Zo(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function Jo(t){t.data.datasets.forEach((t=>{Zo(t)}))}var Qo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Jo(t);const n=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:a,indexAxis:r}=e,l=t.getDatasetMeta(o),h=a||e.data;if("y"===Pi([r,t.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const c=t.scales[l.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(n=J(it(e,o.axis,a).lo,0,i-1)),s=h?J(it(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(l,h);if(u<=(i.threshold||4*n))return void Zo(e);let f;switch(s(a)&&(e._data=h,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":f=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,g,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,x=m-h;for(s=h;s<m;s++)n+=t[s].x,o+=t[s].y;n/=x,o/=x;const b=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[p];for(u=f=-1,s=b;s<_;s++)f=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[l++]=d,p=g}return a[l++]=t[h],a}(h,d,u,n,i);break;case"min-max":f=function(t,e,i,n){let o,a,r,l,h,c,d,u,f,g,p=0,m=0;const x=[],b=e+i-1,_=t[e].x,y=t[b].x-_;for(o=e;o<e+i;++o){a=t[o],r=(a.x-_)/y*n,l=a.y;const e=0|r;if(e===h)l<f?(f=l,c=o):l>g&&(g=l,d=o),p=(m*p+a.x)/++m;else{const i=o-1;if(!s(c)&&!s(d)){const e=Math.min(c,d),s=Math.max(c,d);e!==u&&e!==i&&x.push({...t[e],x:p}),s!==u&&s!==i&&x.push({...t[s],x:p})}o>0&&i!==u&&x.push(t[i]),x.push(a),h=e,m=0,f=g=l,c=d=u=o}}return x}(h,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=f}))},destroy(t){Jo(t)}};function ta(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=G(n),o=G(o)),{property:t,start:n,end:o}}function ea(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function ia(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function sa(t,e){let i=[],s=!1;return n(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=ea(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new no({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function na(t){return t&&!1!==t.fill}function oa(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!a(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function aa(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=l(i&&i.target,i);void 0===s&&(s=!!e.backgroundColor);if(!1===s||null===s)return!1;if(!0===s)return"origin";return s}(t);if(o(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return a(n)&&Math.floor(n)===n?function(t,e,i,s){"-"!==t&&"+"!==t||(i=e+i);if(i===e||i<0||i>=s)return!1;return i}(s[0],e,n,i):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function ra(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=la(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function la(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],h=a[e.end][i];if(tt(n,s,h)){r=n===s,l=n===h;break}}return{first:r,last:l,point:s}}class ha{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:O},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function ca(t){const{chart:e,fill:i,line:s}=t;if(a(i))return function(t,e){const i=t.getDatasetMeta(e),s=i&&t.isDatasetVisible(e);return s?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(sa({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)ra(n,a[t],r)}return new no({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){const e=t.scale||{};if(e.getPointPositionForValue)return function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,a=s.reverse?e.max:e.min,r=function(t,e,i){let s;return s="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:o(t)?t.value:e.getBaseValue(),s}(i,e,a),l=[];if(s.grid.circular){const t=e.getPointPositionForValue(0,a);return new ha({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<n;++t)l.push(e.getPointPositionForValue(t,r));return l}(t);return function(t){const{scale:e={},fill:i}=t,s=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:o(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(a(s)){const t=e.isHorizontal();return{x:t?s:null,y:t?null:s}}return null}(t)}(t);return n instanceof ha?n:sa(n,s)}function da(t,e,i){const s=ca(e),{line:n,scale:o,axis:a}=e,r=n.options,l=r.fill,h=r.backgroundColor,{above:c=h,below:d=h}=l||{};s&&n.points.length&&(Ie(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(ua(t,s,a.top),fa(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),ua(t,s,a.bottom));fa(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),ze(t))}function ua(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,h=n[s],c=n[ea(s,l,n)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function fa(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=ea(s,r,n);const l=ta(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:n[s],end:n[r]});continue}const h=Ii(e,l);for(const e of h){const s=ta(i,o[e.start],o[e.end],e.loop),r=Ri(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:ia(l,s,"start",Math.max)},end:{[i]:ia(l,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:l,start:h,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,ga(t,a,d&&ta(n,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():pa(t,s,c,n);const e=!!s.pathSegment(t,l,{move:u,reverse:!0});f=u&&e,f||pa(t,s,h,n)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function ga(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function pa(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var ma={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof no&&(l={visible:t.isDatasetVisible(a),index:a,fill:aa(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=oa(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&da(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;na(i)&&da(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;na(s)&&"beforeDatasetDraw"===i.drawTime&&da(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const xa=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class ba extends Hs{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=d(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=Si(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=xa(i,n);let l,h;e.font=s.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,n,a,r)+10):(h=this.maxHeight,l=this._fitCols(o,s,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||l[l.length-1]+g+2*a>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),r[f]={left:0,top:u,row:d,width:g,height:s},l[l.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e)));return e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;"string"!=typeof e.text&&(s=_a(e,i));return s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>h&&(c+=d+a,l.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=Oi(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=ft(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=ft(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=ft(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=ft(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Ie(t,this),this._draw(),ze(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=ue.color,r=Oi(t.rtl,this.left,this.width),h=Si(o.font),{padding:c}=o,d=h.size,u=d/2;let f;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=h.string;const{boxWidth:g,boxHeight:p,itemHeight:m}=xa(o,d),x=this.isHorizontal(),b=this._computeTitleHeight();f=x?{x:ft(n,this.left+c,this.right-i[0]),y:this.top+c+b,line:0}:{x:this.left+c,y:ft(n,this.top+b+c,this.bottom-e[0].height),line:0},Ai(this.ctx,t.textDirection);const _=m+c;this.legendItems.forEach(((y,v)=>{s.strokeStyle=y.fontColor,s.fillStyle=y.fontColor;const M=s.measureText(y.text).width,w=r.textAlign(y.textAlign||(y.textAlign=o.textAlign)),k=g+u+M;let S=f.x,P=f.y;r.setWidth(this.width),x?v>0&&S+k+c>this.right&&(P=f.y+=_,f.line++,S=f.x=ft(n,this.left+c,this.right-i[f.line])):v>0&&P+_>this.bottom&&(S=f.x=S+e[f.line].width+c,f.line++,P=f.y=ft(n,this.top+b+c,this.bottom-e[f.line].height));if(function(t,e,i){if(isNaN(g)||g<=0||isNaN(p)||p<0)return;s.save();const n=l(i.lineWidth,1);if(s.fillStyle=l(i.fillStyle,a),s.lineCap=l(i.lineCap,"butt"),s.lineDashOffset=l(i.lineDashOffset,0),s.lineJoin=l(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=l(i.strokeStyle,a),s.setLineDash(l(i.lineDash,[])),o.usePointStyle){const a={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},l=r.xPlus(t,g/2);Ee(s,a,l,e+u,o.pointStyleWidth&&g)}else{const o=e+Math.max((d-p)/2,0),a=r.leftForLtr(t,g),l=wi(i.borderRadius);s.beginPath(),Object.values(l).some((t=>0!==t))?He(s,{x:a,y:o,w:g,h:p,radius:l}):s.rect(a,o,g,p),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(S),P,y),S=gt(w,S+g+u,x?S+k:this.right,t.rtl),function(t,e,i){Ne(s,i.text,t,e+m/2,h,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(S),P,y),x)f.x+=k+c;else if("string"!=typeof y.text){const t=h.lineHeight;f.y+=_a(y,t)+c}else f.y+=_})),Ti(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Si(e.font),s=ki(e.padding);if(!e.display)return;const n=Oi(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=s.top+r;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=ft(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+ft(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=ft(a,c,c+d);o.textAlign=n.textAlign(ut(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,Ne(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=Si(t.font),i=ki(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(tt(t,this.left,this.right)&&tt(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],tt(t,s.left,s.left+s.width)&&tt(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){if(("mousemove"===t||"mouseout"===t)&&(e.onHover||e.onLeave))return!0;if(e.onClick&&("click"===t||"mouseup"===t))return!0;return!1}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&d(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&d(e.onHover,[t,i,this],this)}else i&&d(e.onClick,[t,i,this],this);var s,n}}function _a(t,e){return e*(t.text?t.text.length:0)}var ya={id:"legend",_element:ba,start(t,e,i){const s=t.legend=new ba({ctx:t.ctx,options:i,chart:t});as.configure(t,s,i),as.addBox(t,s)},stop(t){as.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;as.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=ki(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:s||l.pointStyle,rotation:l.rotation,textAlign:n||l.textAlign,borderRadius:a&&(r||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class va extends Hs{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=n(i.text)?i.text.length:1;this._padding=ki(i.padding);const o=s*Si(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,l,h,c=0;return this.isHorizontal()?(l=ft(a,i,n),h=e+t,r=n-i):("left"===o.position?(l=i+t,h=ft(a,s,e),c=-.5*C):(l=n-t,h=ft(a,e,s),c=.5*C),r=s-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Si(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);Ne(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:ut(e.align),textBaseline:"middle",translation:[n,o]})}}var Ma={id:"title",_element:va,start(t,e,i){!function(t,e){const i=new va({ctx:t.ctx,options:e,chart:t});as.configure(t,i,e),as.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;as.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;as.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const wa=new WeakMap;var ka={id:"subtitle",start(t,e,i){const s=new va({ctx:t.ctx,options:i,chart:t});as.configure(t,s,i),as.addBox(t,s),wa.set(t,s)},stop(t){as.removeBox(t,wa.get(t)),wa.delete(t)},beforeUpdate(t,e,i){const s=wa.get(t);as.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Sa={average(t){if(!t.length)return!1;let e,i,s=new Set,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s.add(t.x),n+=t.y,++o}}return{x:[...s].reduce(((t,e)=>t+e))/s.size,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=q(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function Pa(t,e){return e&&(n(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Da(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Ca(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function Oa(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=Si(e.bodyFont),h=Si(e.titleFont),c=Si(e.footerFont),d=o.length,f=n.length,g=s.length,p=ki(e.padding);let m=p.height,x=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);if(b+=t.beforeBody.length+t.afterBody.length,d&&(m+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b){m+=g*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(b-g)*l.lineHeight+(b-1)*e.bodySpacing}f&&(m+=e.footerMarginTop+f*c.lineHeight+(f-1)*e.footerSpacing);let _=0;const y=function(t){x=Math.max(x,i.measureText(t).width+_)};return i.save(),i.font=h.string,u(t.title,y),i.font=l.string,u(t.beforeBody.concat(t.afterBody),y),_=e.displayColors?a+2+e.boxPadding:0,u(s,(t=>{u(t.before,y),u(t.lines,y),u(t.after,y)})),_=0,i.font=c.string,u(t.footer,y),i.restore(),x+=p.width,{width:x,height:m}}function Aa(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===s?h=n<=(r+l)/2?"left":"right":n<=o/2?h="left":n>=a-o/2&&(h="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function Ta(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Aa(t,e,i,s),yAlign:s}}function La(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,h=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=wi(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const p=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,l,h);return"center"===l?"left"===r?g+=h:"right"===r&&(g-=h):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,f)+n),{x:J(g,0,s.width-e.width),y:J(p,0,s.height-e.height)}}function Ea(t,e,i){const s=ki(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function Ra(t){return Pa([],Da(t))}function Ia(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const za={beforeTitle:e,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:e,beforeBody:e,beforeLabel:e,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return s(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:e,afterBody:e,beforeFooter:e,footer:e,afterFooter:e};function Fa(t,e,i,s){const n=t[e].call(i,s);return void 0===n?za[e].call(i,s):n}class Va extends Hs{static positioners=Sa;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Os(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),e=this,i=this._tooltipItems,Ci(t,{tooltip:e,tooltipItems:i,type:"tooltip"})));var t,e,i}getTitle(t,e){const{callbacks:i}=e,s=Fa(i,"beforeTitle",this,t),n=Fa(i,"title",this,t),o=Fa(i,"afterTitle",this,t);let a=[];return a=Pa(a,Da(s)),a=Pa(a,Da(n)),a=Pa(a,Da(o)),a}getBeforeBody(t,e){return Ra(Fa(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,s=[];return u(t,(t=>{const e={before:[],lines:[],after:[]},n=Ia(i,t);Pa(e.before,Da(Fa(n,"beforeLabel",this,t))),Pa(e.lines,Fa(n,"label",this,t)),Pa(e.after,Da(Fa(n,"afterLabel",this,t))),s.push(e)})),s}getAfterBody(t,e){return Ra(Fa(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=Fa(i,"beforeFooter",this,t),n=Fa(i,"footer",this,t),o=Fa(i,"afterFooter",this,t);let a=[];return a=Pa(a,Da(s)),a=Pa(a,Da(n)),a=Pa(a,Da(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(Ca(this.chart,e[a]));return t.filter&&(l=l.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(l=l.sort(((e,s)=>t.itemSort(e,s,i)))),u(l,(e=>{const i=Ia(t.callbacks,e);s.push(Fa(i,"labelColor",this,e)),n.push(Fa(i,"labelPointStyle",this,e)),o.push(Fa(i,"labelTextColor",this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=Sa[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=Oa(this,i),a=Object.assign({},t,e),r=Ta(this.chart,i,a),l=La(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=wi(a),{x:d,y:u}=t,{width:f,height:g}=e;let p,m,x,b,_,y;return"center"===n?(_=u+g/2,"left"===s?(p=d,m=p-o,b=_+o,y=_-o):(p=d+f,m=p+o,b=_-o,y=_+o),x=p):(m="left"===s?d+Math.max(r,h)+o:"right"===s?d+f-Math.max(l,c)-o:this.caretX,"top"===n?(b=u,_=b-o,p=m-o,x=m+o):(b=u+g,_=b+o,p=m+o,x=m-o),y=b),{x1:p,x2:m,x3:x,y1:b,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const l=Oi(i.rtl,this.x,this.width);for(t.x=Ea(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Si(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const a=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:l,boxWidth:h}=n,c=Si(n.bodyFont),d=Ea(this,"left",n),u=s.x(d),f=l<c.lineHeight?(c.lineHeight-l)/2:0,g=e.y+f;if(n.usePointStyle){const e={radius:Math.min(h,l)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=s.leftForLtr(u,h)+h/2,o=g+l/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,Le(t,e,i,o),t.strokeStyle=a.borderColor,t.fillStyle=a.backgroundColor,Le(t,e,i,o)}else{t.lineWidth=o(a.borderWidth)?Math.max(...Object.values(a.borderWidth)):a.borderWidth||1,t.strokeStyle=a.borderColor,t.setLineDash(a.borderDash||[]),t.lineDashOffset=a.borderDashOffset||0;const e=s.leftForLtr(u,h),i=s.leftForLtr(s.xPlus(u,1),h-2),r=wi(a.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,He(t,{x:e,y:g,w:h,h:l,radius:r}),t.fill(),t.stroke(),t.fillStyle=a.backgroundColor,t.beginPath(),He(t,{x:i,y:g+1,w:h-2,h:l-2,radius:r}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,g,h,l),t.strokeRect(e,g,h,l),t.fillStyle=a.backgroundColor,t.fillRect(i,g+1,h-2,l-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:h}=i,c=Si(i.bodyFont);let d=c.lineHeight,f=0;const g=Oi(i.rtl,this.x,this.width),p=function(i){e.fillText(i,g.x(t.x+f),t.y+d/2),t.y+=d+n},m=g.textAlign(o);let x,b,_,y,v,M,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Ea(this,m,i),e.fillStyle=i.bodyColor,u(this.beforeBody,p),f=a&&"right"!==m?"center"===o?l/2+h:l+2+h:0,y=0,M=s.length;y<M;++y){for(x=s[y],b=this.labelTextColors[y],e.fillStyle=b,u(x.before,p),_=x.lines,a&&_.length&&(this._drawColorBox(e,t,y,g,i),d=Math.max(c.lineHeight,r)),v=0,w=_.length;v<w;++v)p(_[v]),d=c.lineHeight;u(x.after,p)}f=0,d=c.lineHeight,u(this.afterBody,p),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=Oi(i.rtl,this.x,this.width);for(t.x=Ea(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=Si(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=wi(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+l,r+h-f),e.quadraticCurveTo(a+l,r+h,a+l-f,r+h),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+h),e.quadraticCurveTo(a,r+h,a,r+h-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=Sa[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=Oa(this,t),a=Object.assign({},i,this._size),r=Ta(e,t,a),l=La(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=ki(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),Ai(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),Ti(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!f(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!f(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e.filter((t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index)));const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=Sa[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var Ba={id:"tooltip",_element:Va,positioners:Sa,afterInit(t,e,i){i&&(t.tooltip=new Va({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:za},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]};return An.register(Yn,jo,fo,t),An.helpers={...Wi},An._adapters=Rn,An.Animation=Cs,An.Animations=Os,An.animator=bt,An.controllers=en.controllers.items,An.DatasetController=Ns,An.Element=Hs,An.elements=fo,An.Interaction=Xi,An.layouts=as,An.platforms=Ss,An.Scale=Js,An.Ticks=ae,Object.assign(An,Yn,jo,fo,t,Ss),An.Chart=An,"undefined"!=typeof window&&(window.Chart=An),An}));
//# sourceMappingURL=chart.umd.js.map
</file>

<file path="public/js/sidebarLinkDropdownScript.js">
document.addEventListener("DOMContentLoaded", function () {
    // Get the current URL
    var currentUrl = window.location.href;
    // Get all dropdown buttons
    var dropdownButtons = document.querySelectorAll(".relative button");
    // Loop through each dropdown button
    dropdownButtons.forEach(function (button) {
        // Get the dropdown links
        var dropdownLinks = button.nextElementSibling.querySelectorAll("a");
        // Loop through each dropdown link
        dropdownLinks.forEach(function (link) {
            // Check if the current URL matches or starts with the link's href
            if (currentUrl === link.href || currentUrl.startsWith(link.href)) {
                // Open the dropdown
                button.click();
            }
        });
    });
});
</file>

<file path="public/robots.txt">
User-agent: *
Disallow:
</file>

<file path="READ ME.txt">
Ubraha anay ni bag-o mo e serve ang laravel project

- Kadto anay sa C:\xampp\php\php.ini or kung diin mo gin install imo xampp
- E search ni ang duwa kag kwaa ang ;
 ;extension=gd 
 ;extension=zip

E RUN SA TERMINAL (pasunod)
 - composer install
 - npm install
 - cp .env.example .env
 - php artisan key:generate
 - php artisan migrate (type lang yes kung mangkuton ka nga ma ubra sang database)
 - php artisan db:seed
 - php artisan storage:link
 - php artisan serve
 - npm run build
</file>

<file path="README.md">
<p align="center" style="width:40dvw;border-radius:40%;">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSAt-FOR-ywAer4Bp-DiFUjEnT88WnhJckltw&s" style="width:40dvw;border-radius:40%;" alt="FCU">
</p>

## About Our Asset Management System

This is an asset management system designed for Filamer Christian University, created as a capstone project. The system is built using Laravel, a web application framework known for its expressive, elegant syntax and powerful features.

### Key Features

- **Simple and User-Friendly Interface**: Streamlines the management of tangible assets.
- **Efficient Asset Tracking**: Easily monitor and manage assets across the university.
- **Customizable**: Tailored to meet the specific needs of Filamer Christian University.

## Learning Laravel

Laravel has extensive and thorough [documentation](https://laravel.com/docs) and video tutorial libraries, making it easy to get started with the framework.

- **Laravel Documentation**: Comprehensive guides covering all aspects of the framework.
- **Laravel Bootcamp**: A hands-on tour of building a modern Laravel application from scratch.
- **Laracasts**: Thousands of video tutorials on Laravel, modern PHP, unit testing, and JavaScript.

## System Overview

Our asset management system leverages Laravel's powerful features, including:

- **Simple, Fast Routing Engine**: Efficient routing for seamless navigation.
- **Powerful Dependency Injection Container**: Simplifies dependency management.
- **Expressive Database ORM**: Intuitive database interactions.
- **Database Agnostic Schema Migrations**: Easy database schema management.
- **Robust Background Job Processing**: Handles background tasks efficiently.

## Contributing

This project was created as a capstone subject and is intended for educational purposes. However, if you wish to contribute or extend the functionality of this system, you can follow these steps:

1. **Clone the Repository**: Clone this repository to your local machine.
2. **Set Up the Environment**: Follow the Laravel setup instructions to configure your development environment.
3. **Review the Code**: Understand the existing codebase and identify areas for improvement.
4. **Make Contributions**: Submit pull requests with your changes.

## Security Vulnerabilities

If you discover any security vulnerabilities within the system, please report them to the project maintainers.

## License

This project is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

## Acknowledgments

Special thanks to the Laravel community and the contributors who have made this framework so powerful and accessible.
</file>

<file path="resources/css/app.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="resources/js/app.js">
import './bootstrap';
import Chart from "chart.js/auto";
</file>

<file path="resources/js/bootstrap.js">
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// import Pusher from 'pusher-js';
// window.Pusher = Pusher;

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: import.meta.env.VITE_PUSHER_APP_KEY,
//     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER ?? 'mt1',
//     wsHost: import.meta.env.VITE_PUSHER_HOST ? import.meta.env.VITE_PUSHER_HOST : `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
//     wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
//     wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
//     forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
//     enabledTransports: ['ws', 'wss'],
// });
</file>

<file path="resources/views/components/add-item-modal.blade.php">
@props(['title', 'id', 'route', 'field'])

<div id="{{ $id }}" tabindex="-1" aria-hidden="true" class="fixed inset-0 z-50 hidden overflow-y-auto overflow-x-hidden bg-gray-900/50 backdrop-blur-sm p-4 flex items-center justify-center">
    <div class="relative w-full max-w-md">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 border-b rounded-t">
                <h3 class="text-xl font-semibold text-gray-900">
                    {{ $title }}
                </h3>
                <button type="button" onclick="document.getElementById('{{ $id }}').classList.add('hidden')" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>  
                </button>
            </div>
            <!-- Modal body -->
            <form action="{{ $route }}" method="POST">
                @csrf
                <div class="p-6 space-y-6">
                    <div>
                        <label for="{{ $field }}" class="block mb-2 text-sm font-medium text-gray-900">Name</label>
                        <input type="text" name="{{ $field }}" id="{{ $field }}" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required>
                    </div>
                </div>
                <!-- Modal footer -->
                <div class="flex items-center justify-end p-6 space-x-2 border-t border-gray-200 rounded-b">
                    <button type="button" onclick="document.getElementById('{{ $id }}').classList.add('hidden')" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10">Cancel</button>
                    <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">Add</button>
                </div>
            </form>
        </div>
    </div>
</div>
</file>

<file path="resources/views/components/monthly-supplier-report.blade.php">
<div class="monthly-supplier-report">
    <div class="text-center mb-5">
        <h2 class="text-2xl font-bold">FILAMER CHRISTIAN UNIVERSITY, INC</h2>
        <h3 class="text-xl font-bold mb-3 segoe">Roxas Avenue, Roxas City</h3>
        <h3 class="text-xl font-bold segoe">OFFICE SUPPLIES INVENTORY</h3>
        <h4 class="text-lg font-bold segoe">
            {{ $startDate }} - {{ $endDate }}
        </h4>
    </div>

    <table class="w-full border-collapse">
        <thead>
            <tr>
                <th class="border text-left p-2">Unique Tag</th>
                <th class="border text-left p-2">Items & Specs</th>
                <th class="border text-left p-2">Brand</th>
                <th class="border text-left p-2">Quantity</th>
                <th class="border text-left p-2">Unit Price</th>
                <th class="border text-left p-2">Total Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach($inventories as $inventory)
                <tr>
                    <td class="border p-2">{{ $inventory->unique_tag }}</td>
                    <td class="border p-2">{{ $inventory->items_specs }}</td>
                    <td class="border p-2">{{ $inventory->brand->brand }}</td>
                    <td class="border p-2">{{ $inventory->quantity }}</td>
                    <td class="border p-2">₱ {{ number_format($inventory->unit_price, 2) }}</td>
                    <td class="border p-2">
                        ₱ {{ number_format($inventory->quantity * $inventory->unit_price, 2) }}
                    </td>
                </tr>
            @endforeach
        </tbody>
    </table>

    <div class="mt-4 segoe font-bold text-right">Total Value: <span>₱ {{ number_format($totalValue, 2) }}</span>
    </div>

    <div class="mt-4">
        <h4 class="font-bold segoe">SHERALYN A. DE LEON</h4>
        <p class="italic">Acting - Property Custodian</p>
    </div>
</div>
</file>

<file path="resources/views/fcu-ams/alert/expiring-leases.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex  py-5 px-4 m-3 shadow-md rounded-md">
            <div class="flex items-center justify-between w-full">
                <a href="{{ route('alerts.index') }}"
                    class="mr-4 hover:bg-gray-100 p-2 rounded-full transition">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
                <h1 class="text-3xl font-semibold text-gray-800">Expiring Leases</h1>
                <a href="{{ route('alerts.index') }}"
                    class="mr-4 hover:bg-gray-100 p-2 rounded-full transition invisible">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
            </div>
        </nav>

        <div class="bg-white p-6 m-3 rounded-md shadow-md">
            @if($expiringLeases->isEmpty())
                <div class="text-center py-8">
                    <p class="text-gray-500 text-lg">No leases expiring within 7 days.</p>
                </div>
            @else
                <div class="grid md:grid-cols-2 gap-8">
                    @foreach($expiringLeases as $lease)
                        <div class="bg-orange-50 p-6 rounded-lg border border-orange-200 relative">
                            <div class="absolute top-4 right-4">
                                <a href="{{ route('lease.show', $lease->id) }}"
                                    class="text-orange-600 hover:text-orange-800">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z">
                                        </path>
                                    </svg>
                                </a>
                            </div>
                            <h2 class="text-2xl font-bold mb-5 pb-3 border-b border-orange-300 text-gray-700">
                                {{ $lease->customer }}
                            </h2>
                            <div class="space-y-4">
                                <div class="flex justify-between items-center border-b border-orange-200 pb-2">
                                    <label class="font-semibold text-gray-600 w-1/3">Assets Count:</label>
                                    <p class="text-gray-800 font-medium w-2/3 text-right">
                                        {{ $lease->assets->count() }} {{ Str::plural('asset', $lease->assets->count()) }}
                                    </p>
                                </div>
                                <div class="flex justify-between items-center border-b border-orange-200 pb-2">
                                    <label class="font-semibold text-gray-600 w-1/3">Lease Date:</label>
                                    <p class="text-gray-800 font-medium w-2/3 text-right">
                                        {{ \Carbon\Carbon::parse($lease->lease_date)->format('F d, Y') }}
                                    </p>
                                </div>
                                <div class="flex justify-between items-center">
                                    <label class="font-semibold text-gray-600 w-1/3">Expiration:</label>
                                    <p class="text-gray-800 font-medium w-2/3 text-right">
                                        {{ \Carbon\Carbon::parse($lease->lease_expiration)->format('F d, Y') }}
                                        <span class="text-orange-600 ml-2">
                                            ({{ \Carbon\Carbon::parse($lease->lease_expiration)->diffForHumans() }})
                                        </span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    @endforeach
                </div>

                <!-- Pagination -->
                <div class="mt-6">
                    {{ $expiringLeases->links() }}
                </div>
            @endif
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/alert/maintenance.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <div class="flex items-center">
                <a href="{{ route('alerts.index') }}"
                    class="mr-4 hover:bg-gray-100 p-2 rounded-full transition">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
                <h1 class="text-3xl font-semibold text-gray-800">Overdue Assets</h1>
            </div>
        </nav>

        <div class="bg-white p-6 m-3 rounded-md shadow-md">
            <div class="grid md:grid-cols-2 gap-8">
                @foreach($pastDueAssets as $asset)
                    <div class="bg-slate-50 p-6 rounded-lg border border-slate-200 relative">
                        <div class="absolute top-4 right-4">
                            <a href="{{ route('asset.show', $asset->id) }}"
                                class="text-red-600 hover:text-red-800">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z">
                                    </path>
                                </svg>
                            </a>
                        </div>
                        <h2 class="text-2xl font-bold mb-5 pb-3 border-b border-slate-300 text-gray-700">
                            {{ $asset->asset_tag_id }}</h2>
                        <div class="space-y-4">
                            <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                                <label class="font-semibold text-gray-600 w-1/3">Brand:</label>
                                <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->brand->brand }}</p>
                            </div>
                            <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                                <label class="font-semibold text-gray-600 w-1/3">Model:</label>
                                <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->model }}</p>
                            </div>
                            <div class="flex justify-between items-center">
                                <label class="font-semibold text-gray-600 w-1/3">Maintenance End Date:</label>
                                <p class="text-gray-800 font-medium w-2/3 text-right">
                                    {{ \Carbon\Carbon::parse($asset->maintenance_end_date)->format('F d, Y') }}
                                    <span class="text-red-500 ml-2">
                                        ({{ \Carbon\Carbon::parse($asset->maintenance_end_date)->diffForHumans() }})
                                    </span>
                                </p>
                            </div>
                        </div>
                    </div>
                @endforeach
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/alert/pending-requests.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex  py-5 px-4 m-3 shadow-md rounded-md">
            <div class="flex items-center justify-between w-full">
                <a href="{{ route('alerts.index') }}"
                    class="mr-4 hover:bg-gray-100 p-2 rounded-full transition">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
                <h1 class="text-3xl font-semibold text-gray-800">Pending Supply Requests</h1>
                <a href="{{ route('alerts.index') }}"
                    class="mr-4 hover:bg-gray-100 p-2 rounded-full transition invisible">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
            </div>
        </nav>

        <div class="bg-white p-6 m-3 rounded-md shadow-md">
            @if($pendingRequests->isEmpty())
                <div class="text-center py-8">
                    <p class="text-gray-500 text-lg">No pending supply requests found.</p>
                </div>
            @else
                <div class="grid md:grid-cols-2 gap-8">
                    @foreach($pendingRequests as $request)
                        <div class="bg-yellow-50 p-6 rounded-lg border border-yellow-200 relative">
                            <div class="absolute top-4 right-4">
                                <a href="{{ route('inventory.supply-request.details', ['request_group_id' => $request->request_group_id]) }}"
                                    class="text-yellow-600 hover:text-yellow-800">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z">
                                        </path>
                                    </svg>
                                </a>
                            </div>
                            <h2 class="text-2xl font-bold mb-5 pb-3 border-b border-yellow-300 text-gray-700">
                                {{ $request->requester }}
                            </h2>
                            <div class="space-y-4">
                                <div class="flex justify-between items-center border-b border-yellow-200 pb-2">
                                    <label class="font-semibold text-gray-600 w-1/3">Department:</label>
                                    <p class="text-gray-800 font-medium w-2/3 text-right">{{ $request->department->department }}</p>
                                </div>
                                <div class="flex justify-between items-center border-b border-yellow-200 pb-2">
                                    <label class="font-semibold text-gray-600 w-1/3">Items Count:</label>
                                    <p class="text-gray-800 font-medium w-2/3 text-right">
                                        {{ $request->items_count }} {{ Str::plural('item', $request->items_count) }}
                                    </p>
                                </div>
                                <div class="flex justify-between items-center">
                                    <label class="font-semibold text-gray-600 w-1/3">Request Date:</label>
                                    <p class="text-gray-800 font-medium w-2/3 text-right">
                                        {{ \Carbon\Carbon::parse($request->request_date)->format('F d, Y') }}
                                    </p>
                                </div>
                            </div>
                        </div>
                    @endforeach
                </div>

                <!-- Pagination -->
                <div class="mt-6">
                    {{ $pendingRequests->links() }}
                </div>
            @endif
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/alert/show.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <div class="flex items-center">
                <a href="javascript:void(0);" onclick="history.back();"
                    class="mr-4 hover:bg-gray-100 p-2 rounded-full transition">
                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                </a>
                <h1 class="text-3xl font-semibold text-gray-800">Asset Details</h1>
            </div>
        </nav>

        <div class="bg-white p-6 m-3 rounded-md shadow-md">
            <div class="grid md:grid-cols-2 gap-8">
                <div class="bg-slate-50 p-6 rounded-lg border border-slate-200">
                    <h2 class="text-2xl font-bold mb-5 pb-3 border-b border-slate-300 text-gray-700">Asset Information
                    </h2>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Asset Tag ID:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->asset_tag_id }}</p>
                        </div>
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Brand:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->brand->brand }}</p>
                        </div>
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Model:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->model }}</p>
                        </div>
                        <div class="flex justify-between items-center">
                            <label class="font-semibold text-gray-600 w-1/3">Serial Number:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->serial_number }}</p>
                        </div>
                    </div>
                </div>

                <div class="bg-slate-50 p-6 rounded-lg border border-slate-200">
                    <h2 class="text-2xl font-bold mb-5 pb-3 border-b border-slate-300 text-gray-700">Additional Details
                    </h2>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Site:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->site->site }}</p>
                        </div>
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Location:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->location->location }}
                            </p>
                        </div>
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Category:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">{{ $asset->category->category }}
                            </p>
                        </div>
                        <div class="flex justify-between items-center border-b border-slate-200 pb-2">
                            <label class="font-semibold text-gray-600 w-1/3">Department:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">
                                {{ $asset->department->department }}</p>
                        </div>
                        <div class="flex justify-between items-center">
                            <label class="font-semibold text-gray-600 w-1/3">Maintenance End Date:</label>
                            <p class="text-gray-800 font-medium w-2/3 text-right">
                                {{ \Carbon\Carbon::parse($asset->maintenance_end_date)->format('F d, Y') }}
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Maintenance Status Section -->
            <div class="mt-8 bg-slate-50 p-6 rounded-lg border border-slate-200">
                <h2 class="text-2xl font-bold mb-5 pb-3 border-b border-slate-300 text-gray-700">Maintenance Status</h2>
                <div class="flex items-center">
                    @php
                        $maintenanceEndDate = \Carbon\Carbon::parse($asset->maintenance_end_date);
                        $isOverdue = $maintenanceEndDate->isPast();
                    @endphp
                    <div class="w-full">
                        <div class="flex justify-between items-center mb-2">
                            <span class="font-semibold text-gray-600">
                                {{ $isOverdue ? 'Maintenance Overdue' : 'Maintenance Status' }}
                            </span>
                            <span
                                class="{{ $isOverdue ? 'text-red-600' : 'text-green-600' }} font-bold">
                                {{ $isOverdue ? 'Overdue' : 'Current' }}
                            </span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2.5">
                            <div class="{{ $isOverdue ? 'bg-red-500' : 'bg-green-500' }} h-2.5 rounded-full"
                                style="width: {{ $isOverdue ? '100%' : '100%' }}">
                            </div>
                        </div>
                        <div class="text-sm text-gray-500 mt-2">
                            @if($isOverdue)
                                Maintenance was due on
                                {{ $maintenanceEndDate->format('F d, Y') }}
                            @else
                                Maintenance is current
                            @endif
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/old-supply-request-details.blade.php">
@extends('layouts.layout')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">


@section('content')
<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <!-- Navigation Bar -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <a href="javascript:history.back()"
            class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
            </a>
            <h1 class="my-auto text-3xl">Supply Request Details</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="m-3">
            <!-- Request Header -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-4">
                <div class="flex justify-between items-start">
                    <div>
                        <h2 class="text-xl font-semibold text-gray-800">Request #{{ $request->request_id }}</h2>
                        <div class="mt-2 space-y-1">
                            <p class="text-gray-600">
                                <span class="font-medium">Requester:</span> 
                                {{ $request->requester }}
                            </p>
                            <p class="text-gray-600">
                                <span class="font-medium">Department:</span> 
                                {{ $request->department->department }}
                            </p>
                            <p class="text-gray-600">
                                <span class="font-medium">Date Requested:</span> 
                                {{ \Carbon\Carbon::parse($request->request_date)->format('F d, Y') }}
                            </p>
                            <p class="text-gray-600">
                                <span class="font-medium">Notes:</span> 
                                {{ $request->notes }}
                            </p>
                        </div>
                    </div>
                    <div class="flex flex-col items-end">
                        <span class="px-4 py-2 rounded-full text-sm font-semibold
                            {{ $request->status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                               ($request->status === 'approved' ? 'bg-green-100 text-green-800' : 
                               'bg-red-100 text-red-800') }}">
                            {{ ucfirst($request->status) }}
                        </span>
                        @if($request->status === 'pending')
                            <div class="mt-4 space-x-2">
                                <button onclick="approveRequest('{{ $request->request_id }}')" 
                                        class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
                                    Approve
                                </button>
                                <button onclick="rejectRequest('{{ $request->request_id }}')"
                                        class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                                    Reject
                                </button>
                            </div>
                        @endif
                    </div>
                </div>
            </div>

            <!-- Requested Items -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-800">Requested Items</h3>
                </div>
                <div class="divide-y divide-gray-200">
                    @foreach($items as $item)
                        <div class="p-6 hover:bg-gray-50">
                            <div class="flex items-center justify-between">
                                <div class="flex-1">
                                    <h4 class="text-lg font-medium text-gray-900">
                                        {{ $item->inventory->brand->brand }} {{ $item->inventory->items_specs }}
                                    </h4>
                                    <div class="mt-1">
                                        <span class="text-sm text-gray-500">Quantity: </span>
                                        <span class="text-sm font-medium text-gray-900">{{ $item->quantity }}</span>
                                    </div>
                                </div>
                                <div class="ml-4">
                                    <span class="text-sm font-medium text-gray-500">Stock Available:</span>
                                    <span class="ml-1 text-sm font-semibold {{ $item->inventory->quantity > 0 ? 'text-green-600' : 'text-red-600' }}">
                                        {{ $item->inventory->quantity }}
                                    </span>
                                </div>
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
        </div>
    </div>
</div>

@push('scripts')
<script>
    function approveRequest(requestId) {
        if (confirm('Are you sure you want to approve this request?')) {
            fetch(`/inventory/supply-request/${requestId}/approve`, {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token() }}',
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message || 'Error approving request');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error approving request');
            });
        }
    }

    function rejectRequest(requestId) {
        if (confirm('Are you sure you want to reject this request?')) {
            fetch(`/inventory/supply-request/${requestId}/reject`, {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': '{{ csrf_token() }}',
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert(data.message || 'Error rejecting request');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error rejecting request');
            });
        }
    }
</script>
@endpush
</file>

<file path="resources/views/fcu-ams/inventory/updateStock.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <!-- Header -->
        <div class="bg-white m-3 shadow-md rounded-md 2xl:max-w-7xl 2xl:mx-auto">
            <div class="px-4 sm:px-6 lg:px-8 py-4">
                <div class="flex items-center justify-between">
                    <a href="{{ route('inventory.list') }}" class="flex items-center text-gray-700 hover:text-gray-900">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                    </a>
                    <h1 class="text-2xl font-semibold text-gray-900 mx-auto">Edit Item</h1>
                    <div class="w-6 h-6"></div>
                </div>
            </div>
        </div>

        <!-- Main content -->
        <div class="m-3 2xl:max-w-7xl 2xl:mx-auto mb-6">
            <div class="mb-3">
                @include('layouts.messageWithoutTimerForError')
            </div>

            <!-- Form -->
            <div class="bg-white shadow rounded-lg">
                <form method="POST" enctype="multipart/form-data" action="{{ route('inventory.stock.in.update', ['id' => $inventory->id]) }}" class="space-y-6 p-6">
                    @csrf
                    <input type="hidden" name="id" value="{{ $inventory->id }}">

                    <!-- Item Image -->
                    <div class="space-y-1">
                        <label for="stock_image" class="block text-sm font-medium text-gray-700">Item Image</label>
                        <div class="mt-1 flex items-center">
                            <div class="flex-shrink-0 h-32 w-32 border rounded-lg overflow-hidden bg-gray-100">
                                <img id="image_preview" src="{{ asset($inventory->stock_image) }}" class="h-full w-full object-cover {{ $inventory->stock_image ? '' : 'hidden' }}">
                                <div id="image_placeholder" class="h-32 w-32 flex items-center justify-center text-gray-400 {{ $inventory->stock_image ? 'hidden' : '' }}">
                                    <svg class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                </div>
                            </div>
                            <div class="ml-2">
                                <div class="relative">
                                    <input type="file" id="stock_image" name="stock_image" class="hidden" accept="image/*">
                                    <label for="stock_image"
                                        class="cursor-pointer bg-white py-2 px-3 border-2 border-slate-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Choose Image
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                        <!-- Brand -->
                        <div>
                            <label for="brand_id" class="block text-sm font-medium text-gray-700">Brand</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="brand_id" name="brand_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($brands as $brand)
                                        <option value="{{ $brand->id }}" {{ $brand->id == $inventory->brand_id ? 'selected' : '' }}>
                                            {{ $brand->brand }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-brand-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Item/Specs -->
                        <div>
                            <label for="items_specs" class="block text-sm font-medium text-gray-700">Item/Specs</label>
                            <div class="mt-1">
                                <input type="text" id="items_specs" name="items_specs" required
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm rounded-md"
                                    value="{{ $inventory->items_specs }}">
                            </div>
                        </div>

                        <!-- Unit -->
                        <div>
                            <label for="unit_id" class="block text-sm font-medium text-gray-700">Unit</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="unit_id" name="unit_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($units as $unit)
                                        <option value="{{ $unit->id }}" {{ $unit->id == $inventory->unit_id ? 'selected' : '' }}>
                                            {{ $unit->unit }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-unit-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Quantity -->
                        <div>
                            <label for="quantity" class="block text-sm font-medium text-gray-700">Quantity</label>
                            <div class="mt-1">
                                <input type="number" id="quantity" name="quantity" required min="0"
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm rounded-md"
                                    value="{{ $inventory->quantity }}">
                            </div>
                        </div>

                        <!-- Unit Price -->
                        <div>
                            <label for="unit_price" class="block text-sm font-medium text-gray-700">Unit Price</label>
                            <div class="mt-1">
                                <input type="number" id="unit_price" name="unit_price" required min="0"
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm rounded-md"
                                    value="{{ $inventory->unit_price }}">
                            </div>
                        </div>

                        <!-- Supplier -->
                        <div>
                            <label for="supplier_id" class="block text-sm font-medium text-gray-700">Supplier</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="supplier_id" name="supplier_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($suppliers as $supplier)
                                        <option value="{{ $supplier->id }}" {{ $supplier->id == $inventory->supplier_id ? 'selected' : '' }}>
                                            {{ $supplier->supplier }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-supplier-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="flex justify-end space-x-3 pt-6 border-t">
                        <a href="{{ route('inventory.list') }}"
                            class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Cancel
                        </a>
                        <button type="submit"
                            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Update Item
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<div class="modal" id="brand-modal-wrapper">
    <x-add-item-modal 
        title="Add New Brand"
        id="add-brand-modal"
        route="{{ route('brand.add') }}"
        field="brand"
    />
</div>

<div class="modal" id="unit-modal-wrapper">
    <x-add-item-modal 
        title="Add New Unit"
        id="add-unit-modal"
        route="{{ route('unit.add') }}"
        field="unit"
    />
</div>

<div class="modal" id="supplier-modal-wrapper">
    <x-add-item-modal 
        title="Add New Supplier"
        id="add-supplier-modal"
        route="{{ route('supplier.add') }}"
        field="supplier"
    />
</div>

@push('scripts')
<script>
    // Add CSRF token to the page
    document.head.innerHTML += `<meta name="csrf-token" content="{{ csrf_token() }}">`;
    
    // Image preview functionality
    document.getElementById('stock_image').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            const preview = document.getElementById('image_preview');
            const placeholder = document.getElementById('image_placeholder');
            
            reader.onload = function(e) {
                preview.src = e.target.result;
                preview.classList.remove('hidden');
                placeholder.classList.add('hidden');
            };
            
            reader.readAsDataURL(file);
        }
    });

    // Function to refresh select options after adding new item
    function refreshSelectOptions(selectId, route) {
        fetch(route)
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById(selectId);
                const currentValue = select.value;
                select.innerHTML = '';
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item[selectId.replace('_id', '')];
                    if (item.id == currentValue) {
                        option.selected = true;
                    }
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error refreshing options:', error);
            });
    }

    // Add event listeners for modal forms
    document.addEventListener('DOMContentLoaded', function() {
        // Get all forms inside modals
        const forms = document.querySelectorAll('.modal form');
        console.log('Found forms:', forms.length);

        forms.forEach(form => {
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Form submitted');

                const formData = new FormData(this);
                const modalId = this.closest('.modal').querySelector('[id]').id;
                const selectId = modalId.replace('add-', '').replace('-modal', '_id');
                
                console.log('Modal ID:', modalId);
                console.log('Select ID:', selectId);

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        headers: {
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json'
                        },
                        body: formData
                    });

                    const data = await response.json();
                    console.log('Response:', data);

                    if (data.success) {
                        // Refresh the corresponding select options
                        await refreshSelectOptions(selectId, `/${selectId.replace('_id', '')}/list`);
                        
                        // Clear the form and hide the modal
                        this.reset();
                        document.getElementById(modalId).classList.add('hidden');
                    }
                } catch (error) {
                    console.error('Error submitting form:', error);
                }
            });
        });
    });
</script>
@endpush

@endsection
</file>

<file path="resources/views/fcu-ams/lease/selectAssets.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<style>
    .max-h-30-rem{
        max-height: 35rem;
    }
    /* Custom checkbox styling */
    .custom-checkbox {
        @apply relative h-5 w-5 cursor-pointer appearance-none rounded border border-gray-300 bg-white 
        checked:bg-blue-500 checked:border-0 focus:outline-none transition-all duration-200;
    }
    .custom-checkbox:checked {
        background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
    }
</style>

<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <!-- Header Section -->
        <nav class="bg-white flex justify-between items-center py-4 px-6 m-3 shadow-lg rounded-lg">
            <div class="flex items-center space-x-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                <h1 class="text-3xl font-semibold text-gray-800">Select Assets to Lease</h1>
            </div>
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <input type="text" id="search" placeholder="Search assets..." 
                        class="pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-400 focus:border-blue-400 w-64">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 absolute left-3 top-2.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                </div>
            </div>
        </nav>

        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>

        <!-- Main Content Section -->
        <div class="bg-white p-6 shadow-lg m-3 rounded-lg">
            <form action="{{ route('lease.create.form.add') }}" method="POST" class="mb-0">
                @csrf
                <div class="overflow-auto max-h-30-rem rounded-lg border border-gray-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr >
                                <th scope="col" class="px-6 py-3 text-center text-xs font-medium bg-gradient-to-r from-blue-400 to-blue-400 text-white uppercase tracking-wider sticky top-0 bg-gray-50 shadow-sm">
                                    <div class="flex items-center justify-center">
                                        <input type="checkbox" class="custom-checkbox" id="select-all">
                                    </div>
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium bg-gradient-to-r from-blue-400 to-blue-400 text-white uppercase tracking-wider sticky top-0 bg-gray-50 shadow-sm">
                                    Asset Tag ID
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium bg-gradient-to-r from-blue-400 to-blue-400 text-white uppercase tracking-wider sticky top-0 bg-gray-50 shadow-sm">
                                    Specification
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium bg-gradient-to-r from-blue-400 to-blue-400 text-white uppercase tracking-wider sticky top-0 bg-gray-50 shadow-sm">
                                    Model
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @if($assets->isEmpty())
                                <tr>
                                    <td colspan="4" class="px-6 py-4 text-center text-gray-500">
                                        <div class="flex flex-col items-center justify-center space-y-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                            </svg>
                                            <p class="text-lg font-medium">No assets available</p>
                                            <p class="text-sm">There are currently no assets available for lease.</p>
                                        </div>
                                    </td>
                                </tr>
                            @else
                                @foreach($assets as $asset)
                                    <tr class="hover:bg-gray-50 transition-colors duration-200">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center justify-center">
                                                <input type="checkbox" class="custom-checkbox asset-checkbox" 
                                                    name="selected_assets[]" value="{{ $asset->id }}" />
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            {{ $asset->asset_tag_id }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {{ $asset->specs }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {{ $asset->model }}
                                        </td>
                                    </tr>
                                @endforeach
                            @endif
                        </tbody>
                    </table>
                </div>

                <!-- Footer Actions -->
                <div class="flex justify-between items-center mt-6">
                    <div class="text-sm text-gray-500">
                        <span id="selected-count">0</span> assets selected
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" onclick="history.back()" 
                            class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                            <span>Back</span>
                        </button>
                        <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            <span>Confirm Selection</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Select all functionality
    const selectAllCheckbox = document.getElementById('select-all');
    const assetCheckboxes = document.querySelectorAll('.asset-checkbox');
    const selectedCountElement = document.getElementById('selected-count');

    selectAllCheckbox.addEventListener('change', function() {
        assetCheckboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
        });
        updateSelectedCount();
    });

    assetCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateSelectedCount);
    });

    function updateSelectedCount() {
        const selectedCount = document.querySelectorAll('.asset-checkbox:checked').length;
        selectedCountElement.textContent = selectedCount;
    }

    // Search functionality
    const searchInput = document.getElementById('search');
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/reports/stock-out-details.blade.php">
@extends('layouts.layout')
@section('content')
<style>
    body {
        --tw-bg-opacity: 1;
        background-color: rgb(241 245 249 / var(--tw-bg-opacity))
            /* #f1f5f9 */
        ;
    }

    .fcu-icon {
        filter: grayscale(100%);
    }

    @media print {
        body {
            background-color: white;
        }

        .no-print {
            display: none;
        }

        @page {
            size: auto;
            margin: 0mm;
        }

        .shadow-lg {
            box-shadow: none;
        }
    }
</style>
<div class="bg-white rounded-lg p-8 mb-8 max-w-2xl my-9 mx-auto shadow-lg">
    <div class="text-center mb-5">
        <img class="fcu-icon mb-3 w-28 mx-auto" src="/img/login/fcu-icon.png" alt="" srcset="">
        <h2 class="text-2xl font-bold">FILAMER CHRISTIAN UNIVERSITY, INC</h2>
        <h2 class="text-xl font-bold mb-3">Roxas Avenue, Roxas City</h2>
        <h2 class="text-xl font-bold">Stock Out Receipt</h2>
        <p class="text-gray-600 mb-3">Date: {{ $record->stock_out_date }}</p>
        <h2 class="text-xl font-bold">{{ $record->department->department ?? 'N/A' }}
        </h2>
    </div>

    <table class="w-full mb-8">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-6 py-3 text-left">Item</th>
                <th class="px-6 py-3 text-center">Quantity</th>
                <th class="px-6 py-3 text-right">Price</th>
                <th class="px-6 py-3 text-right">Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach($stockOutDetails as $detail)
                <tr>
                    <td class="border-b px-6 py-4">{{ $detail['item'] }}</td>
                    <td class="border-b px-6 py-4 text-center">{{ $detail['quantity'] }}</td>
                    <td class="border-b px-6 py-4 text-right">
                        ₱{{ number_format($detail['price'], 2) }}</td>
                    <td class="border-b px-6 py-4 text-right">
                        ₱{{ number_format($detail['quantity'] * $detail['price'], 2) }}
                    </td>
                </tr>
            @endforeach
        </tbody>
        <tfoot>
            <tr class="font-bold">
                <td class="px-6 py-4" colspan="3">Overall Price:</td>
                <td class="px-6 py-4 text-right">₱{{ number_format($totalPrice, 2) }}</td>
            </tr>
        </tfoot>
    </table>

    <div class="flex justify-between mt-12 pt-6 border-t">
        <div class="text-center">
            <p class="font-bold mb-2">Released by:</p>
            <p>{{ (auth()->user() ? auth()->user()->first_name . ' ' . auth()->user()->last_name : 'N/A') }}
            </p>
        </div>
        <div class="text-center flex s space-x-9">
            <div>
                <p class="font-bold mb-2">Received by:</p>
                <p>{{ $record->receiver }}</p>
            </div>
        </div>
    </div>

    <div class="flex justify-between mt-8 no-print">
        <button onclick="window.history.back()"
            class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
            </svg>
        </button>
        <button onclick="window.print()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round"
                    d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
            </svg>
        </button>
    </div>
</div>

<script>
    function printReceipt() {
        window.print();
    }
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/test-form.blade.php">
@extends ('layouts.layout')
@section ('content')
<style>
    .form-container{
        /* max-width: 80dvw; */
    }
</style>

<div class=" bg-slate-100">
    <div class="form-container">
        <form action="{{ route('users.store') }}" method="POST" enctype="multipart/form-data"
            class="max-w-md mx-auto p-4 pt-6 mb-4">
            @csrf

            <h2 class="text-2xl font-bold mb-4">Add New User</h2>

            @if(session('success'))
                <div class="alert alert-success">
                    {{ session('success') }}
                </div>
            @endif
            
            <div class="mb-4">
                <label for="profile_picture" class="block text-gray-700 text-sm font-bold mb-2">Profile Picture</label>
                <input type="file" id="profile_picture" name="profile_picture"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('profile_picture') border-red-500 @enderror">
                @error('profile_picture')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="first_name" class="block text-gray-700 text-sm font-bold mb-2">First Name</label>
                <input type="text" id="first_name" name="first_name"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('first_name') border-red-500 @enderror"
                    value="{{ old('first_name') }}">
                @error('first_name')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="middle_name" class="block text-gray-700 text-sm font-bold mb-2">Middle Name
                    (Optional)</label>
                <input type="text" id="middle_name" name="middle_name"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('middle_name') border-red-500 @enderror"
                    value="{{ old('middle_name') }}">
                @error('middle_name')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="last_name" class="block text-gray-700 text-sm font-bold mb-2">Last Name</label>
                <input type="text" id="last_name" name="last_name"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('last_name') border-red-500 @enderror"
                    value="{{ old('last_name') }}">
                @error('last_name')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="address" class="block text-gray-700 text-sm font-bold mb-2">Address</label>
                <input type="text" id="address" name="address"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('address') border-red-500 @enderror"
                    value="{{ old('address') }}">
                @error('address')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="contact_number" class="block text-gray-700 text-sm font-bold mb-2">Contact Number</label>
                <input type="text" id="contact_number" name="contact_number"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('contact_number') border-red-500 @enderror"
                    value="{{ old('contact_number') }}">
                @error('contact_number')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="role_id" class="block text-gray-700 text-sm font-bold mb-2">Role</label>
                <select id="role_id" name="role_id"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('role_id') border-red-500 @enderror">
                    @foreach($roles as $role)
                        <option value="{{ $role->id }}">{{ $role->role }}</option>
                    @endforeach
                </select>
                @error('role_id')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                <input type="email" id="email" name="email"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('email') border-red-500 @enderror"
                    value="{{ old('email') }}">
                @error('email')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="username" class="block text-gray-700 text-sm font-bold mb-2">Username</label>
                <input type="text" id="username" name="username"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('username') border-red-500 @enderror"
                    value="{{ old('username') }}">
                @error('username')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password</label>
                <input type="password" id="password" name="password"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('password') border-red-500 @enderror">
                @error('password')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <div class="mb-4">
                <label for="password_confirmation" class="block text-gray-700 text-sm font-bold mb-2">Confirm
                    Password</label>
                <input type="password" id="password_confirmation" name="password_confirmation"
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('password_confirmation') border-red-500 @enderror">
                @error('password_confirmation')
                    <p class="text-red-500 text-xs italic">{{ $message }}</p>
                @enderror
            </div>

            <button type="submit" class="bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded">
                Add User
            </button>
        </form>
    </div>
</div>
@endsection
</file>

<file path="resources/views/layouts/layout.blade.php">
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ asset('css/style.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    @vite(['resources/css/app.css', 'resources/js/app.js'])
</head>

<body>
    @yield('content')

    @include('layouts.modals.logout')
    <script src="{{ asset('js/successMessageTimer.js') }}"></script>
    <script src="{{ asset('js/errorMessageTimer.js') }}"></script>
    <script src="{{ asset('js/sidebarLinkDropdownScript.js') }}"></script>
    <script src="{{ asset('js/alpine.min.js') }}" defer></script>
</body>

</html>
</file>

<file path="resources/views/layouts/messageWithoutTImerForError.blade.php">
@if(session('success'))
    <div
        class="successMessage bg-green-50 border-l-4 border-green-500 p-4 rounded-md transition-all duration-500 ease-in-out">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                        clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-green-700">{{ session('success') }}</p>
            </div>
        </div>
    </div>
@endif

@if($errors->any())
    <div class="errorMessage bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                        clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <ul class="list-disc list-inside text-sm text-red-700">
                    @foreach($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        </div>
    </div>
@endif
</file>

<file path="resources/views/layouts/messageWithTImerForError.blade.php">
@if(session('success'))
    <div
        class="successMessage bg-green-50 border-l-4 border-green-500 p-4 rounded-md transition-all duration-500 ease-in-out">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                        clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-green-700">{{ session('success') }}</p>
            </div>
        </div>
    </div>
@endif

@if($errors->any())
    <div class="errorMessageWithTimer bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                        clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <ul class="list-disc list-inside text-sm text-red-700">
                    @foreach($errors->all() as $error)
                        <li>{{ $error }}</li>
                    @endforeach
                </ul>
            </div>
        </div>
    </div>
@endif
</file>

<file path="resources/views/layouts/modals/asset/deleteAsset.blade.php">
@foreach($assets as $asset)
    <div id="delete-asset-modal{{ $asset->id }}" 
         class="fixed inset-0 z-50 hidden overflow-y-auto" 
         aria-labelledby="modal-title" 
         role="dialog" 
         aria-modal="true">
        <div class="flex min-h-screen items-center justify-center">
            <!-- Background overlay -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

            <!-- Modal panel -->
            <div class="relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <!-- Warning icon -->
                        <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                            </svg>
                        </div>

                        <!-- Modal content -->
                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                            <h3 class="text-xl font-semibold leading-6 text-gray-900" id="modal-title">
                                Delete Asset
                            </h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-500">
                                    Are you sure you want to delete the asset <span class="font-medium text-gray-900">"{{ $asset->asset_tag_id }}"</span>? This action cannot be undone.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal actions -->
                <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <form action="{{ route('asset.destroy', ['id' => $asset->id]) }}" method="POST" class="sm:ml-3">
                        @csrf
                        @method('DELETE')
                        <button type="submit" 
                                class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:w-auto">
                            Delete Asset
                        </button>
                    </form>
                    <button type="button" 
                            onclick="document.getElementById('delete-asset-modal{{ $asset->id }}').classList.add('hidden')"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/brand/addNewBrand.blade.php">
<div id="add-brand-modal" 
    class="modalBg fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden overflow-y-auto p-4">
    <div class="relative w-full max-w-md mx-auto">
        <div class="bg-white rounded-xl shadow-2xl border border-gray-200 relative">
            <!-- Close Button -->
            <button onclick="document.getElementById('add-brand-modal').classList.toggle('hidden')"
                class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-300 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <!-- Modal Content -->
            <div class="p-8 space-y-6">
                <div class="text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Add New Brand</h2>
                </div>

                <form method="POST" action="{{ route('brand.add') }}" class="space-y-4">
                    @csrf
                    <div>
                        <label for="brand" class="block text-sm font-medium text-gray-700 mb-2">Brand Name</label>
                        <input type="text" id="brand" name="brand" required
                            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-300"
                            placeholder="Enter brand name">
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button"
                            onclick="document.getElementById('add-brand-modal').classList.toggle('hidden')"
                            class="px-5 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition duration-300 ease-in-out 
                            border border-gray-300 shadow-sm hover:shadow-md 
                            flex items-center gap-2 
                            transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit"
                            class="flex items-center gap-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Brand
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/brand/deleteBrand.blade.php">
@foreach($brands as $brand)
    <div id="delete-brand-modal{{ $brand->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-brand-modal{{ $brand->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the brand "<span
                            class="text-red-800">{{ $brand->brand }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-brand-modal{{ $brand->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <form
                            action="{{ route('brand.destroy', ['id' => $brand->id]) }}"
                            method="POST" id="delete-brand-form{{ $brand->id }}">
                            @csrf
                            @method('DELETE')
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                    transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                                </svg>
                                Confirm Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/brand/editBrand.blade.php">
@foreach($brands as $brand)
    <div id="modal{{ $brand->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $brand->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('brand.update', ['id' => $brand->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Category Details</h3>
                        <input type="hidden" name="id" value="{{ $brand->id }}">
                        <div class="mb-4">
                            <input type="text" id="brand" name="brand" class="w-full p-2 border bg-gray-100 rounded-md"
                                value="{{ $brand->brand }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Brand
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/category/addNewCategory.blade.php">
<div id="add-category-modal"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden overflow-y-auto p-4">
    <div class="relative w-full max-w-md mx-auto">
        <div class="bg-white rounded-xl shadow-2xl border border-gray-200 relative">
            <!-- Close Button -->
            <button onclick="document.getElementById('add-category-modal').classList.toggle('hidden')"
                class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-300 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <!-- Modal Content -->
            <div class="p-8 space-y-6">
                <div class="text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Add New Category</h2>
                </div>

                <form method="POST" action="{{ route('category.add') }}" class="space-y-4">
                    @csrf
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700 mb-2">Category Name</label>
                        <input type="text" id="category" name="category" required
                            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-300"
                            placeholder="Enter category name">
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button"
                            onclick="document.getElementById('add-category-modal').classList.toggle('hidden')"
                            class="px-5 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition duration-300 ease-in-out 
                            border border-gray-300 shadow-sm hover:shadow-md 
                            flex items-center gap-2 
                            transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit"
                            class="flex items-center gap-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Category
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/category/deleteCategory.blade.php">
@foreach($categories as $category)
    <div id="delete-category-modal{{ $category->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-category-modal{{ $category->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the category "<span
                            class="text-red-800">{{ $category->category }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-category-modal{{ $category->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <form
                            action="{{ route('category.destroy', ['id' => $category->id]) }}"
                            method="POST" id="delete-category-form{{ $category->id }}">
                            @csrf
                            @method('DELETE')
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                    transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                                </svg>
                                Confirm Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/category/editCategory.blade.php">
@foreach($categories as $category)
    <div id="modal{{ $category->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $category->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('category.update', ['id' => $category->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Category Details</h3>
                        <input type="hidden" name="id" value="{{ $category->id }}">
                        <div class="mb-4">
                            <input type="text" id="category" name="category" class="w-full p-2 border bg-gray-100 rounded-md"
                                value="{{ $category->category }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Category
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/condition/addNewCondition.blade.php">
<div id="add-condition-modal" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
    class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
    <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
            <button type="button"
                class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                onclick="document.getElementById('add-condition-modal').classList.toggle('hidden')">
                <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        clip-rule="evenodd"></path>
                </svg>
                <span class="sr-only">Close modal</span>
            </button>
            <div class="p-6 text-center">
                <h2 class="mb-4 text-lg font-bold text-black">Add New Condition</h2>
                <form method="POST" action="{{ route('condition.add') }}">
                    @csrf
                    <div class="mb-4">
                        <input type="text" id="condition" name="condition" class="w-full p-2 border bg-gray-100 rounded-md" required>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="submit"
                            class="rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Condition
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/condition/deleteCondition.blade.php">
@foreach($conditions as $condition)
    <div id="delete-modal{{ $condition->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-modal{{ $condition->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the condition "<span
                            class="text-red-800">{{ $condition->condition }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-modal{{ $condition->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit" form="delete-form{{ $condition->id }}"
                            class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                            </svg>
                            Confirm Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/condition/editCondition.blade.php">
@foreach($conditions as $condition)
    <div id="modal{{ $condition->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $condition->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('condition.update', ['id' => $condition->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Condition Details</h3>
                        <input type="hidden" name="id" value="{{ $condition->id }}">
                        <div class="mb-4">
                            <input type="text" id="condition" name="condition"
                                class="w-full p-2 bg-gray-100 border rounded-md"
                                value="{{ $condition->condition }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Condition
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/department/addNewDepartment.blade.php">
<div id="add-department-modal"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden overflow-y-auto p-4">
    <div class="relative w-full max-w-md mx-auto">
        <div class="bg-white rounded-xl shadow-2xl border border-gray-200 relative">
            <!-- Close Button -->
            <button onclick="document.getElementById('add-department-modal').classList.toggle('hidden')"
                class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-300 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <!-- Modal Content -->
            <div class="p-8 space-y-6">
                <div class="text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Add New Department</h2>
                </div>

                <form method="POST" action="{{ route('department.add') }}" class="space-y-4">
                    @csrf
                    <div>
                        <label for="department" class="block text-sm font-medium text-gray-700 mb-2">Department
                            Name</label>
                        <input type="text" id="department" name="department" required
                            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-300"
                            placeholder="Enter department name">
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button"
                            onclick="document.getElementById('add-department-modal').classList.toggle('hidden')"
                            class="px-5 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition duration-300 ease-in-out 
                            border border-gray-300 shadow-sm hover:shadow-md 
                            flex items-center gap-2 
                            transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit"
                            class="flex items-center gap-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Department
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/department/deleteDepartment.blade.php">
@foreach($departments as $department)
    <div id="delete-department-modal{{ $department->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-department-modal{{ $department->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the department "<span
                            class="text-red-800">{{ $department->department }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-department-modal{{ $department->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <form
                            action="{{ route('department.destroy', ['id' => $department->id]) }}"
                            method="POST" id="delete-department-form{{ $department->id }}">
                            @csrf
                            @method('DELETE')
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                    transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                                </svg>
                                Confirm Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/department/editDepartment.blade.php">
@foreach($departments as $department)
    <div id="modal{{ $department->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $department->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('department.update', ['id' => $department->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Department Details</h3>
                        <input type="hidden" name="id" value="{{ $department->id }}">
                        <div class="mb-4">
                            <input type="text" id="department" name="department"
                                class="w-full p-2 bg-gray-100 border rounded-md"
                                value="{{ $department->department }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Department
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/inventory/deleteInventory.blade.php">
@foreach($inventories as $inventory)
    <div id="delete-inventory-modal{{ $inventory->id }}" 
         class="fixed inset-0 z-50 hidden overflow-y-auto" 
         aria-labelledby="modal-title" 
         role="dialog" 
         aria-modal="true">
        <div class="flex min-h-screen items-center justify-center">
            <!-- Background overlay -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

            <!-- Modal panel -->
            <div class="relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <!-- Warning icon -->
                        <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                            </svg>
                        </div>

                        <!-- Modal content -->
                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                            <h3 class="text-xl font-semibold leading-6 text-gray-900" id="modal-title">
                                Delete Inventory Item
                            </h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-500">
                                    Are you sure you want to delete the inventory item <span class="font-medium text-gray-900">"{{ $inventory->unique_tag }}"</span>? This action cannot be undone.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal actions -->
                <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <form action="{{ route('inventory.destroy', ['id' => $inventory->id]) }}" method="POST" class="sm:ml-3">
                        @csrf
                        @method('DELETE')
                        <button type="submit" 
                                class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:w-auto">
                            Delete Item
                        </button>
                    </form>
                    <button type="button" 
                            onclick="document.getElementById('delete-inventory-modal{{ $inventory->id }}').classList.add('hidden')"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/location/addNewLocation.blade.php">
<div id="add-location-modal"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden overflow-y-auto p-4">
    <div class="relative w-full max-w-md mx-auto">
        <div class="bg-white rounded-xl shadow-2xl border border-gray-200 relative">
            <!-- Close Button -->
            <button onclick="document.getElementById('add-location-modal').classList.toggle('hidden')"
                class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-300 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <!-- Modal Content -->
            <div class="p-8 space-y-6">
                <div class="text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Add New Location</h2>
                </div>

                <form method="POST" action="{{ route('location.add') }}" class="space-y-4">
                    @csrf
                    <div>
                        <label for="location" class="block text-sm font-medium text-gray-700 mb-2">Location Name</label>
                        <input type="text" id="location" name="location" required
                            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-300"
                            placeholder="Enter location name">
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button"
                            onclick="document.getElementById('add-location-modal').classList.toggle('hidden')"
                            class="px-5 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition duration-300 ease-in-out 
                            border border-gray-300 shadow-sm hover:shadow-md 
                            flex items-center gap-2 
                            transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit"
                            class="flex items-center gap-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-lienjoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Location
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/location/deleteLocation.blade.php">
@foreach($locations as $location)
    <div id="delete-location-modal{{ $location->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-location-modal{{ $location->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the location "<span
                            class="text-red-800">{{ $location->location }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-location-modal{{ $location->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <form
                            action="{{ route('location.destroy', ['id' => $location->id]) }}"
                            method="POST" id="delete-location-form{{ $location->id }}">
                            @csrf
                            @method('DELETE')
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                    transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                                </svg>
                                Confirm Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/location/editLocation.blade.php">
@foreach($locations as $location)
    <div id="modal{{ $location->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $location->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('location.update', ['id' => $location->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Location Details</h3>
                        <input type="hidden" name="id" value="{{ $location->id }}">
                        <div class="mb-4">
                            <input type="text" id="location" name="location"
                                class="w-full p-2 bg-gray-100 border rounded-md"
                                value="{{ $location->location }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Location
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/logout.blade.php">
<div id="logout-modal" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
    class="modalBg fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden bg-gray-900 bg-opacity-50 backdrop-blur-sm flex items-center justify-center">
    <div class="relative w-full max-w-md mx-auto">
        <!-- Logout confirmation modal content -->
        <div class="relative bg-white rounded-xl shadow-2xl border border-gray-100 transform transition-all duration-300">
            <button type="button"
                class="absolute top-4 right-4 text-gray-400 bg-transparent hover:bg-gray-100 hover:text-gray-900 rounded-lg text-sm p-2 inline-flex items-center transition-colors duration-200"
                onclick="document.getElementById('logout-modal').classList.toggle('hidden')">
                <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <div class="p-8 text-center" id="modal">
                <div class="mx-auto flex items-center justify-center size-16 bg-red-100 rounded-full mb-6">
                    <svg xmlns="http://www.w3.org/2000/svg" class="size-8 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                </div>
                <h3 class="text-xl font-bold text-gray-900 mb-2">Logout Confirmation</h3>
                <p class="mb-6 text-gray-500">Are you sure you want to log out of your account?</p>
                <div class="flex justify-between gap-4">
                    <button type="button"
                        class="px-5 py-2.5 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg text-sm transition-all duration-200 flex items-center gap-2"
                        onclick="document.getElementById('logout-modal').classList.toggle('hidden')">
                        <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                        Cancel
                    </button>
                    <form action="{{ route('logout') }}" method="POST">
                        @csrf
                        <button type="submit"
                            class="px-5 py-2.5 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg text-sm transition-all duration-200 flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                            </svg>
                            Logout
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/new/add-item-modal.blade.php">
@props(['title', 'id', 'route', 'field'])

<div id="{{ $id }}" tabindex="-1" aria-hidden="true" class="fixed inset-0 z-50 hidden overflow-y-auto overflow-x-hidden bg-gray-900/50 backdrop-blur-sm p-4 flex items-center justify-center">
    <div class="relative w-full max-w-md">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 border-b rounded-t">
                <h3 class="text-xl font-semibold text-gray-900">
                    {{ $title }}
                </h3>
                <button type="button" onclick="document.getElementById('{{ $id }}').classList.add('hidden')" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>  
                </button>
            </div>
            <!-- Modal body -->
            <form action="{{ $route }}" method="POST">
                @csrf
                <div class="p-6 space-y-6">
                    <div>
                        <label for="{{ $field }}" class="block mb-2 text-sm font-medium text-gray-900">Name</label>
                        <input type="text" name="{{ $field }}" id="{{ $field }}" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required>
                    </div>
                </div>
                <!-- Modal footer -->
                <div class="flex items-center justify-end p-6 space-x-2 border-t border-gray-200 rounded-b">
                    <button type="button" onclick="document.getElementById('{{ $id }}').classList.add('hidden')" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10">Cancel</button>
                    <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">Add</button>
                </div>
            </form>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/site/addNewSite.blade.php">
<div id="add-site-modal"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden overflow-y-auto p-4">
    <div class="relative w-full max-w-md mx-auto">
        <div class="bg-white rounded-xl shadow-2xl border border-gray-200 relative">
            <!-- Close Button -->
            <button onclick="document.getElementById('add-site-modal').classList.toggle('hidden')"
                class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-300 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <!-- Modal Content -->
            <div class="p-8 space-y-6">
                <div class="text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Add New Site</h2>
                </div>

                <form method="POST" action="{{ route('site.add') }}" class="space-y-4">
                    @csrf
                    <div>
                        <label for="site" class="block text-sm font-medium text-gray-700 mb-2">Site Name</label>
                        <input type="text" id="site" name="site" required
                            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-300"
                            placeholder="Enter site name">
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button"
                            onclick="document.getElementById('add-site-modal').classList.toggle('hidden')"
                            class="px-5 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition duration-300 ease-in-out 
                            border border-gray-300 shadow-sm hover:shadow-md 
                            flex items-center gap-2 
                            transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit"
                            class="flex items-center gap-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Site
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/site/deleteSite.blade.php">
@foreach($sites as $site)
    <div id="delete-site-modal{{ $site->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-site-modal{{ $site->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the site "<span
                            class="text-red-800">{{ $site->site }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-site-modal{{ $site->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <form
                            action="{{ route('site.destroy', ['id' => $site->id]) }}"
                            method="POST" id="delete-site-form{{ $site->id }}">
                            @csrf
                            @method('DELETE')
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                    transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                                </svg>
                                Confirm Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/site/editSite.blade.php">
@foreach($sites as $site)
    <div id="edit-site-modal{{ $site->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('edit-site-modal{{ $site->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('site.update', ['id' => $site->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Site Details</h3>
                        <input type="hidden" name="id" value="{{ $site->id }}">
                        <div class="mb-4">
                            <input type="text" id="site" name="site" class="w-full bg-gray-100 p-2 border rounded-md"
                                value="{{ $site->site }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Site
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/status/addNewStatus.blade.php">
<div id="add-status-modal" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
    class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
    <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
            <button type="button"
                class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                onclick="document.getElementById('add-status-modal').classList.toggle('hidden')">
                <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd"
                        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                        clip-rule="evenodd"></path>
                </svg>
                <span class="sr-only">Close modal</span>
            </button>
            <div class="p-6 text-center">
                <h2 class="mb-4 text-lg font-bold text-black">Add New Status</h2>
                <form method="POST" action="{{ route('status.add') }}">
                    @csrf
                    <div class="mb-4">
                        <input type="text" id="status" name="status" class="w-full p-2 bg-gray-100 border rounded-md"
                            required>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="submit"
                            class="rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Status
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/status/deleteStatus.blade.php">
@foreach($statuses as $status)
    <div id="delete-modal{{ $status->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-modal{{ $status->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the status "<span
                            class="text-red-800">{{ $status->status }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-modal{{ $status->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit" form="delete-form{{ $status->id }}"
                            class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                            </svg>
                            Confirm Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/status/editStatus.blade.php">
@foreach($statuses as $status)
    <div id="modal{{ $status->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $status->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('status.update', ['id' => $status->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Status Details</h3>
                        <input type="hidden" name="id" value="{{ $status->id }}">
                        <div class="mb-4">
                            <input type="text" id="status" name="status"
                                class="w-full bg-gray-100 p-2 border rounded-md"
                                value="{{ $status->status }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Status
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/supplier/addNewSupplier.blade.php">
<div id="add-supplier-modal"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center bg-black/50 hidden overflow-y-auto p-4">
    <div class="relative w-full max-w-md mx-auto">
        <div class="bg-white rounded-xl shadow-2xl border border-gray-200 relative">
            <!-- Close Button -->
            <button onclick="document.getElementById('add-supplier-modal').classList.toggle('hidden')"
                class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors duration-300 ease-in-out">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>

            <!-- Modal Content -->
            <div class="p-8 space-y-6">
                <div class="text-center">
                    <h2 class="text-2xl font-bold text-gray-800 mb-2">Add New Supplier</h2>
                </div>

                <form method="POST" action="{{ route('supplier.add') }}" class="space-y-4">
                    @csrf
                    <div>
                        <label for="supplier" class="block text-sm font-medium text-gray-700 mb-2">Supplier Name</label>
                        <input type="text" id="supplier" name="supplier" required
                            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition duration-300"
                            placeholder="Enter supplier name">
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button"
                            onclick="document.getElementById('add-supplier-modal').classList.toggle('hidden')" class="px-5 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition duration-300 ease-in-out 
 border border-gray-300 shadow-sm hover:shadow-md 
 flex items-center gap-2 
 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <button type="submit"
                            class="flex items-center gap-2 px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add Supplier
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/layouts/modals/supplier/deleteSupplier.blade.php">
@foreach($suppliers as $supplier)
    <div id="delete-supplier-modal{{ $supplier->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Delete confirmation modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('delete-supplier-modal{{ $supplier->id }}').classList.toggle('hidden')">
                    <!-- Close button icon -->
                </button>
                <div class="p-6 text-center" id="modal">
                    <h3 class="text-lg font-semibold">Delete Confirmation</h3>
                    <p class="my-2">Are you sure you want to delete the supplier "<span
                            class="text-red-800">{{ $supplier->supplier }}</span>"?</p>
                    <div class="flex justify-between">
                        <button type="button"
                            class="rounded-md shadow-md px-5 py-2 bg-gray-600 hover:shadow-md hover:bg-gray-500
                                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-1"
                            onclick="document.getElementById('delete-supplier-modal{{ $supplier->id }}').classList.toggle('hidden')">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Cancel
                        </button>
                        <form
                            action="{{ route('supplier.destroy', ['id' => $supplier->id]) }}"
                            method="POST" id="delete-supplier-form{{ $supplier->id }}">
                            @csrf
                            @method('DELETE')
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                                                    transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
                                </svg>
                                Confirm Delete
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/supplier/editSupplier.blade.php">
@foreach($suppliers as $supplier)
    <div id="modal{{ $supplier->id }}" style="min-height:100vh;" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-2xl h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow-lg dark:bg-white border border-slate-400">
                <button type="button"
                    class="absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white"
                    onclick="document.getElementById('modal{{ $supplier->id }}').classList.toggle('hidden')">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-6 text-center" id="modal">
                    <form method="POST"
                        action="{{ route('supplier.update', ['id' => $supplier->id]) }}">
                        @csrf
                        <h3 class="text-lg font-semibold mb-3">Supplier Details</h3>
                        <input type="hidden" name="id" value="{{ $supplier->id }}">
                        <div class="mb-4">
                            <input type="text" id="supplier" name="supplier"
                                class="w-full bg-gray-100 p-2 border rounded-md"
                                value="{{ $supplier->supplier }}" required>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="submit"
                                class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                </svg>
                                Update Supplier
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/user/addNewUser.blade.php">
<div id="add-user-modal" tabindex="-1" aria-hidden="true"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center overflow-y-auto bg-black bg-opacity-50 p-4 hidden">
    <div class="relative w-full max-w-4xl transform rounded-2xl bg-white shadow-2xl transition-all">
        <div class="relative overflow-auto rounded-2xl max-h-[80dvh]">
            <!-- Gradient Background Overlay -->
            <div
                class="absolute inset-0 bg-gradient-to-br from-blue-100 via-white to-purple-100 opacity-50 pointer-events-none">
            </div>

            <!-- Modal Content -->
            <div class="relative z-20 p-8">
                <!-- Modal Header -->
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-3xl font-bold text-gray-800">Add New User</h2>

                    <!-- Close Button -->
                    <button type="button"
                        onclick="document.getElementById('add-user-modal').classList.toggle('hidden')"
                        class="text-gray-500 hover:text-gray-800 bg-white/50 hover:bg-white/80 rounded-full p-2 transition-all duration-300">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                <!-- Add Form -->
                <form class="login-form" action="{{ route('user.add') }}" method="POST" enctype="multipart/form-data">
                    @csrf
                    <div class="grid md:grid-cols-2 gap-6">
                        <!-- Profile Picture Section -->
                        <div class="md:col-span-2 flex flex-col items-center mb-6">
                            <div class="relative mb-4">
                                <input type="file" name="profile_picture" id="profilePicInputAdd"
                                    class="hidden" accept="image/*"
                                    onchange="previewProfilePic(this, 'Add')">

                                <img id="profilePicPreviewAdd"
                                    src="{{ asset('profile/defaultProfile.png') }}"
                                    alt="User Profile"
                                    onclick="document.getElementById('profilePicInputAdd').click()"
                                    class="w-40 h-40 object-cover rounded-full border-4 border-white shadow-lg ring-4 ring-blue-200/50 transform transition-all hover:scale-105 cursor-pointer">

                                <div id="imageOverlayAdd"
                                    class="absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300 cursor-pointer"
                                    onclick="document.getElementById('profilePicInputAdd').click()">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-white" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                                    </svg>
                                </div>
                            </div>
                            <p class="text-gray-500 text-sm">Click image to upload profile picture</p>
                        </div>

                        <!-- Input Fields -->
                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">First Name</label>
                            <input type="text" name="first_name"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Middle Name</label>
                            <input type="text" name="middle_name"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors">
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Last Name</label>
                            <input type="text" name="last_name"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Contact Number</label>
                            <input type="text" name="contact_number"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Address</label>
                            <input type="text" name="address"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Role</label>
                            <select name="role_id"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                                <option value="">Select a role</option>
                                @foreach($roles as $role)
                                    <option value="{{ $role->id }}">{{ $role->role }}</option>
                                @endforeach
                            </select>
                        </div>

                        <div class=" bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Email</label>
                            <input type="email" name="email"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Username</label>
                            <input type="text" name="username"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Password</label>
                            <input type="password" name="password"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Confirm Password</label>
                            <input type="password" name="password_confirmation"
                                class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                required>
                        </div>
                    </div>

                    <!-- Add User Button -->
                    <div class="flex justify-end space-x-2 mt-6">
                        <button type="submit"
                            class="rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500
                            transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round"
                                    d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                            </svg>
                            Add New User
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function previewProfilePic(input, action) {
        const preview = document.getElementById('profilePicPreview' + action);

        if (input.files && input.files[0]) {
            const validImageTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validImageTypes.includes(input.files[0].type)) {
                alert('Please select a valid image file (JPEG, PNG, or GIF)');
                input.value = '';
                return;
            }

            const maxSizeInBytes = 5 * 1024 * 1024; // 5MB
            if (input.files[0].size > maxSizeInBytes) {
                alert('File is too large. Maximum file size is 5MB.');
                input.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function (e) {
                preview.src = e.target.result;
            }
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>
</file>

<file path="resources/views/layouts/modals/user/deleteUser.blade.php">
@foreach($users as $user)
    <div id="delete-user-modal{{ $user->id }}" 
         class="fixed inset-0 z-50 hidden overflow-y-auto" 
         aria-labelledby="modal-title" 
         role="dialog" 
         aria-modal="true">
        <div class="flex min-h-screen items-center justify-center">
            <!-- Background overlay -->
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

            <!-- Modal panel -->
            <div class="relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                <div class="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <!-- Warning icon -->
                        <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                            <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                            </svg>
                        </div>

                        <!-- Modal content -->
                        <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                            <h3 class="text-xl font-semibold leading-6 text-gray-900" id="modal-title">
                                Delete User
                            </h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-500">
                                    Are you sure you want to delete the user <span class="font-medium text-gray-900">"{{ $user->first_name . ' ' . $user->last_name }}"</span>? This action cannot be undone.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal actions -->
                <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <form action="{{ route('user.destroy', ['id' => $user->id]) }}" method="POST" class="sm:ml-3">
                        @csrf
                        @method('DELETE')
                        <button type="submit" 
                                class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:w-auto">
                            Delete User
                        </button>
                    </form>
                    <button type="button" 
                            onclick="document.getElementById('delete-user-modal{{ $user->id }}').classList.add('hidden')"
                            class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
@endforeach
</file>

<file path="resources/views/layouts/modals/user/editUser.blade.php">
@foreach($users as $user)
    <div id="edit-user-modal{{ $user->id }}" tabindex="-1" aria-hidden="true"
        class="modalBg fixed inset-0 z-50 flex items-center justify-center overflow-y-auto bg-black bg-opacity-50 p-4 hidden">
        <div class="relative w-full max-w-4xl transform rounded-2xl bg-white shadow-2xl transition-all">
            <div class="relative overflow-auto rounded-2xl max-h-[80dvh]">
                <!-- Gradient Background Overlay -->
                <div
                    class="absolute inset-0 bg-gradient-to-br from-blue-100 via-white to-purple-100 opacity-50 pointer-events-none">
                </div>

                <!-- Modal Content -->
                <div class="relative z-20 p-8">
                    <!-- Modal Header -->
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-3xl font-bold text-gray-800">Edit User Profile</h2>

                        <!-- Close Button -->
                        <button type="button"
                            onclick="document.getElementById('edit-user-modal{{ $user->id }}').classList.toggle('hidden')"
                            class="text-gray-500 hover:text-gray-800 bg-white/50 hover:bg-white/80 rounded-full p-2 transition-all duration-300">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>

                    <!-- Edit Form -->
                    <form class="login-form" action="{{ route('user.update', $user->id) }}"
                        method="POST" enctype="multipart/form-data">
                        @csrf
                        <div class="space-y-6">
                            <!-- Profile Picture Section -->
                            <div class="flex flex-col items-center mb-6">
                                <div class="relative mb-4">
                                    <input type="file" name="profile_picture" id="profilePicInput{{ $user->id }}"
                                        class="hidden" accept="image/*"
                                        onchange="previewProfilePic(this, {{ $user->id }})">

                                    <img id="profilePicPreview{{ $user->id }}"
                                        src="{{ $user->profile_picture ? asset($user->profile_picture) : asset('profile/defaultProfile.png') }}"
                                        alt="User Profile"
                                        onclick="document.getElementById('profilePicInput{{ $user->id }}').click()"
                                        class="w-40 h-40 object-cover rounded-full border-4 border-white shadow-lg ring-4 ring-blue-200/50 transform transition-all hover:scale-105 cursor-pointer">

                                    <div id="imageOverlay{{ $user->id }}"
                                        class="absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300 cursor-pointer"
                                        onclick="document.getElementById('profilePicInput{{ $user->id }}').click()">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-white" fill="none"
                                            viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                    </div>
                                </div>
                                <p class="text-gray-500 text-sm">Click image to change profile picture</p>
                            </div>

                            <!-- Personal Information Section -->
                            <div class="space-y-6">
                                <h3 class="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Personal Information</h3>
                                <div class="grid md:grid-cols-2 gap-6">
                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">First Name</label>
                                        <input type="text" name="first_name" value="{{ $user->first_name }}"
                                            class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                            required>
                                    </div>

                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Middle Name</label>
                                        <input type="text" name="middle_name" value="{{ $user->middle_name }}"
                                            class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors">
                                    </div>

                                    
                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Last Name</label>
                                        <input type="text" name="last_name" value="{{ $user->last_name }}"
                                            class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                            required>
                                    </div>

                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Contact Number</label>
                                        <input type="text" name="contact_number" value="{{ $user->contact_number }}"
                                            class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                            required>
                                    </div>
                                </div>

                                <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                    <label class="block text-xs font-semibold text-gray-500 mb-2">Address</label>
                                    <input type="text" name="address" value="{{ $user->address }}"
                                        class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                        required>
                                </div>
                            </div>

                            <!-- Organization Section -->
                            <div class="space-y-6">
                                <h3 class="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Organization Information</h3>
                                <div class="grid md:grid-cols-2 gap-6">
                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Department</label>
                                        <select name="department_id" required class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors">
                                            <option value="">Select Department</option>
                                            @foreach(App\Models\Department::orderBy('department', 'asc')->get() as $department)
                                                <option value="{{ $department->id }}" {{ $user->department_id == $department->id ? 'selected' : '' }}>
                                                    {{ $department->department }}
                                                </option>
                                            @endforeach
                                        </select>
                                    </div>

                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Role</label>
                                        <select name="role_id" required class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors">
                                            @foreach($roles as $role)
                                                <option value="{{ $role->id }}" {{ $user->role_id == $role->id ? 'selected' : '' }}>
                                                    {{ $role->role }}
                                                </option>
                                            @endforeach
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- Account Section -->
                            <div class="space-y-6">
                                <h3 class="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Account Information</h3>
                                <div class="grid md:grid-cols-2 gap-6">
                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Email</label>
                                        <input type="email" name="email" value="{{ $user->email }}"
                                            class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                            required>
                                    </div>

                                    <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                        <label class="block text-xs font-semibold text-gray-500 mb-2">Username</label>
                                        <input type="text" name="username" value="{{ $user->username }}"
                                            class="w-full bg-transparent border-b-2 border-gray-300 focus:border-blue-500 transition-colors"
                                            required>
                                    </div>
                                </div>
                            </div>

                            <!-- Update Button -->
                            <div class="flex justify-end space-x-2 mt-6">
                                <button type="submit"
                                    class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                                transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                        stroke-width="1.5" stroke="currentColor" class="size-6">
                                        <path stroke-linecap="round" stroke-linejoin="round"
                                            d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                                    </svg>
                                    Update User
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
@endforeach

<script>
    function previewProfilePic(input, userId) {
        const preview = document.getElementById('profilePicPreview' + userId);

        if (input.files && input.files[0]) {
            // Validate file type
            const validImageTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validImageTypes.includes(input.files[0].type)) {
                alert('Please select a valid image file (JPEG, PNG, or GIF)');
                input.value = ''; // Clear the input
                return;
            }

            // Validate file size (e.g., max 5MB)
            const maxSizeInBytes = 5 * 1024 * 1024; // 5MB
            if (input.files[0].size > maxSizeInBytes) {
                alert('File is too large. Maximum file size is 5MB.');
                input.value = ''; // Clear the input
                return;
            }

            // Create a FileReader object
            const reader = new FileReader();

            // Set up the reader onload event
            reader.onload = function (e) {
                // Set the preview image source to the loaded file
                preview.src = e.target.result;
            }

            // Read the selected file as a data URL
            reader.readAsDataURL(input.files[0]);
        }
    }

    // Optional: Add event listeners to all profile picture inputs
    document.addEventListener('DOMContentLoaded', function () {
        const profilePicInputs = document.querySelectorAll('input[name="profile_picture"]');
        profilePicInputs.forEach(input => {
            input.addEventListener('change', function () {
                previewProfilePic(this, this.id.replace('profilePicInput', ''));
            });
        });
    });
</script>
</file>

<file path="resources/views/layouts/modals/user/viewUser.blade.php">
@foreach($users as $user)
<div id="view-user-modal{{ $user->id }}" tabindex="-1" aria-hidden="true"
    class="modalBg fixed inset-0 z-50 flex items-center justify-center overflow-y-auto bg-black bg-opacity-50 p-4 hidden">
    <div class="relative w-full max-w-4xl transform rounded-2xl bg-white shadow-2xl transition-all">
        <div class="relative overflow-auto rounded-2xl max-h-[80dvh]">
            <!-- Gradient Background Overlay -->
            <div class="absolute inset-0 bg-gradient-to-br from-blue-100 via-white to-purple-100 opacity-50 pointer-events-none"></div>

            

            <!-- Modal Content -->
            <div class="relative z-20 p-8">
                <div class="space-y-6">
                    <!-- Profile Picture Section -->
                    <div class="flex flex-col items-center mb-6">
                        <div class="relative mb-4">
                            <img src="{{ $user->profile_picture ? asset($user->profile_picture) : asset('profile/defaultProfile.png') }}"
                                alt="User Profile"
                                class="w-40 h-40 object-cover rounded-full border-4 border-white shadow-lg ring-4 ring-blue-200/50">
                            <span class="absolute bottom-2 right-2 bg-blue-500 text-white rounded-full px-2 py-1 text-xs">
                                {{ $user->role->role }}
                            </span>
                        </div>
                        <h2 class="text-3xl font-bold text-gray-800 text-center">
                            {{ $user->first_name }}
                            {{ $user->middle_name ? $user->middle_name . ' ' : '' }}{{ $user->last_name }}
                        </h2>
                        <p class="text-gray-500 text-lg flex items-center gap-2 mt-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500"
                                viewBox="0 0 20 20" fill="currentColor">
                                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                            </svg>
                            {{ $user->email }}
                        </p>
                    </div>

                    <!-- Close Button -->
                    <button type="button"
                        onclick="document.getElementById('view-user-modal{{ $user->id }}').classList.toggle('hidden')"
                        class="absolute top-6 right-6 text-gray-500 hover:text-gray-800 bg-white/50 hover:bg-white/80 rounded-full p-2 transition-all duration-300">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>

                    <!-- Personal Information Section -->
                    <div class="space-y-6">
                        <h3 class="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Personal Information</h3>
                        <div class="grid md:grid-cols-2 gap-6">
                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">First Name</label>
                                <p class="text-gray-800 font-medium">{{ $user->first_name }}</p>
                            </div>

                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Middle Name</label>
                                <p class="text-gray-800 font-medium">{{ $user->middle_name ?? 'N/A' }}</p>
                            </div>

                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Last Name</label>
                                <p class="text-gray-800 font-medium">{{ $user->last_name }}</p>
                            </div>

                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Contact Number</label>
                                <p class="text-gray-800 font-medium">{{ $user->contact_number }}</p>
                            </div>
                        </div>

                        <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                            <label class="block text-xs font-semibold text-gray-500 mb-2">Address</label>
                            <p class="text-gray-800 font-medium">{{ $user->address }}</p>
                        </div>
                    </div>

                    <!-- Organization Section -->
                    <div class="space-y-6">
                        <h3 class="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Organization Information</h3>
                        <div class="grid md:grid-cols-2 gap-6">
                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Department</label>
                                <p class="text-gray-800 font-medium">{{ $user->department->department ?? 'N/A' }}</p>
                            </div>

                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Role</label>
                                <p class="text-gray-800 font-medium">{{ $user->role->role }}</p>
                            </div>
                        </div>
                    </div>

                    <!-- Account Section -->
                    <div class="space-y-6">
                        <h3 class="text-lg font-semibold text-gray-700 border-b border-gray-200 pb-2">Account Information</h3>
                        <div class="grid md:grid-cols-2 gap-6">
                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Email</label>
                                <p class="text-gray-800 font-medium">{{ $user->email }}</p>
                            </div>

                            <div class="bg-white/60 border-2 border-gray-200 backdrop-blur-sm rounded-xl p-4 shadow-md">
                                <label class="block text-xs font-semibold text-gray-500 mb-2">Username</label>
                                <p class="text-gray-800 font-medium">{{ $user->username }}</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endforeach
</file>

<file path="resources/views/login.blade.php">
@extends('layouts.layout')
@section('content')
<script>
    function preventBack() {
        window.history.forward()
    };
    setTimeout("preventBack()", 0);
    windows.onunload = function () {
        null;
    }
</script>
<link rel="stylesheet" href="{{ asset('css/login.css') }}">

<div class="body min-h-screen p-5 flex align-items-center justify-center">
    <div class="login-container flex align-items-center justify-center bg bg-transparent rounded-lg p-5">
        <div class="form-container">
            <form class="login-form rounded-lg shadow-md shadow-black p-5 flex"
                action="{{ route('login.submit') }}" method="post">
                @csrf
                <img class="fcu-icon mb-3" src="/img/login/fcu-icon.png" alt="" srcset="">
                <h1 class=" text-blue-900 text-center text-5xl">FCU</h1>
                <h2 class=" text-blue-900 text-center text-2xl mb-5">Asset Management System</h2>
                @if($errors->any())
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4"
                        role="alert">
                        <ul>
                            @foreach($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif
                <div class="input-container mb-3">
                    <label class="icon" for="">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
                            <path fill-rule="evenodd"
                                d="M7.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3.751 20.105a8.25 8.25 0 0 1 16.498 0 .75.75 0 0 1-.437.695A18.683 18.683 0 0 1 12 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 0 1-.437-.695Z"
                                clip-rule="evenodd" />
                        </svg>
                    </label>
                    <input type="text" name="username" placeholder="USERNAME"
                        value="{{ old('username') }}">
                </div>
                <div class="input-container mb-3">
                    <label class="icon" for="">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
                            <path fill-rule="evenodd"
                                d="M15.75 1.5a6.75 6.75 0 0 0-6.651 7.906c.067.39-.032.717-.221.906l-6.5 6.499a3 3 0 0 0-.878 2.121v2.818c0 .414.336.75.75.75H6a.75.75 0 0 0 .75-.75v-1.5h1.5A.75.75 0 0 0 9 19.5V18h1.5a.75.75 0 0 0 .53-.22l2.658-2.658c.19-.189.517-.288.906-.22A6.75 6.75 0 1 0 15.75 1.5Zm0 3a.75.75 0 0 0 0 1.5A2.25 2.25 0 0 1 18 8.25a.75.75 0 0 0 1.5 0 3.75 3.75 0 0 0-3.75-3.75Z"
                                clip-rule="evenodd" />
                        </svg>
                    </label>
                    <input type="password" name="password" placeholder="PASSWORD">
                </div>
                <div class="flex justify-between mb-3">
                    <div>
                        <!-- <a href="#">Sign Up</span></a> -->
                    </div>
                    <!-- <div>
                        <a href="#" class="text-red-700">Forgot Password</a>
                    </div> -->
                </div>
                <button type="submit" class="flex justify-center w-full bg-blue-900 p-3 rounded-lg">
                    <label for="" class="text-white">Sign In</label>
                </button>
                <div class="my-2 flex justify-center items-center">
                    <div class="w-1/2 relative">
                        <div class="absolute left-0 top-1/2 transform -translate-y-1/2 h-px bg-black w-full"></div>
                    </div>
                    <span class="mx-2">or</span>
                    <div class="w-1/2 relative">
                        <div class="absolute left-0 top-1/2 transform -translate-y-1/2 h-px bg-black w-full"></div>
                    </div>
                </div>
                <a href="{{ route('signup') }}" class="w-full flex justify-center bg-green-700 p-3 rounded-lg">
                    <label for="" class="text-white">Create New Account</label>
                </a>
            </form>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/signup.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/signup.css') }}">


<div class="min-h-screen bg-picture flex items-center justify-center p-6">
    <div class="w-full max-w-4xl bg-white rounded-2xl shadow-2xl overflow-hidden">
        <div class="md:flex">
            <!-- Left Side - Decorative Background -->
            <div class="hidden md:block md:w-1/2 bg-gradient-to-br from-green-700 to-purple-600 relative">
                <div class="absolute inset-0 opacity-70 bg-pattern"></div>
                <div class="relative z-10 p-10 text-white flex flex-col justify-center h-full">
                    <h1 class="text-4xl font-bold mb-4">Welcome to FCU</h1>
                    <p class="text-xl mb-6">Asset Management System</p>
                    <div class="bg-white/20 p-4 rounded-xl">
                        <p class="italic">Create your account and get started with managing assets efficiently.</p>
                    </div>
                </div>
            </div>

            <!-- Right Side - Signup Form -->
            <div class="w-full md:w-1/2 p-8">
                <form action="{{ route('users.signup') }}" method="POST" enctype="multipart/form-data"
                    class="space-y-4">
                    @csrf

                    <div class="text-center mb-6">
                        <h2 class="text-3xl font-bold text-gray-800">Create New Account</h2>
                        <p class="text-gray-500">Enter your details to get started</p>
                    </div>

                    @include('layouts.messageWithoutTimerForError')

                    <!-- Profile Picture Upload -->
                    <!-- <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Profile Picture</label>
                        <div class="flex items-center justify-center w-full">
                            <label
                                class="flex flex-col border-4 border-dashed w-full h-32 hover:bg-gray-100 hover:border-purple-300 group">
                                <div class="flex flex-col items-center justify-center pt-7 cursor-pointer">
                                    <svg class="w-10 h-10 text-purple-400 group-hover:text-purple-600" fill="none"
                                        stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                        </path>
                                    </svg>
                                    <p class="lowercase text-sm text-gray-400 group-hover:text-purple-600 pt-1">Select a
                                        photo</p>
                                </div>
                                <input type="file" class="hidden" name="profile_picture" id="profile_picture" />
                            </label>
                        </div>
                    </div> -->

                    <!-- Name Inputs -->
                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">First Name</label>
                            <input type="text" name="first_name" required
                                class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Middle Name</label>
                            <input type="text" name="middle_name"
                                class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Last Name</label>
                            <input type="text" name="last_name" required
                                class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Contact Number</label>
                            <input type="text" name="contact_number" required
                                class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                        </div>
                    </div>

                    <!-- Address -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Address</label>
                        <input type="text" name="address" required
                            class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700">Department</label>
                        <select name="department_id" required class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                            <option value="">Select Department</option>
                            @foreach(App\Models\Department::orderBy('department', 'asc')->get() as $department)
                                <option value="{{ $department->id }}">{{ $department->department }}</option>
                            @endforeach
                        </select>
                    </div>
                    
                    <!-- Account Credentials -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email" name="email" required
                            class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Username</label>
                        <input type="text" name="username" required
                            class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Password</label>
                        <input type="password" name="password" required
                            class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Confirm Password</label>
                        <input type="password" name="password_confirmation" required
                            class="mt-1 block px-4 py-2 border-2 w-full rounded-md border-slate-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200 bg-slate-50">
                    </div>

                    <!-- Submit Button -->
                    <div class="mt-6">
                        <button type="submit"
                            class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-purple-600 to-blue-500 hover:from-purple-700 hover:to-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-all duration-300 ease-in-out transform hover:scale-105">
                            Create Account
                        </button>
                    </div>

                    <!-- Sign In Link -->
                    <div class="mt-6 text-center">
                        <p class="text-sm text-gray-500">Already have an account?
                            <a href="{{ route('login') }}"
                                class="text-purple-600 hover:text-purple-700 focus:outline-none focus:underline transition-all duration-300 ease-in-out">
                                Sign In
                            </a>
                        </p>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const profilePictureInput = document.getElementById('profile_picture');
        const uploadLabel = profilePictureInput.closest('label');

        profilePictureInput.addEventListener('change', function (event) {
            const file = event.target.files[0];

            if (file) {
                // Create image preview
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Remove existing preview if any
                    const existingPreview = uploadLabel.querySelector('.image-preview');
                    if (existingPreview) {
                        existingPreview.remove();
                    }

                    // Create image preview element
                    const imgPreview = document.createElement('img');
                    imgPreview.src = e.target.result;
                    imgPreview.classList.add('image-preview', 'absolute', 'inset-0', 'w-full',
                        'h-full', 'object-cover', 'opacity-80');

                    // Position the image preview absolutely within the label
                    imgPreview.style.position = 'absolute';
                    imgPreview.style.top = '0';
                    imgPreview.style.left = '0';
                    imgPreview.style.width = '100%';
                    imgPreview.style.height = '100%';
                    imgPreview.style.objectFit = 'cover';

                    // Hide default upload icon and text
                    const uploadIcon = uploadLabel.querySelector('svg');
                    const uploadText = uploadLabel.querySelector('p');

                    uploadIcon.classList.add('hidden');
                    uploadText.classList.add('hidden');

                    // Ensure label has relative positioning
                    uploadLabel.style.position = 'relative';

                    // Append image preview
                    uploadLabel.appendChild(imgPreview);
                }

                // Read the image file
                reader.readAsDataURL(file);
            }
        });
    });
</script>
@endsection
</file>

<file path="resources/views/test/dummy.blade.php">
@extends('layout.layout')
@section('content')

<section class="min-h-screen bg-gray-100 flex flex-col">
    <div class="bg-blue-700 border-b-2 border-b-blue-900 shadow-2xl p-4 flex justify-between items-center">
        <h1 class="font-bold text-3xl text-amber-400 hover:animate-bounce">Property Custodian</h1>
        <a href="#" class="px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
            <i class="fa-solid fa-arrow-right-from-bracket"></i>
            Log Out
        </a>
    </div>
    <div class="lg:container mx-auto p-4">
        <h1 class="font-bold text-5xl text text-center mb-5">
            Inventory
        </h1>
        <table class="min-w-full mb-2 shadow-xl">
            <thead class="">
                <tr class="bg-blue-600 text-white">
                    <td class="p-3 text-center">Item No.</td>
                    <td class="p-3 text-center">Quantity</td>
                    <td class="p-3 text-center">Unit</td>
                    <td class="p-3 text-center">Items & Specs</td>
                    <td class="p-3 text-center">Unit Price</td>
                    <td class="p-3 text-center">Supplier</td>
                </tr>
            </thead>
            <tbody>
                <tr class="bg-gray-200">
                    <td class="p-3 text-center">1</td>
                    <td class="p-3 text-center">3</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">Office Chair</td>
                    <td class="p-3 text-center">1250</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-white">
                    <td class="p-3 text-center">2</td>
                    <td class="p-3 text-center">2</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">Icon Monitor</td>
                    <td class="p-3 text-center">2120</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-gray-200">
                    <td class="p-3 text-center">3</td>
                    <td class="p-3 text-center">3</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">Nvision Frameless Monitor</td>
                    <td class="p-3 text-center">3550</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-white">
                    <td class="p-3 text-center">4</td>
                    <td class="p-3 text-center">3</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">Hyperion Classic Mouse</td>
                    <td class="p-3 text-center">1100</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-gray-200">
                    <td class="p-3 text-center">5</td>
                    <td class="p-3 text-center">5</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">HyperionX Gaming Mouse</td>
                    <td class="p-3 text-center">1500</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-white">
                    <td class="p-3 text-center">6</td>
                    <td class="p-3 text-center">3</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">HyperionX Wireless Mouse</td>
                    <td class="p-3 text-center">1950</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-gray-200">
                    <td class="p-3 text-center">7</td>
                    <td class="p-3 text-center">4</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">Zoltraak Mechanical Keyboard</td>
                    <td class="p-3 text-center">1599</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-white">
                    <td class="p-3 text-center">8</td>
                    <td class="p-3 text-center">100</td>
                    <td class="p-3 text-center">pcs.</td>
                    <td class="p-3 text-center">Bond Paper - Short</td>
                    <td class="p-3 text-center">2</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-gray-200">
                    <td class="p-3 text-center">9</td>
                    <td class="p-3 text-center">100</td>
                    <td class="p-3 text-center">pcs.</td>
                    <td class="p-3 text-center">Bond Paper - Long</td>
                    <td class="p-3 text-center">5</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
                <tr class="bg-white">
                    <td class="p-3 text-center">10</td>
                    <td class="p-3 text-center">5</td>
                    <td class="p-3 text-center">units</td>
                    <td class="p-3 text-center">AOC Monitor</td>
                    <td class="p-3 text-center">1350</td>
                    <td class="p-3 text-center">Oxford</td>
                </tr>
            </tbody>
        </table>
        <div class="flex flex-row justify-between mt-5">
            <div class="space-x-2">
                <a href="stock-in"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-green-600 hover:bg-green-500 ease-in transition-all">
                    Stock In
                </a>
                <a href="stock-out"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-amber-600 hover:bg-amber-500 ease-in transition-all">
                    Stock Out
                </a>
            </div>
            <div>
                <a href="purchase-order"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-blue-500 hover:bg-blue-400 ease-in transition-all">
                    Purchase Order
                </a>
            </div>
        </div>
    </div>
</section>

@endsection
</file>

<file path="resources/views/test/purchaseOrder.blade.php">
@extends('layout.layout')
@section('content')

<section class="min-h-screen bg-gray-100 flex flex-col">
    <div class="bg-blue-700 border-b-2 border-b-blue-900 shadow-2xl p-4 flex justify-between items-center">
        <h1 class="font-bold text-3xl text-amber-400 hover:animate-bounce">Property Custodian</h1>
        <a href="#" class="px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
            <i class="fa-solid fa-arrow-right-from-bracket"></i>
            Log Out
        </a>
    </div>
    <div class="mx-auto p-4">
        <h1 class="font-bold text-5xl text text-center mb-5">
            Purchase Order
        </h1>
        <div class="bg-gray-400 rounded-xl shadow-lg p-5 mb-6">
            <div class="flex flex-col bg-gray-200 mb-6 p-5 rounded-xl ">
                <div class="flex flex-row space-x-8 justify-between pb-4">
                    <div class="flex flex-row space-x-1  align-items-center">
                        <p class="leading-10">PO Date:</p>
                        <input type="date" name="" id="" class="bg-white p-2 rounded-xl">
                    </div>
                    <div class="flex flex-row space-x-1  align-items-center">
                        <p class="leading-10">PO Number:</p>
                        <input type="text" name="" id="" class="bg-white p-2 rounded-xl">
                        <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="max-width:40px;">
                        <a href="#" class="bg-amber-600 text-white p-2 rounded-xl">Same with previous PO #</a>
                    </div>
                    <div class="flex flex-row space-x-1  align-items-center">
                        <p class="leading-10">MR Number:</p>
                        <input type="text" name="" id="" class="bg-white p-2 rounded-xl">
                    </div>
                </div>
                <div class="">
                    <div class="flex  space-x-2 align-items-center justify-between mb-4">
                        <p class="leading-10">Requesting Department:</p>
                        <select class="bg-white p-2 rounded-xl flex-1"  name="" id="">
                            <option value="CCS" class="bg-white p-5 rounded-xl">CCS</option>
                            <option value="CCS" class="bg-white p-5 rounded-xl">CAS</option>
                            <option value="CCS" class="bg-white p-5 rounded-xl">CN</option>
                        </select>
                        <p class="leading-10">Supplier:</p>
                        <select class="bg-white p-2 rounded-xl flex-1"  name="" id="">
                            <option value="CCS" class="bg-white p-5 rounded-xl">Oxford</option>
                        </select>
                    </div>
                    <div>
                        <div class="flex  space-x-2 align-items-center justify-between mb-4">
                            <p class="leading-10">Address:</p>
                            <input type="text" name="" id="" class="bg-white p-2 rounded-xl flex-1">
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-200 p-5 rounded-xl">
                <table class="min-w-full mb-2">
                    <thead class="">
                        <tr class="">
                            <td class="p-3 text-center">Item No.</td>
                            <td class="p-3 text-center">Quantity</td>
                            <td class="p-3 text-center">Unit</td>
                            <td class="p-3 text-center">Items & Specs</td>
                            <td class="p-3 text-center">Unit Price</td>
                            <td class="p-3 text-center">Total</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="bg-gray-200">
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-10">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-20">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-20">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl" style="width:60dvh;">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-40">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-40">
                            </td>
                        </tr>
                        <tr class="bg-gray-200">
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-10">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-20">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-20">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl" style="width:60dvh;">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-40">
                            </td>
                            <td class="p-3 text-center">
                                <input type="text" class="bg-white p-2 rounded-xl w-40">
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="flex space-x-2 justify-end">
                    <p class="leading-10">Grand Total:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl">
                </div>
            </div>
        </div>
        <div class="flex flex-row justify-between align-end align-items-end">
            <div class="">
                <p class="">Note:</p>
                <textarea name="" id="" class="bg-white p-2 rounded-xl" style="width:60dvh;"></textarea>
            </div>
            <div class="space-x-3">
                <a href="#"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-green-600 hover:bg-green-500 ease-in transition-all">
                    <i class="fa-regular fa-floppy-disk"></i>
                    Save
                </a>
                <a href="inventory"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
                    <i class="fa-solid fa-xmark"></i>
                    Close
                </a>
            </div>
        </div>
    </div>
</section>

@endsection
</file>

<file path="resources/views/test/stockin.blade.php">
@extends('layout.layout')
@section('content')

<section class="min-h-screen bg-gray-100 flex flex-col">
    <div class="bg-blue-700 border-b-2 border-b-blue-900 shadow-2xl p-4 flex justify-between items-center">
        <h1 class="font-bold text-3xl text-amber-400 hover:animate-bounce">Property Custodian</h1>
        <a href="#" class="px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
            <i class="fa-solid fa-arrow-right-from-bracket"></i>
            Log Out
        </a>
    </div>
    <div class="mx-auto p-4">
        <h1 class="font-bold text-5xl text text-center mb-5">
            Stock In
        </h1>
        <div class="bg-gray-200 rounded-xl shadow-lg p-5 mb-6">
            <div class="grid grid-cols-3 gap-3 mb-4">
                <div class="">
                    <p>Item Details:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Quantity:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Supplier:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Date Received:</p>
                    <input type="date" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Location:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Unit:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
            </div>
            <div class="flex">
                <div class="flex gap-3 ml-auto">
                    <a href="inventory"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
                    <i class="fa-solid fa-xmark"></i>
                    Close
                </a>
                <a href="/"
                    class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-green-600 hover:bg-green-500 ease-in transition-all">
                    <i class="fa-regular fa-floppy-disk"></i>
                    Save
                </a>
                </div>
            </div>
        </div>
        
    </div>
</section>

@endsection
</file>

<file path="resources/views/test/stockout.blade.php">
@extends('layout.layout')
@section('content')

<section class="min-h-screen bg-gray-100 flex flex-col">
    <div class="bg-blue-700 border-b-2 border-b-blue-900 shadow-2xl p-4 flex justify-between items-center">
        <h1 class="font-bold text-3xl text-amber-400 hover:animate-bounce">Property Custodian</h1>
        <a href="#" class="px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
            <i class="fa-solid fa-arrow-right-from-bracket"></i>
            Log Out
        </a>
    </div>
    <div class="mx-auto p-4">
        <h1 class="font-bold text-5xl text text-center mb-5">
            Stock Out
        </h1>
        <div class="bg-gray-200 rounded-xl shadow-lg p-5 mb-6">
            <div class="grid grid-cols-3 gap-3 mb-4">
                <div class="">
                    <p>Item Details:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Quantity:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Supplier:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Date Issued:</p>
                    <input type="date" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Location:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
                <div class="">
                    <p>Unit:</p>
                    <input type="text" name="" id="" class="bg-white p-2 rounded-xl" style="width:20dvw;">
                </div>
            </div>
            <div class="flex">
                <div class="flex gap-3 ml-auto">
                    <a href="inventory"
                        class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-red-500 hover:bg-red-400 ease-in transition-all">
                        <i class="fa-solid fa-xmark"></i>
                        Close
                    </a>
                    <a href="/"
                        class="shadow-xl px-6 py-2 text-white rounded-2xl b bg-green-600 hover:bg-green-500 ease-in transition-all">
                        <i class="fa-solid fa-arrow-right"></i>
                        Proceed
                    </a>
                </div>
            </div>
        </div>

    </div>
</section>

@endsection
</file>

<file path="routes/api.php">
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});
</file>

<file path="routes/channels.php">
<?php

use Illuminate\Support\Facades\Broadcast;

/*
|--------------------------------------------------------------------------
| Broadcast Channels
|--------------------------------------------------------------------------
|
| Here you may register all of the event broadcasting channels that your
| application supports. The given channel authorization callbacks are
| used to check if an authenticated user can listen to the channel.
|
*/

Broadcast::channel('App.Models.User.{id}', function ($user, $id) {
    return (int) $user->id === (int) $id;
});
</file>

<file path="routes/console.php">
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
</file>

<file path="storage/app/.gitignore">
*
!public/
!.gitignore
</file>

<file path="storage/app/public/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/.gitignore">
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json
</file>

<file path="storage/framework/cache/.gitignore">
*
!data/
!.gitignore
</file>

<file path="storage/framework/cache/data/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/sessions/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/testing/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/views/.gitignore">
*
!.gitignore
</file>

<file path="storage/logs/.gitignore">
*
!.gitignore
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
    content: [
        "./resources/**/*.blade.php",
        "./resources/**/*.js",
        "./resources/**/*.vue",
    ],
    theme: {
        extend: {},
    },
    plugins: [],
};
</file>

<file path="tests/CreatesApplication.php">
<?php

namespace Tests;

use Illuminate\Contracts\Console\Kernel;
use Illuminate\Foundation\Application;

trait CreatesApplication
{
    /**
     * Creates the application.
     */
    public function createApplication(): Application
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app->make(Kernel::class)->bootstrap();

        return $app;
    }
}
</file>

<file path="tests/Feature/ExampleTest.php">
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}
</file>

<file path="tests/TestCase.php">
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
}
</file>

<file path="tests/Unit/ExampleTest.php">
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});
</file>

<file path=".cursor/rules/2001-tailwind-styling.mdc">
---
description: ENFORCE when MODIFYING or CREATING UI components to ensure consistent Tailwind CSS styling
globs: **/*.{blade.php,jsx,tsx}
alwaysApply: true
---
---
description: ENFORCE when MODIFYING or CREATING UI components to ensure consistent Tailwind CSS styling
globs: **/*.{blade.php,jsx,tsx}
tags: [ui, styling, tailwind]
priority: 1
version: 1.0.0
---

# Tailwind CSS Styling Standards

## Context
When creating or modifying UI components in the FCU-AMS project, all styling must be done using Tailwind CSS utility classes to maintain consistency and follow the project's design system.

## Requirements

### 1. Use Tailwind Utility Classes
- Always use Tailwind utility classes instead of custom CSS
- Follow responsive design patterns using Tailwind breakpoints (sm:, md:, lg:, xl:)
- Use Tailwind's color palette and spacing scale
- Implement dark mode using Tailwind's dark: variant when required

### 2. Layout & Spacing
- Use flex and grid utilities for layouts
- Follow spacing scale (m-{n}, p-{n}, gap-{n})
- Use container and max-w-{size} for width constraints
- Implement responsive padding and margins

### 3. Typography
- Use Tailwind's font-{size} utilities
- Apply text-{color} from the project's color palette
- Use font-{weight} for consistent typography
- Implement proper line-height using leading-{size}

### 4. Components
- Use consistent class combinations for similar components
- Apply hover:, focus:, and active: states
- Implement transitions using Tailwind's transition utilities
- Use shadow-{size} for elevation

### 5. Forms
- Style form elements using Tailwind's form utilities
- Consistent input and button styling
- Use proper focus states and outlines
- Apply error states using Tailwind classes

## Examples

### Button Components
<example>
<!-- Good: Using Tailwind classes -->
<button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors">
    Submit
</button>

<!-- Good: With responsive design -->
<div class="mt-4 sm:mt-6 md:mt-8 flex flex-col sm:flex-row gap-4">
    <button class="w-full sm:w-auto px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">
        Primary Action
    </button>
</div>
</example>

<example type="invalid">
<!-- Bad: Using custom CSS -->
<button style="padding: 8px 16px; background: blue;">
    Submit
</button>

<!-- Bad: Inconsistent spacing -->
<div style="margin-top: 20px">
    <button class="custom-btn">
        Primary Action
    </button>
</div>
</example>

### Form Components
<example>
<!-- Good: Consistent form styling -->
<div class="space-y-4">
    <div class="flex flex-col gap-2">
        <label class="text-sm font-medium text-gray-700">Username</label>
        <input 
            type="text"
            class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
    </div>
</div>
</example>

### Layout Patterns
<example>
<!-- Good: Responsive grid layout -->
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
    <div class="bg-white rounded-lg shadow p-4">
        <h3 class="text-lg font-semibold text-gray-900">Card Title</h3>
        <p class="mt-2 text-gray-600">Card content goes here</p>
    </div>
</div>
</example>

## Common Class Combinations

### Interactive Elements
- Buttons: `px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors`
- Links: `text-blue-600 hover:text-blue-700 underline`
- Form inputs: `px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500`

### Layout Containers
- Card: `bg-white rounded-lg shadow p-4`
- Section: `max-w-7xl mx-auto px-4 sm:px-6 lg:px-8`
- Grid: `grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4`

### Typography
- Headings: `text-2xl font-bold text-gray-900`
- Body text: `text-base text-gray-600`
- Labels: `text-sm font-medium text-gray-700`

<critical>
- NEVER use inline styles or custom CSS classes unless absolutely necessary
- ALWAYS use Tailwind utility classes for styling
- MAINTAIN consistent spacing and color usage across components
- FOLLOW responsive design patterns using Tailwind breakpoints
</critical>
</file>

<file path=".cursor/rules/201-targeted-ui-mods.mdc">
---
description: ENFORCE when MODIFYING specific UI elements to ensure changes are targeted and preserve existing layouts
globs: **/*
alwaysApply: true
---
---
description: ENFORCE when MODIFYING specific UI elements to ensure changes are targeted and preserve existing layouts
globs: **/*
priority: 1
version: 1.0.0
---

# Targeted UI Modification Rule

## Context
When making UI changes to specific sections or components within a larger layout:
- Only modify the exact section requested
- Preserve surrounding layout and structure
- Maintain existing styling patterns

## Requirements

1. Scope Identification:
   - Clearly identify the specific section to modify
   - Document the parent and sibling elements that must remain unchanged
   - Note any existing styling patterns that should be maintained

2. Change Isolation:
   - Only modify the target section's HTML/CSS
   - Preserve all parent container structures
   - Maintain existing grid layouts and spacing
   - Keep existing responsive behavior

3. Style Consistency:
   - Use existing color schemes
   - Match typography patterns
   - Maintain spacing conventions
   - Follow existing component patterns

4. Layout Preservation:
   - Keep parent grid/flex structures
   - Maintain existing margins and padding
   - Preserve responsive breakpoints
   - Keep existing alignment patterns

## Examples

<example>
<!-- Good: Targeted modification of just the notes section -->
<div class="existing-parent">
    <!-- ... existing code ... -->
    <div class="modified-section">
        <!-- Only this section is changed -->
        <span class="font-medium">Notes:</span>
        <p class="text-gray-600">{{ $notes }}</p>
    </div>
    <!-- ... existing code ... -->
</div>
</example>

<example type="invalid">
<!-- Bad: Modifying parent structures -->
<div class="new-parent-structure">
    <!-- Changed too much, affecting layout -->
    <div class="new-grid">
        <!-- Completely new structure -->
    </div>
</div>
</example>

## Validation Checklist
- [ ] Changes limited to target section
- [ ] Parent structure preserved
- [ ] Existing styling patterns maintained
- [ ] Responsive behavior unchanged
- [ ] Layout grid/flex preserved
</file>

<file path=".cursor/rules/202-preserve-data-display.mdc">
---
description: ENFORCE when MODIFYING UI elements to ensure all data display elements are preserved and functional
globs: **/*
alwaysApply: true
---
---
description: ENFORCE when MODIFYING UI elements to ensure all data display elements are preserved and functional
globs: **/*.{php,blade.php,html,jsx,tsx}
tags: [ui, data, safety]
priority: 1
version: 1.0.0
---

# Data Display Preservation Rule

## Context
When modifying UI elements or styling, it's critical to preserve all data display elements and their functionality. This includes template variables, dynamic content, and data bindings.

## Requirements

### 1. Data Element Identification
- Before making any changes, identify and document all data display elements:
  - Template variables (e.g., {{ $variable }})
  - Dynamic content bindings
  - Loops and conditionals
  - Form inputs and their values
  - Data attributes

### 2. Modification Process
- Create a backup reference of all data elements
- Track each data element's location and context
- Verify each element has a corresponding display after modification
- Maintain all data bindings and their relationships

### 3. Testing Checklist
- [ ] All template variables are present and correctly placed
- [ ] Dynamic content displays properly
- [ ] Loops and conditionals are preserved
- [ ] Form inputs maintain their values and bindings
- [ ] Data attributes are intact

### 4. Common Data Elements to Preserve
- Database field displays
- Computed values
- User input values
- Status indicators
- Timestamps and dates
- Currency and numeric formats
- Relationship data

## Examples

### Valid Modification
<example>
<!-- Original -->
<div class="text-sm">
    <span>Name: {{ $user->name }}</span>
</div>

<!-- Valid Update (preserves data) -->
<div class="text-base font-medium">
    <span>Name: {{ $user->name }}</span>
</div>
</example>

### Invalid Modification
<example type="invalid">
<!-- Original -->
<div class="text-sm">
    <span>Name: {{ $user->name }}</span>
</div>

<!-- Invalid Update (loses data) -->
<div class="text-base font-medium">
    <span>Name: [Missing Data]</span>
</div>
</example>

## Validation Process

1. Pre-Modification
   - Screenshot or document current data display
   - List all dynamic elements
   - Note any special formatting or conditions

2. During Modification
   - Keep data elements in their functional context
   - Maintain any required parent-child relationships
   - Preserve all loops and conditionals

3. Post-Modification
   - Compare against pre-modification list
   - Verify all data elements are present
   - Test with different data scenarios
   - Validate special cases and edge conditions

## Critical Warnings

<critical>
- NEVER remove or modify template variables without explicit instruction
- ALWAYS verify data display after styling changes
- MAINTAIN all dynamic content functionality
- PRESERVE all data formatting and presentation logic
</critical>
</file>

<file path=".cursor/rules/203-preserve-relationship-access.mdc">
---
description: ENFORCE when MODIFYING code with relationship access to ensure all existing relationship access patterns are preserved
globs: **/*
alwaysApply: true
---
---
description: ENFORCE when MODIFYING code with relationship access to ensure all existing relationship access patterns are preserved
globs: **/*.{php,blade.php}
tags: [relationships, data-access, safety]
priority: 1
version: 1.0.0
---

# Preserve Relationship Access Patterns Rule

## Context
When modifying code that accesses model relationships (like `$model->relationship->attribute`), it's critical to preserve these access patterns to prevent breaking existing functionality.

## Requirements

### 1. Identify Relationship Access Patterns
Before modifying any file:
- Identify all relationship access patterns (e.g., `$model->relationship->attribute`)
- Document these patterns and ensure they remain functional after changes
- Pay special attention to Blade templates where relationships are directly accessed

### 2. Preserve Access Patterns
When modifying code:
- Never change relationship access patterns unless explicitly instructed
- If adding conditional logic, wrap the existing pattern rather than replacing it
- Maintain the exact same access path for all relationships

### 3. Testing Checklist
- [ ] All original relationship access patterns are preserved
- [ ] No new errors related to undefined properties or methods
- [ ] Relationship data displays correctly after modifications

## Examples

### Valid Modification (Preserving Access)
<example>
<!-- Original -->
<div>{{ $asset->brand->brand }} {{ $asset->model }}</div>

<!-- Valid Update (preserves relationship access) -->
@if(isset($asset) && $asset->brand)
    <div>{{ $asset->brand->brand }} {{ $asset->model }}</div>
@else
    <div>Unknown Brand {{ $asset->model ?? 'Unknown Model' }}</div>
@endif
</example>

### Invalid Modification (Breaking Access)
<example type="invalid">
<!-- Original -->
<div>{{ $asset->brand->brand }} {{ $asset->model }}</div>

<!-- Invalid Update (changes access pattern) -->
<div>{{ $asset->getBrandName() }} {{ $asset->model }}</div>
</example>

## Critical Warnings

<critical>
- NEVER replace direct relationship access with different patterns
- ALWAYS preserve the original access pattern when adding fallbacks
- MAINTAIN all relationship chains exactly as they were
- WRAP existing patterns in conditionals rather than changing them
</critical>

## Specific Patterns to Preserve

### Eloquent Relationship Access
- `$model->relation->attribute`
- `$model->relation->pivot->attribute`
- `$model->relation()->where(...)->get()`

### Collection Methods on Relationships
- `$model->relations->pluck('attribute')`
- `$model->relations->where('attribute', $value)`

### Nested Relationships
- `$model->relation->nestedRelation->attribute`

## Implementation Guide

1. When adding error handling or conditionals:
   ```php
   // Good approach - wraps original pattern
   @if(isset($model->relation))
       {{ $model->relation->attribute }}
   @else
       Default value
   @endif
   ```

2. When adding new functionality:
   ```php
   // Good approach - preserves original pattern
   $originalValue = $model->relation->attribute;
   $newValue = transformValue($originalValue);
   ```

3. When refactoring:
   ```php
   // Good approach - maintains compatibility
   $value = isset($model->relation) ? $model->relation->attribute : $defaultValue;
</file>

<file path=".cursor/rules/204-no-unauthorized-modifications.mdc">
---
description: ENFORCE when MODIFYING any code to ensure no unauthorized changes are made beyond what was explicitly requested
globs: **/*
alwaysApply: true
---
---
description: ENFORCE when MODIFYING any code to ensure no unauthorized changes are made beyond what was explicitly requested
globs: **/*
tags: [code-modification, authorization, safety]
priority: 1
version: 1.0.0
---

# No Unauthorized Modifications Rule

## Context
When modifying code, it is critical to only make changes that were explicitly requested by the user. Adding new features, columns, or changing existing data access patterns without explicit authorization is strictly forbidden.

## Requirements

### 1. Strict Adherence to User Requests
- Only implement changes that were explicitly requested by the user
- Do not add "nice to have" features or columns without user approval
- Do not modify existing data access patterns unless specifically instructed
- Do not change the structure of tables, forms, or UI components beyond what was requested

### 2. Preserve Existing Implementation Patterns
- Observe how existing code accesses and displays data
- Follow the same patterns when implementing requested changes
- Do not introduce new patterns or approaches without explicit approval
- Respect the existing architecture and design decisions

### 3. When in Doubt, Ask
- If the request is ambiguous, ask for clarification before proceeding
- Present options to the user rather than making assumptions
- Explain potential implications of requested changes
- Never make significant architectural decisions without user approval

## Examples

### Valid Modification (Following Instructions)
<example>
User request: "Add a depreciation calculation method to the Asset model"

// Good response - only adds the requested method without changing existing code
public function calculateDepreciation() {
    // Implementation of the requested method
}
</example>

### Invalid Modification (Unauthorized Changes)
<example type="invalid">
User request: "Add a depreciation calculation method to the Asset model"

// Bad response - adds requested method but also modifies existing view to display it
// and changes how relationships are accessed
<div class="text-sm font-medium text-gray-900">
    @if(is_object($asset->brand) && method_exists($asset->brand, 'getAttribute'))
        {{ $asset->brand->brand }} {{ $asset->model }}
    @else
        {{ $asset->brand }} {{ $asset->model }}
    @endif
</div>
</example>

## Critical Warnings

<critical>
- NEVER add new columns or fields without explicit request
- NEVER change existing data access patterns without authorization
- NEVER modify UI structure beyond what was specifically requested
- NEVER make architectural decisions on behalf of the user
- ALWAYS follow existing patterns when implementing changes
- ALWAYS limit changes to exactly what was requested
</critical>

## Implementation Guide

1. When receiving a request:
   - Identify exactly what changes are being requested
   - Document the scope of the changes
   - Note any existing patterns that must be preserved

2. Before implementing:
   - Confirm the exact scope of changes
   - If unclear, ask for clarification
   - Identify potential side effects

3. During implementation:
   - Strictly adhere to the requested changes
   - Follow existing patterns
   - Do not introduce new features or patterns

4. After implementation:
   - Verify that only the requested changes were made
   - Ensure existing functionality remains unchanged
   - Confirm that no unauthorized modifications were introduced
</file>

<file path=".cursorignore">
# Project notes and templates
xnotes/
</file>

<file path="app/Console/Commands/SoftDeleteAllInventories.php">
<?php

declare(strict_types=1);

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class SoftDeleteAllInventories extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'inventory:soft-delete-all';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Soft delete all inventories that are not already deleted';

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        if ($this->confirm('Are you sure you want to soft delete all non-deleted inventories? This cannot be undone.')) {
            try {
                $affected = DB::table('inventories')
                    ->whereNull('deleted_at')
                    ->update(['deleted_at' => now()]);

                $this->info("Successfully soft deleted {$affected} inventory records.");
                return Command::SUCCESS;
            } catch (\Exception $e) {
                $this->error("Failed to soft delete inventories: {$e->getMessage()}");
                return Command::FAILURE;
            }
        }

        $this->info('Operation cancelled.');
        return Command::SUCCESS;
    }
}
</file>

<file path="app/Exports/AssetExportReport.php">
<?php

namespace App\Exports;

use App\Models\Asset;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithMapping;
use Carbon\Carbon;

class AssetExportReport implements FromCollection, WithHeadings, WithMapping
{
    protected $startDate;
    protected $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = Carbon::parse($startDate)->startOfDay();
        $this->endDate = Carbon::parse($endDate)->endOfDay();
    }

    public function collection()
    {
        return Asset::with(['supplier', 'brand', 'site', 'location', 'category', 'department', 'condition', 'status'])
            ->whereBetween('purchase_date', [$this->startDate, $this->endDate])
            ->orderBy('asset_tag_id', 'asc')
            ->get();
    }

    public function headings(): array
    {
        return [
            'Asset Tag ID',
            'Brand',
            'Model',
            'Specifications',
            'Serial Number',
            'Cost',
            'Supplier',
            'Site',
            'Location',
            'Category',
            'Department',
            'Purchase Date',
            'Status',
            'Condition',
            'Assigned To',
            'Issue Date'
        ];
    }

    public function map($asset): array
    {
        return [
            $asset->asset_tag_id,
            $asset->brand->brand,
            $asset->model,
            $asset->specs,
            $asset->serial_number,
            number_format($asset->cost, 2),
            $asset->supplier->supplier,
            $asset->site->site,
            $asset->location->location,
            $asset->category->category,
            $asset->department->department,
            Carbon::parse($asset->purchase_date)->format('M d, Y'),
            $asset->status->status ?? 'N/A',
            $asset->condition->condition ?? 'N/A',
            $asset->assigned_to ?? 'N/A',
            $asset->issued_date ? Carbon::parse($asset->issued_date)->format('M d, Y') : 'N/A'
        ];
    }
}
</file>

<file path="app/Exports/InventoryExportReport.php">
<?php

namespace App\Exports;

use App\Models\Inventory;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithMapping;
use Carbon\Carbon;

class InventoryExportReport implements FromCollection, WithHeadings, WithMapping
{
    protected $startDate;
    protected $endDate;

    public function __construct($startDate, $endDate)
    {
        $this->startDate = Carbon::parse($startDate)->startOfDay();
        $this->endDate = Carbon::parse($endDate)->endOfDay();
    }

    public function collection()
    {
        return Inventory::with(['supplier', 'brand', 'unit'])
            ->whereBetween('created_at', [$this->startDate, $this->endDate])
            ->where('quantity', '>', 0)
            ->orderBy('unique_tag', 'asc')
            ->get();
    }

    public function headings(): array
    {
        return [
            'Tag ID',
            'Item Specifications',
            'Brand',
            'Quantity',
            'Unit',
            'Unit Price',
            'Total Price',
            'Supplier',
            'Date Added'
        ];
    }

    public function map($inventory): array
    {
        return [
            $inventory->unique_tag,
            $inventory->items_specs,
            $inventory->brand->brand,
            $inventory->quantity,
            $inventory->unit->unit,
            number_format($inventory->unit_price, 2),
            number_format($inventory->unit_price * $inventory->quantity, 2),
            $inventory->supplier->supplier,
            $inventory->created_at->format('M d, Y')
        ];
    }
}
</file>

<file path="app/Http/Controllers/ActivityController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Asset;
use App\Models\Inventory;
use App\Models\AssetEditHistory;
use App\Models\InventoryEditHistory;
use Illuminate\Support\Facades\DB;

class ActivityController extends Controller
{
    public function index(Request $request)
    {
        $query = $request->get('query');
        $type = $request->get('type');
        $action = $request->get('action');
        $dateRange = $request->get('date_range');

        // Recent actions for asset additions
        $assetAdditions = Asset::withTrashed()->select(
            'assets.id', 
            'assets.asset_tag_id as name',
            'assets.created_at',
            DB::raw("'Asset' as type"),
            DB::raw("'added' as action"),
            'createdByUser.id as user_id',
            DB::raw("COALESCE(CONCAT(createdByUser.first_name, ' ', createdByUser.last_name), 'System') as user_name")
        )
        ->leftJoin('users as createdByUser', 'assets.created_by', '=', 'createdByUser.id');

        // Recent actions for asset deletions
        $assetDeletions = Asset::withTrashed()
            ->select(
                'assets.id',
                'assets.asset_tag_id as name',
                'assets.deleted_at as created_at',
                DB::raw("'Asset' as type"),
                DB::raw("'removed' as action"),
                'deletedByUser.id as user_id',
                DB::raw("COALESCE(CONCAT(deletedByUser.first_name, ' ', deletedByUser.last_name), 'System') as user_name")
            )
            ->leftJoin('users as deletedByUser', 'assets.deleted_by', '=', 'deletedByUser.id')
            ->whereNotNull('deleted_at');

        // Recent actions for inventory additions
        $inventoryAdditions = Inventory::withTrashed()->select(
            'inventories.id',
            'inventories.items_specs as name',
            'inventories.created_at',
            DB::raw("'Inventory' as type"),
            DB::raw("'added' as action"),
            'createdByUser.id as user_id',
            DB::raw("COALESCE(CONCAT(createdByUser.first_name, ' ', createdByUser.last_name), 'System') as user_name")
        )
        ->leftJoin('users as createdByUser', 'inventories.created_by', '=', 'createdByUser.id');

        // Recent actions for inventory deletions
        $inventoryDeletions = Inventory::withTrashed()
            ->select(
                'inventories.id',
                'inventories.items_specs as name',
                'inventories.deleted_at as created_at',
                DB::raw("'Inventory' as type"),
                DB::raw("'removed' as action"),
                'deletedByUser.id as user_id',
                DB::raw("COALESCE(CONCAT(deletedByUser.first_name, ' ', deletedByUser.last_name), 'System') as user_name")
            )
            ->leftJoin('users as deletedByUser', 'inventories.deleted_by', '=', 'deletedByUser.id')
            ->whereNotNull('deleted_at');

        // Get edit history for assets
        $assetEditHistory = AssetEditHistory::select(
            'asset_edit_histories.asset_id as id',
            DB::raw("(SELECT asset_tag_id FROM assets WHERE id = asset_edit_histories.asset_id) as name"),
            'asset_edit_histories.created_at',
            DB::raw("'Asset' as type"),
            DB::raw("'edited' as action"),
            'editUser.id as user_id',
            DB::raw("CONCAT(editUser.first_name, ' ', editUser.last_name) as user_name")
        )
        ->join('users as editUser', 'asset_edit_histories.user_id', '=', 'editUser.id');

        // Get edit history for inventories
        $inventoryEditHistory = InventoryEditHistory::select(
            'inventory_edit_histories.inventory_id as id',
            DB::raw("(SELECT items_specs FROM inventories WHERE id = inventory_edit_histories.inventory_id) as name"),
            'inventory_edit_histories.created_at',
            DB::raw("'Inventory' as type"),
            DB::raw("'edited' as action"),
            'editUser.id as user_id',
            DB::raw("CONCAT(editUser.first_name, ' ', editUser.last_name) as user_name")
        )
        ->join('users as editUser', 'inventory_edit_histories.user_id', '=', 'editUser.id');

        // Apply filters
        if ($query) {
            $assetAdditions->where('assets.asset_tag_id', 'LIKE', "%{$query}%");
            $assetDeletions->where('assets.asset_tag_id', 'LIKE', "%{$query}%");
            $inventoryAdditions->where('inventories.items_specs', 'LIKE', "%{$query}%");
            $inventoryDeletions->where('inventories.items_specs', 'LIKE', "%{$query}%");
        }

        if ($type) {
            $assetAdditions->where(DB::raw("'Asset'"), $type);
            $assetDeletions->where(DB::raw("'Asset'"), $type);
            $inventoryAdditions->where(DB::raw("'Inventory'"), $type);
            $inventoryDeletions->where(DB::raw("'Inventory'"), $type);
            $assetEditHistory->where(DB::raw("'Asset'"), $type);
            $inventoryEditHistory->where(DB::raw("'Inventory'"), $type);
        }

        if ($action) {
            $assetAdditions->where(DB::raw("'added'"), $action);
            $assetDeletions->where(DB::raw("'removed'"), $action);
            $inventoryAdditions->where(DB::raw("'added'"), $action);
            $inventoryDeletions->where(DB::raw("'removed'"), $action);
            $assetEditHistory->where(DB::raw("'edited'"), $action);
            $inventoryEditHistory->where(DB::raw("'edited'"), $action);
        }

        if ($dateRange) {
            $dates = explode(' - ', $dateRange);
            if (count($dates) == 2) {
                $startDate = $dates[0];
                $endDate = $dates[1];
                
                $assetAdditions->whereBetween('assets.created_at', [$startDate, $endDate]);
                $assetDeletions->whereBetween('assets.deleted_at', [$startDate, $endDate]);
                $inventoryAdditions->whereBetween('inventories.created_at', [$startDate, $endDate]);
                $inventoryDeletions->whereBetween('inventories.deleted_at', [$startDate, $endDate]);
                $assetEditHistory->whereBetween('asset_edit_histories.created_at', [$startDate, $endDate]);
                $inventoryEditHistory->whereBetween('inventory_edit_histories.created_at', [$startDate, $endDate]);
            }
        }

        // Combine and sort actions
        $recentActions = $assetAdditions
            ->union($assetDeletions)
            ->union($inventoryAdditions)
            ->union($inventoryDeletions)
            ->union($assetEditHistory)
            ->union($inventoryEditHistory)
            ->orderBy('created_at', 'desc')
            ->paginate(20)
            ->withQueryString();

        $recentActions->getCollection()->transform(function ($action) {
            return [
                'id' => $action->id,
                'type' => $action->type,
                'name' => $action->name,
                'action' => $action->action,
                'date' => $action->created_at->diffForHumans(),
                'created_at' => $action->created_at,
                'user' => $action->user_name,
            ];
        });

        return view('fcu-ams.activities.index', compact('recentActions'));
    }
}
</file>

<file path="app/Http/Controllers/DepartmentReportController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\SupplyRequest;
use App\Models\Department;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class DepartmentReportController extends Controller
{
    public function index(Request $request)
    {
        $user = auth()->user();
        $departmentId = $user->department_id;

        // Date filters for requests
        $startDate = $request->input('start_date', now()->startOfMonth()->toDateString());
        $endDate = $request->input('end_date', now()->endOfMonth()->toDateString());
        $startDate = Carbon::parse($startDate)->startOfDay();
        $endDate = Carbon::parse($endDate)->endOfDay();

        // Get all requests for the department
        $requests = SupplyRequest::with('department')
            ->select(
                'request_group_id',
                'department_id',
                'requester',
                DB::raw('MIN(created_at) as request_date'),
                DB::raw('COUNT(*) as total_items'),
                DB::raw('MAX(status) as group_status'),
                DB::raw('CASE 
                    WHEN MAX(status) = "pending" THEN 1
                    WHEN MAX(status) = "partially_approved" THEN 2
                    WHEN MAX(status) = "approved" THEN 3
                    WHEN MAX(status) = "rejected" THEN 4
                    ELSE 5 END as status_priority')
            )
            ->where('department_id', $departmentId)
            ->whereBetween('created_at', [$startDate, $endDate])
            ->groupBy('request_group_id', 'department_id', 'requester')
            ->orderBy('status_priority', 'asc')
            ->orderBy('request_date', 'desc')
            ->paginate(10);

        // Get statistics
        $totalRequests = SupplyRequest::where('department_id', $departmentId)->distinct('request_group_id')->count();
        $pendingRequests = SupplyRequest::where('department_id', $departmentId)
            ->where('status', 'pending')
            ->distinct('request_group_id')
            ->count();
        $approvedRequests = SupplyRequest::where('department_id', $departmentId)
            ->where('status', 'approved')
            ->distinct('request_group_id')
            ->count();
        $rejectedRequests = SupplyRequest::where('department_id', $departmentId)
            ->where('status', 'rejected')
            ->distinct('request_group_id')
            ->count();
        $cancelledRequests = SupplyRequest::where('department_id', $departmentId)
            ->where('status', 'cancelled')
            ->distinct('request_group_id')
            ->count();

        // Get monthly request trends
        $monthlyTrends = SupplyRequest::select(
            DB::raw('DATE_FORMAT(created_at, "%Y-%m") as month'),
            DB::raw('COUNT(DISTINCT request_group_id) as count')
        )
            ->where('department_id', $departmentId)
            ->where('created_at', '>=', now()->subMonths(6))
            ->groupBy('month')
            ->orderBy('month')
            ->get();

        $trendLabels = $monthlyTrends->pluck('month')->map(function($month) {
            return Carbon::createFromFormat('Y-m', $month)->format('F Y');
        });
        $trendData = $monthlyTrends->pluck('count');

        // Format date range for display
        $dateRangeDisplay = $this->formatDateRange($startDate, $endDate);

        return view('fcu-ams.reports.department-reports', compact(
            'requests',
            'totalRequests',
            'pendingRequests',
            'approvedRequests',
            'rejectedRequests',
            'cancelledRequests',
            'trendLabels',
            'trendData',
            'dateRangeDisplay',
            'startDate',
            'endDate'
        ));
    }

    private function formatDateRange(Carbon $startDate, Carbon $endDate): string 
    {
        if ($startDate->month == $endDate->month && $startDate->year == $endDate->year) {
            return sprintf(
                "Requests from %s %d %d to %s %d %d",
                $startDate->translatedFormat('F'),
                $startDate->day,
                $startDate->year,
                $endDate->translatedFormat('F'),
                $endDate->day,
                $endDate->year
            );
        }

        return sprintf(
            "Requests from %s %d %d to %s %d %d",
            $startDate->translatedFormat('F'),
            $startDate->day,
            $startDate->year,
            $endDate->translatedFormat('F'),
            $endDate->day,
            $endDate->year
        );
    }
}
</file>

<file path="app/Http/Controllers/LeaseController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Asset;
use DB;
use App\Models\Lease;
use App\Models\Status;
use App\Models\LeaseItem;

class LeaseController extends Controller
{
    public function index(Request $request)
    {
        $this->removeExpiredLeases();
        $search = $request->input('search');

        $leases = Lease::with('assets')->orderBy('id', 'desc');

        if ($search) {
            $leases = $leases->where(function ($q) use ($search) {
                $q->where('leases.id', 'like', '%' . $search . '%')
                    ->orWhere('leases.lease_date', 'like', '%' . $search . '%')
                    ->orWhere('leases.lease_expiration', 'like', '%' . $search . '%')
                    ->orWhere('leases.customer', 'like', '%' . $search . '%')
                    ->orWhere('leases.contact_number', 'like', '%' . $search . '%')
                    ->orWhere('leases.email', 'like', '%' . $search . '%')
                    ->orWhereHas('assets', function ($q) use ($search) {
                        $q->where('assets.asset_tag_id', 'like', '%' . $search . '%');
                    });
            });
        }

        if ($request->input('clear') == 'true') {
            return redirect()->route('lease.index');
        }

        $leases = $leases->paginate(15);

        return view('fcu-ams/lease/lease', compact('leases'));
    }

    private function removeExpiredLeases()
    {
        $leases = Lease::where('lease_expiration', '<', now())->get();

        foreach ($leases as $lease) {
            foreach ($lease->assets as $asset) {
                $asset->updateStatusToAvailable();
                $asset->updateConditionToUsed();
            }

            $lease->delete();
        }
    }

    public function create()
    {
        $assets = Asset::whereNull('deleted_at')
            ->whereHas('status', function ($query) {
                $query->where('status', 'Available');
            })
            ->orderBy('asset_tag_id', 'asc')
            ->get();
        return view('fcu-ams/lease/selectAssets', compact('assets'));
    }


    public function store(Request $request)
    {
        $request->validate([
            'lease_date' => 'required|date',
            'lease_expiration' => 'required|date|after:lease_date',
            'customer' => 'required|string|max:255',
            'contact_number' => 'required|string|max:255',
            'email' => 'required|email|max:255',
            'note' => 'nullable|string',
            'selected_assets' => 'required|array|min:1',
        ]);

        $lease = new Lease();
        $lease->lease_date = $request->input('lease_date');
        $lease->lease_expiration = $request->input('lease_expiration');
        $lease->customer = $request->input('customer');
        $lease->contact_number = $request->input('contact_number');
        $lease->email = $request->input('email');
        $lease->note = $request->input('note') ?? null;
        $lease->save();

        $selectedAssets = $request->input('selected_assets');
        if ($selectedAssets) {
            foreach ($selectedAssets as $assetId) {
                $leaseItem = new LeaseItem();
                $leaseItem->lease_id = $lease->id;
                $leaseItem->asset_id = $assetId;
                $leaseItem->save();

                $asset = Asset::find($assetId);
                $asset->updateStatusToLeased();
            }
        }

        return redirect()->route('lease.index')->with('success', 'Lease created successfully.');
    }

    public function createForm(Request $request)
    {
        $this->validate($request, [
            'selected_assets' => 'required|array|min:1',
        ], [
            'selected_assets.required' => 'Please select at least one asset.',
        ]);

        $selectedAssets = $request->input('selected_assets');
        if ($selectedAssets) {
            $assets = Asset::whereIn('id', $selectedAssets)->get();
            return view('fcu-ams/lease/leaseForm', compact('assets', 'selectedAssets'));
        } else {
            return view('fcu-ams/lease/leaseForm')->with('error', 'Please select at least one asset.');
        }
    }

    public function show($id)
    {
        $lease = Lease::with(['assets.category', 'assets.brand'])->findOrFail($id);
        return view('fcu-ams.lease.view-lease', compact('lease'));
    }

    // public function endLease(Request $request, Lease $lease)
    // {
    //     foreach ($lease->assets as $asset) {
    //         $asset->status_id = Status::where('status', 'Available')->first()->id;
    //         $asset->save();
    //     }

    //     return redirect()->route('lease.index')->with('success', 'Lease ended successfully.');
    // }

}
</file>

<file path="app/Http/Controllers/UserController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use App\Models\Role;

class UserController extends Controller
{
    public function index() {
        $users = User::with('role')->orderBy('first_name', 'asc')->paginate(10);
        $roles = Role::all();

        return view('fcu-ams/users/usersList', compact('users', 'roles'));
    }

    public function add(Request $request)
    {
        $request->validate([
            'profile_picture' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'first_name' => 'required|string',
            'middle_name' => 'nullable|string',
            'last_name' => 'required|string',
            'address' => 'required|string',
            'contact_number' => 'required|string',
            'role_id' => 'required|exists:roles,id',
            'department_id' => 'required|exists:departments,id',
            'email' => 'required|email|unique:users',
            'username' => 'required|string|unique:users',
            'password' => 'required|string|confirmed',
            'password_confirmation' => 'required|string',
        ]);

        $user = new User();
        $user->first_name = $request->input('first_name');
        $user->middle_name = $request->input('middle_name');
        $user->last_name = $request->input('last_name');
        $user->address = $request->input('address');
        $user->contact_number = $request->input('contact_number');
        $user->role_id = $request->input('role_id');
        $user->department_id = $request->input('department_id');
        $user->email = $request->input('email');
        $user->username = $request->input('username');
        $user->password = Hash::make($request->input('password'));

        if ($request->hasFile('profile_picture')) {
            $imageName = time().'.'.$request->profile_picture->extension();
            $request->profile_picture->move(public_path('profile'), $imageName);
            $user->profile_picture = 'profile/'.$imageName;
        }

        $user->save();

        return redirect()->route('user.index')->with('success', 'User created successfully!');
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'profile_picture' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'first_name' => 'required|string',
            'middle_name' => 'nullable|string',
            'last_name' => 'required|string',
            'address' => 'required|string',
            'contact_number' => 'required|string',
            'role_id' => 'required|exists:roles,id',
            'department_id' => 'required|exists:departments,id',
            'email' => 'required|email|unique:users,email,'.$id,
            'username' => 'required|string|unique:users,username,'.$id,
        ]);

        $user = User::find($id);
        $user->first_name = $request->input('first_name');
        $user->middle_name = $request->input('middle_name');
        $user->last_name = $request->input('last_name');
        $user->address = $request->input('address');
        $user->contact_number = $request->input('contact_number');
        $user->role_id = $request->input('role_id');
        $user->department_id = $request->input('department_id');
        $user->email = $request->input('email');
        $user->username = $request->input('username');

        if ($request->hasFile('profile_picture')) {
            if ($user->profile_picture && 
                file_exists(public_path($user->profile_picture)) && 
                !in_array(basename($user->profile_picture), ['mele.png', 'liling.jpg', '1728809102.jpg', 'defaultProfile.png'])) {
                unlink(public_path($user->profile_picture));
            }
            
            $imageName = time().'.'.$request->profile_picture->extension();
            $request->profile_picture->move(public_path('profile'), $imageName);
            $user->profile_picture = 'profile/'.$imageName;
        }

        $user->save();

        return redirect()->route('user.index')->with('success', 'User updated successfully!');
    }

    public function destroy($id)
    {
        $user = User::findOrFail($id);

        if ($user->profile_picture) {
            unlink(public_path($user->profile_picture));
        }

        try {
            $user->delete();
            return redirect()->route('user.index')->with('success', 'User deleted successfully!');
        } catch (\Illuminate\Database\QueryException $e) {
            return redirect()->route('user.index')->withErrors(['error' => 'Cannot delete user because it is associated with other data.']);
        }
    }

    public function signup(Request $request)
    {
        $request->validate([
            'profile_picture' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'first_name' => 'required|string',
            'middle_name' => 'nullable|string',
            'last_name' => 'required|string',
            'address' => 'required|string',
            'contact_number' => 'required|string',
            'email' => 'required|email|unique:users',
            'username' => 'required|string|unique:users',
            'password' => 'required|string|confirmed',
            'password_confirmation' => 'required|string',
            'department_id' => 'required|exists:departments,id',
        ]);

        $user = new User();
        $user->first_name = $request->input('first_name');
        $user->middle_name = $request->input('middle_name');
        $user->last_name = $request->input('last_name');
        $user->address = $request->input('address');
        $user->contact_number = $request->input('contact_number');
        $user->email = $request->input('email');
        $user->username = $request->input('username');
        $user->password = Hash::make($request->input('password'));
        $user->department_id = $request->input('department_id');

        $departmentRole = Role::where('role', 'Department')->first();
        if ($departmentRole) {
            $user->role_id = $departmentRole->id;
        }

        if ($request->hasFile('profile_picture')) {
            $imageName = time().'.'.$request->profile_picture->extension();
            $request->profile_picture->move(public_path('profile'), $imageName);
            $user->profile_picture = 'profile/'.$imageName;
        }

        $user->save();

        return redirect()->route('signup')->with('success', 'User created successfully!');
    }
}
</file>

<file path="app/Models/DisposedStatus.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class DisposedStatus extends Model
{
    protected $fillable = [
        'status'
    ];

    public function assets(): HasMany
    {
        return $this->hasMany(Asset::class, 'disposed_status_id');
    }
}
</file>

<file path="app/Models/Inventory.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Inventory extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'unique_tag',
        'stock_image',
        'quantity',
        'unit_id',
        'brand_id',
        'items_specs',
        'unit_price',
        'deleted_at',
        'department_id',
        'stock_out_date',
        'created_by',
        'deleted_by',
        'supplier_id',
    ];

    public function supplier()
    {
        return $this->belongsTo(Supplier::class);
    }

    public function unit()
    {
        return $this->belongsTo(Unit::class);
    }

    public function brand()
    {
        return $this->belongsTo(Brand::class);
    }

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    public function editHistory()
    {
        return $this->hasMany(InventoryEditHistory::class);
    }

    public function generateUniqueTag()
    {
        $firstLetter = substr($this->items_specs, 0, 1);
        $existingTags = self::where('unique_tag', 'like', 'S-' . $firstLetter . '%')->get();
        $nextNumber = count($existingTags) + 1;

        return 'S-' . $firstLetter . $nextNumber;
    }

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($inventory) {
            $inventory->unique_tag = $inventory->generateUniqueTag();
        });

        static::creating(function ($inventory) {
            if (empty($inventory->created_by) && auth()->check()) {
                $inventory->created_by = auth()->id();
            }
        });

        static::deleting(function ($inventory) {
            if (empty($inventory->deleted_by) && auth()->check()) {
                $inventory->deleted_by = auth()->id();
            }
        });
    }
}
</file>

<file path="app/Models/Lease.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Lease extends Model
{
    use HasFactory;

    protected $fillable = [
        'lease_date',
        'lease_expiration',
        'customer',
        'contact_number',
        'email',
        'note',
    ];

    public function leaseItems()
    {
        return $this->hasMany(LeaseItem::class);
    }

    public function assets()
    {
        return $this->belongsToMany(Asset::class, 'lease_items');
    }
}
</file>

<file path="app/Models/User.php">
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class User extends Authenticatable
{
    use HasFactory, Notifiable;

    protected $fillable = [
        'profile_picture',
        'first_name',
        'middle_name',
        'last_name',
        'address',
        'contact_number',
        'email',
        'username',
        'password',
        'department_id',
        'last_checked_notifications',
    ];

    protected $casts = [
        'last_checked_notifications' => 'datetime',
        'last_checked_alerts' => 'datetime',
    ];

    public function role()
    {
        return $this->belongsTo(Role::class);
    }

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    // public function getProfilePictureAttribute($value)
    // {
    //     if ($value) {
    //         return Storage::disk('public')->url('profile_pictures/'.$value);
    //     }
    //     return null;
    // }

    public function getAuthIdentifierName()
    {
        return 'username';
    }

    public function hasRole($role)
    {
        return $this->role->name === $role;
    }
}

/**
 * The attributes that are mass assignable.
 *
 * @var array<int, string>
 */
// protected $fillable = [
//     'name',
//     'email',
//     'password',
// ];

/**
 * The attributes that should be hidden for serialization.
 *
 * @var array<int, string>
 */
// protected $hidden = [
//     'password',
//     'remember_token',
// ];

/**
 * Get the attributes that should be cast.
 *
 * @return array<string, string>
 */
// protected function casts(): array
// {
//     return [
//         'email_verified_at' => 'datetime',
//         'password' => 'hashed',
//     ];
// }
</file>

<file path="app/Services/ReportPrintService.php">
<?php

namespace App\Services;

use Barryvdh\DomPDF\Facade\Pdf;
use Carbon\Carbon;

class ReportPrintService
{
    public function printMonthlySupplierReport($inventories, $startDate, $endDate)
    {
        $startDate = Carbon::parse($startDate);
        $endDate = Carbon::parse($endDate);

        $totalValue = $inventories->sum(function ($inventory) {
            return $inventory->quantity * $inventory->unit_price;
        });

        $pdf = PDF::loadView('reports.monthly-supplier-pdf', [
            'inventories' => $inventories,
            'startDate' => $startDate->format('F j, Y'),
            'endDate' => $endDate->format('F j, Y'),
            'totalValue' => $totalValue
        ]);

        $fileName = "inventory_report_" . $startDate->format('Y-m-d') . "_to_" . $endDate->format('Y-m-d') . ".pdf";
        return $pdf->download($fileName);
    }

    public function printMonthlyAssetsReport($assets, $startDate, $endDate)
    {
        $startDate = Carbon::parse($startDate);
        $endDate = Carbon::parse($endDate);

        $totalValue = $assets->sum('cost');

        $pdf = PDF::loadView('reports.monthly-assets-pdf', [
            'assets' => $assets,
            'startDate' => $startDate->format('F j, Y'),
            'endDate' => $endDate->format('F j, Y'),
            'totalValue' => $totalValue
        ]);

        $fileName = "assets_report_" . $startDate->format('Y-m-d') . "_to_" . $endDate->format('Y-m-d') . ".pdf";
        return $pdf->download($fileName);
    }

    public function printAssignedAssetsReport($assets, $assignee)
    {
        $totalValue = $assets->sum('cost');
        $currentDate = Carbon::now()->format('F j, Y');

        $pdf = PDF::loadView('reports.assigned-assets-pdf', [
            'assets' => $assets,
            'assignee' => $assignee,
            'currentDate' => $currentDate,
            'totalValue' => $totalValue
        ]);

        $fileName = "assigned_assets_" . str_replace(' ', '_', strtolower($assignee)) . "_" . Carbon::now()->format('Y-m-d') . ".pdf";
        return $pdf->download($fileName);
    }
}
</file>

<file path="Custom Commands.txt">
- php artisan db:reset
- php artisan inventory:soft-delete-all
</file>

<file path="database/migrations/2024_08_09_144642_create_user_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('profile_picture')->nullable();
            $table->string('first_name');
            $table->string('middle_name')->nullable();
            $table->string('last_name');
            $table->string('address');
            $table->string('contact_number');
            $table->unsignedBigInteger('role_id');
            $table->foreign('role_id')->references('id')->on('roles');
            $table->unsignedBigInteger('department_id');
            $table->foreign('department_id')->references('id')->on('departments');
            $table->string('email');
            $table->string('username');
            $table->string('password');
            $table->timestamp('last_checked_alerts')->nullable();
            $table->timestamp('last_checked_notifications')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('users');
    }
};
</file>

<file path="database/migrations/2024_08_18_092742_create_leases_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('leases', function (Blueprint $table) {
            $table->id();
            $table->date('lease_date');
            $table->date('lease_expiration');
            $table->string('customer');
            $table->string('contact_number');
            $table->string('email');
            $table->string('note')->nullable();
            $table->timestamps();
        });
    }

    public function down()
    {
        Schema::dropIfExists('leases');
    }
};
</file>

<file path="database/seeders/ConditionSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class ConditionSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $conditions = ['New', 'Maintenance', 'Repaired', 'Used', 'Disposed'];

        foreach ($conditions as $condition) {
            DB::table('conditions')->insert([
                'condition' => $condition,
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }
    }
}
</file>

<file path="database/seeders/DefaultUserSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use App\Models\Role;
use App\Models\Department;

class DefaultUserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $adminRole = Role::where('role', 'Administrator')->first();
        $managerRole = Role::where('role', 'Manager')->first();
        $departmentRole = Role::where('role', 'Department')->first();
        $ccsDepartment = Department::where('department', 'CCS Department')->first();

        User::create([
            'profile_picture' => 'profile/1728809102.jpg',
            'first_name' => 'Wealyn',
            'last_name' => 'Yap',
            'address' => 'Roxas City',
            'contact_number' => '09123456789',
            'role_id' => $managerRole->id,
            'username' => 'wyap',
            'password' => Hash::make('wyap@'),
            'department_id' => $ccsDepartment->id,
            'email' => 'wyap@gmail.com',
        ]);

        User::create([
            'profile_picture' => 'profile/mele.png',
            'first_name' => 'Gimelle Jen',
            'last_name' => 'Galera',
            'address' => 'Roxas City',
            'contact_number' => '09123456389',
            'role_id' => $adminRole->id,
            'username' => 'admin',
            'password' => Hash::make('admin123'),
            'department_id' => $ccsDepartment->id,
            'email' => 'mele@gmail.com',
        ]);

        User::create([
            'profile_picture' => 'profile/liling.jpg',
            'first_name' => 'Eliza Jane',
            'last_name' => 'Hingco',
            'address' => 'Roxas City',
            'contact_number' => '09123476389',
            'role_id' => $departmentRole->id,
            'username' => 'liling',
            'password' => Hash::make('liling@'),
            'department_id' => $ccsDepartment->id,
            'email' => 'liling@gmail.com',
        ]);
    }
}
</file>

<file path="database/seeders/ForeignRelatedTablesSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Department;
use App\Models\Status;
use App\Models\Unit;
use App\Models\Brand;
use App\Models\Condition;
use App\Models\DisposedStatus;

class ForeignRelatedTablesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run()
    {
        // Seed Supplier
        $suppliers = [
            ['supplier' => 'Quality Source Suppliers'],
            ['supplier' => 'Apex Manufacturing Solutions'],
            ['supplier' => 'Precision Supply Co.'],
            ['supplier' => 'PC Express'],
            ['supplier' => 'Asianic Distributors Inc.'],
            ['supplier' => 'Iridium Technologies, Inc.'],
        ];

        foreach ($suppliers as $supplier) {
            Supplier::create($supplier);
        }

        // Brand seeder
        $brands = [
            ['brand' => 'Canon'],
            ['brand' => 'Faber-Castell'],
            ['brand' => 'Pilot'],
            ['brand' => 'Staedtler'],
            ['brand' => 'Staedtler Noris'],
            ['brand' => 'Tombow'],
            ['brand' => 'Zebra'],
            ['brand' => 'HP'],
            ['brand' => 'Dell'],
            ['brand' => 'Cisco'],
        ];

        foreach ($brands as $brand) {
            Brand::create($brand);
        }

        // Disposed_status seeder
        $disposed_statuses = [
            ['status' => 'Garbage'],
            ['status' => 'Donated'],
            ['status' => 'Sold'],
        ];

        foreach ($disposed_statuses as $disposed_status) {
            DisposedStatus::create($disposed_status);
        }

        // Seed Site
        $sites = [
            ['site' => 'Annex Campus'],
            ['site' => 'Main Campus'],
        ];
        
        foreach ($sites as $site){
            Site::create($site);
        }

        // Seed Location
        Location::create([
            'location' => 'Roxas City',
        ]);

        // Seed Category
        $categories = [
            ['category' => 'Desktop'],
            ['category' => 'Monitor'],
            ['category' => 'Laptop'],
            ['category' => 'Printer'],
            ['category' => 'Phone'],
        ];

        foreach ($categories as $category) {
            Category::create($category);
        };

        // Seed Department
        $departments = [
            ['department' => 'CCS Department'],
            ['department' => 'CAS Department'],
        ];
        
        foreach ($departments as $department){
            Department::create($department);
        }
        
        // Seed Status
        $statuses = [
            ['status' => 'Available'],
            ['status' => 'Unavailable'],
            ['status' => 'Leased'],
        ];

        foreach ($statuses as $status) {
            Status::create($status);
        };

        $units = [
            ['unit' => 'per ream'],
            ['unit' => 'per piece'],
            ['unit' => 'per inch'],
            ['unit' => 'per feet'],
            ['unit' => 'per yard'],
            ['unit' => 'per liter'],
            ['unit' => 'per milliliter'],
            ['unit' => 'per gallon'],
            ['unit' => 'per ounce'],
            ['unit' => 'per dozen'],
            ['unit' => 'per pack'],
            ['unit' => 'per box'],
        ];

        foreach ($units as $unit) {
            Unit::create($unit);
        }
    }
}
</file>

<file path="database/seeders/RoleSeeder.php">
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class RoleSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $roles = ['Administrator', 'Manager', 'Department'];

        foreach ($roles as $role) {
            DB::table('roles')->insert([
                'role' => $role,
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }
    }
}
</file>

<file path="docs/workflow-rules.md">
# Cursor Workflow Rules

This project has been updated to use the auto rule generator from [cursor-auto-rules-agile-workflow](https://github.com/bmadcode/cursor-auto-rules-agile-workflow).

> **Note**: This script can be safely re-run at any time to update the template rules to their latest versions. It will not impact or overwrite any custom rules you've created.

## Core Features

- Automated rule generation
- Standardized documentation formats
- AI behavior control and optimization
- Flexible workflow integration options

## Workflow Integration Options

### 1. Automatic Rule Application (Recommended)
The core workflow rules are automatically installed in `.cursor/rules/`:
- `901-prd.mdc` - Product Requirements Document standards
- `902-arch.mdc` - Architecture documentation standards
- `903-story.mdc` - User story standards
- `801-workflow-agile.mdc` - Complete Agile workflow (optional)

These rules are automatically applied when working with corresponding file types.

### 2. Notepad-Based Workflow
For a more flexible approach, use the templates in `xnotes/`:
1. Enable Notepads in Cursor options
2. Create a new notepad (e.g., "agile")
3. Copy contents from `xnotes/workflow-agile.md`
4. Use \`@notepad-name\` in conversations

> 💡 **Tip:** The Notepad approach is ideal for:
> - Initial project setup
> - Story implementation
> - Focused development sessions
> - Reducing context overhead

## Getting Started

1. Review the templates in \`xnotes/\`
2. Choose your preferred workflow approach
3. Start using the AI with confidence!

For demos and tutorials, visit: [BMad Code Videos](https://youtube.com/bmadcode)
</file>

<file path="inventories.csv">
items_specs,quantity,unit,brand,unit_price,supplier
Ballpen,15,per piece,Faber-Castell,50,Quality Source Suppliers
G-Tec-C4 Gel Ink Pen,10,per piece,Pilot,30,Quality Source Suppliers
Pencil,5,per piece,Staedtler Noris,20,Quality Source Suppliers
9000 Graphite Pencil,10,per piece,Faber-Castell,25,Quality Source Suppliers
Mono 100 Pencil,15,per piece,Tombow,30,Quality Source Suppliers
Acroball Pen,5,per piece,Pilot,40,Quality Source Suppliers
Sarasa Gel Pen,5,per piece,Zebra,35,Quality Source Suppliers
Pitt Artist Pen,3,per piece,Faber-Castell,45,Quality Source Suppliers
Lumocolor Permanent Marker,10,per piece,Staedtler,50,Quality Source Suppliers
ABT Dual Tip Marker,100,per piece,Tombow,40,Quality Source Suppliers
Polychromos Pencil,10,per piece,Faber-Castell,55,Quality Source Suppliers
G2 Gel Ink Pen,100,per piece,Pilot,35,Quality Source Suppliers
F-701 Ballpoint Pen,3,per piece,Zebra,30,Quality Source Suppliers
Ergosoft Pencil,5,per piece,Staedtler,25,Quality Source Suppliers
Fudenosuke Brush Pen,1,per piece,Tombow,40,Quality Source Suppliers
Kneaded Eraser,100,per piece,Faber-Castell,20,Quality Source Suppliers
FriXion Erasable Pen,1,per piece,Pilot,35,Quality Source Suppliers
Midliner Highlighter,100,per piece,Zebra,30,Quality Source Suppliers
Textsurfer Highlighter,100,per piece,Staedtler,25,Quality Source Suppliers
Dual Tip Highlighter,3,per piece,Tombow,40,Quality Source Suppliers
Bond Paper Long,100,per ream,Canon,450,Apex Manufacturing Solutions
Bond Paper Short,100,per ream,Canon,350,Apex Manufacturing Solutions
</file>

<file path="projectStructure.txt">
1. Core Project Structure:
- Main project: FCU-AMS
- 5 major modules: AssetManagement, InventoryManagement, LeaseManagement, UserManagement, and AlertSystem
- 1 feature module: Dashboard

2. Key Models:
- Asset: Core model for tracking physical assets
- Inventory: For managing stock and supplies
- Lease: For managing asset leasing
- Supporting models: Department, Category, Supplier, Location, Condition, Status, Brand

3. Module Relationships:
- UserManagement controls access to other modules
- AlertSystem monitors assets, inventory, and leases
- Dashboard displays asset and inventory information
- LeaseManagement uses assets for leasing

4. Model Relationships:
- Assets belong to departments, categories, and brands
- Assets are supplied by suppliers
- Assets are located at locations
- Assets have conditions and statuses
- Inventory items belong to categories and brands
- Inventory items are supplied by suppliers

5. Access Control:
- Role-based access control implemented
- Department users have restricted access
- Manager users have broader access but some restrictions

The system appears to be a comprehensive asset management solution with:
- Asset tracking and management
- Inventory control
- Lease management
- Supply request handling
- Maintenance tracking
- QR code integration
- Reporting capabilities
- Role-based access control

Would you like me to explore any particular aspect of the system in more detail?
</file>

<file path="prompts.txt">
add comma to the cost:
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/viewAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <a href=""
            onclick="window.history.back(); return false;"
            class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
            </a>
            <h1 class="my-auto text-3xl">Asset</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="bg-white p-5 shadow-md m-3 rounded-md">
                <div class="p-3">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-bold text-gray-800">Asset Details</h2>
                        <!-- Asset Image -->
                        <div class="space-y-1 inline-block border-2 border-gray-300 shadow-md rounded-lg bg-slate-50">
                            <div class="w-16 h-16 rounded-lg overflow-hidden bg-gray-100">
                                @if($asset->asset_image)
                                    <img src="{{ asset($asset->asset_image) }}" alt="Asset Image" 
                                        class="w-full h-full object-cover">
                                @else
                                    <div class="w-full h-full flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                                            stroke-width="1.5" stroke="currentColor" class="w-12 h-12 text-gray-400">
                                            <path stroke-linecap="round" stroke-linejoin="round" 
                                                d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                        </svg>
                                    </div>
                                @endif
                            </div>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <!-- Asset Basic Info -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Basic Information</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Asset Tag ID</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->asset_tag_id }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Model</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->model }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Serial Number</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->serial_number }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Specifications</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->specs }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Cost</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->cost }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Category</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->category->category }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Brand</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->brand->brand }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Supplier</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->supplier->supplier }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Purchase Date</label>
                                    <p class="text-sm font-medium text-gray-900">{{ date('F j, Y', strtotime($asset->purchase_date)) }}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Asset Location -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0zm-9-3.75h.008v.008H12V8.25z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Location Details</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Site</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->site->site }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Location</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->location->location }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Department</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->department->department }}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Assignment Details -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Assignment Details</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Assigned To</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->assigned_to ?? 'Not Assigned' }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Date Issued</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->issued_date ? date('F j, Y', strtotime($asset->issued_date)) : 'Not Set' }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Notes</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->notes ?? 'No notes available' }}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Asset Status -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Status Information</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Status</label>
                                    <p class="text-sm font-medium">
                                        <span class="px-4 py-2 rounded-full text-xs font-semibold
                                            @if($asset->status_id == 1) bg-green-100 text-green-800
                                            @elseif($asset->status_id == 2) bg-yellow-100 text-yellow-800
                                            @else bg-red-100 text-red-800
                                            @endif">
                                            {{ $asset->status->status }}
                                        </span>
                                    </p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Condition</label>
                                    <p class="text-sm font-medium">
                                        <span class="px-4 py-2 rounded-full text-xs font-semibold
                                            @if($asset->condition_id == 1) bg-green-100 text-green-800
                                            @elseif($asset->condition_id == 2) bg-yellow-100 text-yellow-800
                                            @else bg-red-100 text-red-800
                                            @endif">
                                            {{ $asset->condition->condition }}
                                        </span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="flex">
                            @if(Auth::user()->role->role != 'Department')
                            <a href="{{ route('asset.qrCode', $asset->id) }}" class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500 transition-all
                                duration-200 hover:scale-105 ml-auto ease-in hover:shadow-inner text-white flex gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                    stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M3.75 4.875c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5A1.125 1.125 0 0 1 3.75 9.375v-4.5ZM3.75 14.625c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5a1.125 1.125 0 0 1-1.125-1.125v-4.5ZM13.5 4.875h.008v.008H12v-.008z" />
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M6.75 6.75h.75v.75h-.75v-.75ZM6.75 16.5h.75v.75h-.75v-.75ZM16.5 6.75h.75v.75h-.75v-.75ZM13.5 13.5h.75v.75h-.75v-.75ZM13.5 19.5h.75v.75h-.75v-.75ZM19.5 13.5h.75v.75h-.75v-.75ZM19.5 19.5h.75v.75h-.75v-.75ZM16.5 16.5h.75v.75h-.75v-.75Z" />
                                </svg>
                                Generate Asset Tag
                            </a>
                            @endif
                        </div>
            </div>
            
        @if($editHistory->isNotEmpty())
            <div class="bg-white p-6 shadow-lg m-3 rounded-lg">
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center gap-3">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" 
                            stroke="currentColor" class="w-6 h-6 text-blue-600">
                            <path stroke-linecap="round" stroke-linejoin="round" 
                                d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        <h2 class="text-2xl font-bold text-gray-800">Edit History</h2>
                    </div>
                    <span class="text-sm text-gray-500">Showing latest change</span>
                </div>
                <div class="overflow-hidden rounded-lg border border-gray-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Date & Time
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Modified by
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Changes Made
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($editHistory as $history)
                                <tr class="hover:bg-gray-50 transition-colors duration-200">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        <div class="flex items-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                                                stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-gray-400">
                                                <path stroke-linecap="round" stroke-linejoin="round" 
                                                    d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5" />
                                            </svg>
                                            {{ $history->created_at->format('Y-m-d H:i:s') }}
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-8 w-8">
                                                @if($history->user->profile_picture)
                                                    <img class="h-8 w-8 rounded-full object-cover" 
                                                        src="{{ asset($history->user->profile_picture) }}" alt="">
                                                @else
                                                    <div class="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center">
                                                        <span class="text-white text-sm font-medium">
                                                            {{ substr($history->user->first_name, 0, 1) }}{{ substr($history->user->last_name, 0, 1) }}
                                                        </span>
                                                    </div>
                                                @endif
                                            </div>
                                            <div class="ml-3">
                                                <p class="text-sm font-medium text-gray-900">
                                                    {{ $history->user->first_name }} {{ $history->user->last_name }}
                                                </p>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-600">
                                        <div class="">
                                            {!! nl2br($history->changes) !!}
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex items-center justify-between px-4 mb-3">
                    <div class="flex items-center gap-2">
                        <a href="{{ $editHistory->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $editHistory->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                    
                    <div class="text-sm text-gray-700">
                        <span>Showing</span>
                        <span class="font-medium">{{ $editHistory->firstItem() ?? 0 }}</span>
                        <span>to</span>
                        <span class="font-medium">{{ $editHistory->lastItem() ?? 0 }}</span>
                        <span>of</span>
                        <span class="font-medium">{{ $editHistory->total() }}</span>
                        <span>results</span>
                    </div>

                    <div class="flex items-center gap-2">
                        <a href="{{ $editHistory->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M7.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L10.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $editHistory->url($editHistory->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        @endif
    </div>
</div>

<script src="{{ asset('js/chart.js') }}"></script>
 
<script>
    document.addEventListener('DOMContentLoaded', function () {
                // Get the current URL
                var currentUrl = window.location.href;
                // Get all dropdown buttons
                var dropdownButtons = document.querySelectorAll('.relative button');
                            // Loop through each dropdown link
            dropdownLinks.forEach(function (link) {
                // Check if the current URL matches the link's href
                if (currentUrl === link.href) {
                    // Open the dropdown
                    button.click();
                }
            });
        });
    });

</script>

@endsection

I use laravel 10 + tailwind btw
</file>

<file path="public/js/errorMessageTimer.js">
document.addEventListener("DOMContentLoaded", () => {
    const errorMessage = document.querySelector(".errorMessageWithTimer");

    if (errorMessage) {
        setTimeout(() => {
            errorMessage.style.display = "none";
        }, 9000);
    }
});
</file>

<file path="public/js/successMessageTimer.js">
document.addEventListener("DOMContentLoaded", () => {
    const successMessage = document.querySelector(".successMessage");

    if (successMessage) {
        setTimeout(() => {
            successMessage.style.display = "none";
        }, 9000);
    }
});
</file>

<file path="resources/views/fcu-ams/alert/alerts.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">

<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
    
            <h1 class="my-auto text-3xl">Alerts Dashboard</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="m-3">
            @include('layouts.messageWithoutTimerForError')
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4 p-4">
            <!-- Expiring Leases -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden flex flex-col">
                <div class="bg-orange-500 text-white p-4 flex items-center">
                    <svg class="w-8 h-8 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0zm-6 9l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z">
                        </path>
                    </svg>
                    <h2 class="text-xl font-bold">Expiring Leases</h2>
                </div>
                <div class="p-4 flex-1">
                    @if($expiringLeases->isEmpty())
                        <p class="text-center text-gray-500">No leases expiring soon.</p>
                    @else
                        <div class="space-y-3">
                            @foreach($expiringLeases as $lease)
                                <div class="border-l-4 border-orange-500 bg-orange-50 p-3 rounded">
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <p class="font-semibold">{{ $lease->customer }}</p>
                                            <p class="text-sm text-gray-600">
                                                {{ $lease->assets->count() }}
                                                {{ Str::plural('asset', $lease->assets->count()) }}
                                            </p>
                                            <p class="text-xs text-gray-500">
                                                Expires
                                                {{ \Carbon\Carbon::parse($lease->lease_expiration)->diffForHumans() }}
                                            </p>
                                        </div>
                                        <a href="{{ route('lease.show', $lease->id) }}"
                                            class="text-orange-600 hover:text-orange-800">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                                xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z">
                                                </path>
                                            </svg>
                                        </a>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @endif
                </div>
                @if($totalExpiringLeases > 5)
                    <div class="p-4 text-center border-t border-gray-200">
                        <a href="{{ route('alerts.expiring-leases') }}"
                            class="text-orange-600 hover:underline">
                            View All {{ $totalExpiringLeases }} Expiring Leases
                        </a>
                    </div>
                @endif
            </div>

            <!-- Assets Past Maintenance Alert -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden flex flex-col">
                <div class="bg-red-500 text-white p-4 flex items-center">
                    <svg class="w-8 h-8 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z">
                        </path>
                    </svg>
                    <h2 class="text-xl font-bold">Maintenance Overdue Assets</h2>
                </div>
                <div class="p-4 flex-1">
                    @if($pastDueAssets->isEmpty())
                        <p class="text-center text-gray-500">No assets past maintenance due date.</p>
                    @else
                        <div class="space-y-3">
                            @foreach($pastDueAssets as $asset)
                                <div class="border-l-4 border-red-500 bg-red-50 p-3 rounded">
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <p class="font-semibold">{{ $asset->asset_tag_id }} -
                                                {{ $asset->model }}</p>
                                            <p class="text-sm text-gray-600">
                                                Maintenance Due:
                                                {{ \Carbon\Carbon::parse($asset->maintenance_end_date)->toFormattedDateString() }}
                                            </p>
                                        </div>
                                        <a href="{{ route('asset.show', $asset->id) }}"
                                            class="text-red-600 hover:text-red-800">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                                xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z">
                                                </path>
                                            </svg>
                                        </a>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @endif
                </div>
                @if($pastDueCount > 1)
                    <div class="p-4 text-center border-t border-gray-200">
                        <a href="{{ route('alerts.maintenance') }}" class="text-red-600 hover:underline">
                            View All {{ $pastDueCount }} Overdue Assets
                        </a>
                    </div>
                @endif
            </div>

            <!-- Pending Supply Requests -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden flex flex-col">
                <div class="bg-yellow-500 text-white p-4 flex items-center">
                    <svg class="w-8 h-8 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4">
                        </path>
                    </svg>
                    <h2 class="text-xl font-bold">Pending Supply Requests</h2>
                </div>
                <div class="p-4 flex-1">
                    @if($pendingRequests->isEmpty())
                        <p class="text-center text-gray-500">No pending supply requests.</p>
                    @else
                        <div class="space-y-3">
                            @foreach($pendingRequests as $request)
                                <div class="border-l-4 border-yellow-500 bg-yellow-50 p-3 rounded">
                                    <div class="flex justify-between items-center">
                                        <div>
                                            <p class="font-semibold">{{ $request->requester }}</p>
                                            <p class="text-sm text-gray-600">
                                                {{ $request->department->department }} - 
                                                {{ $request->items_count }} {{ Str::plural('item', $request->items_count) }}
                                            </p>
                                            <p class="text-xs text-gray-500">
                                                Requested on {{ \Carbon\Carbon::parse($request->request_date)->toFormattedDateString() }}
                                            </p>
                                        </div>
                                        <a href="{{ route('inventory.supply-request.details', ['request_group_id' => $request->request_group_id]) }}"
                                            class="text-yellow-600 hover:text-yellow-800">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                                xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z">
                                                </path>
                                            </svg>
                                        </a>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @endif
                </div>
                @if($totalPendingRequests > 5)
                    <div class="p-4 text-center border-t border-gray-200">
                        <a href="{{ route('alerts.pending-requests') }}" class="text-yellow-600 hover:underline">
                            View All {{ $totalPendingRequests }} Pending Requests
                        </a>
                    </div>
                @endif
            </div>

            <!-- Additional Alert Placeholders
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="bg-blue-500 text-white p-4 flex items-center">
                    <svg class="w-8 h-8 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z">
                        </path>
                    </svg>
                    <h2 class="text-xl font-bold">Additional Alerts</h2>
                </div>
                <div class="p-4 text-center text-gray-500">
                    No additional alerts at the moment.
                </div>
            </div> -->
        </div>
    </div>
</div>

<script src="{{ asset('js/chart.js') }}"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get the current URL
        var currentUrl = window.location.href;

        // Get all dropdown buttons
        var dropdownButtons = document.querySelectorAll('.relative button');

        // Loop through each dropdown button
        dropdownButtons.forEach(function (button) {
            // Get the dropdown links
            var dropdownLinks = button.nextElementSibling.querySelectorAll('a');

            // Loop through each dropdown link
            dropdownLinks.forEach(function (link) {
                // Check if the current URL matches the link's href
                if (currentUrl === link.href) {
                    // Open the dropdown
                    button.click();
                }
            });
        });
    });
</script>

@endsection
</file>

<file path="resources/views/fcu-ams/asset/addAsset.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Add New Asset</h1>
            <div class="w-10"></div>
        </nav>

        <!-- Main content -->
        <div class="m-3 2xl:max-w-7xl 2xl:mx-auto mb-6">
            <div class="mb-3">
                @include('layouts.messageWithoutTimerForError')
            </div>

            <!-- Form -->
            <div class="bg-white shadow rounded-lg">
                <form method="POST" enctype="multipart/form-data"
                    action="{{ route('asset.add.store') }}" class="space-y-6 p-6">
                    @csrf

                    <!-- Asset Image -->
                    <div class="space-y-1">
                        <label for="asset_image" class="block text-sm font-medium text-gray-700">Asset Image</label>
                        <div class="mt-1 flex items-center">
                            <div class="flex-shrink-0 h-32 w-32 border rounded-lg overflow-hidden bg-gray-100">
                                <div class="h-32 w-32 flex items-center justify-center text-gray-400">
                                    <svg class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                </div>
                            </div>
                            <div class="ml-2">
                                <div class="relative">
                                    <input type="file" id="asset_image" name="asset_image" class="hidden"
                                        accept="image/*">
                                    <label for="asset_image"
                                        class="cursor-pointer bg-white py-2 px-3 border-2 border-slate-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Choose Image
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                        <!-- Asset Tag ID -->
                        <div>
                            <label for="asset_tag_id" class="block text-sm font-medium text-gray-700">Asset Tag
                                ID</label>
                            <div class="mt-1">
                                <input type="text" id="asset_tag_id" name="asset_tag_id" required
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-slate-300 rounded-md">
                            </div>
                        </div>

                        <!-- Model -->
                        <div>
                            <label for="model" class="block text-sm font-medium text-gray-700">Model</label>
                            <div class="mt-1">
                                <input type="text" id="model" name="model" required
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-slate-300 rounded-md">
                            </div>
                        </div>

                        <!-- Specification -->
                        <div>
                            <label for="specs" class="block text-sm font-medium text-gray-700">Specification</label>
                            <div class="mt-1">
                                <input type="text" id="specs" name="specs"
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-slate-300 rounded-md">
                            </div>
                        </div>

                        <!-- Serial Number -->
                        <div>
                            <label for="serial_number" class="block text-sm font-medium text-gray-700">Serial
                                Number</label>
                            <div class="mt-1">
                                <input type="text" id="serial_number" name="serial_number" required
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-slate-300 rounded-md">
                            </div>
                        </div>

                        <!-- Cost -->
                        <div>
                            <label for="cost" class="block text-sm font-medium text-gray-700">Cost</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500 sm:text-sm">₱</span>
                                </div>
                                <input type="number" id="cost" name="cost" min="0" required
                                    class="focus:ring-indigo-500 border-2 border-slate-300 p-2 bg-slate-50 focus:border-indigo-500 block w-full pl-7 sm:text-sm border-slate-300 rounded-md">
                            </div>
                        </div>

                        <!-- Purchase Date -->
                        <div>
                            <label for="purchase_date" class="block text-sm font-medium text-gray-700">Purchase
                                Date</label>
                            <div class="mt-1">
                                <input type="date" id="purchase_date" name="purchase_date" required
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-slate-300 rounded-md">
                            </div>
                        </div>

                        <!-- Assigned To -->
                        <div>
                            <label for="assigned_to" class="block text-sm font-medium text-gray-700">Assigned To</label>
                            <div class="mt-1">
                                <button type="button" id="show-assignment-modal"
                                    class="w-full text-left border-2 border-slate-300 p-2 bg-slate-50 border-slate-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500 hover:bg-gray-50">
                                    Click to assign
                                </button>
                                <input type="hidden" name="assigned_to" id="assigned_to"
                                    value="{{ old('assigned_to') }}">
                                <input type="hidden" name="issued_date" id="issued_date"
                                    value="{{ old('issued_date') }}">
                                <input type="hidden" name="notes" id="notes"
                                    value="{{ old('notes') }}">
                            </div>
                            @error('assigned_to')
                                <p class="mt-2 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>

                        <!-- Supplier -->
                        <div>
                            <label for="supplier_id" class="block text-sm font-medium text-gray-700">Supplier</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="supplier_id" name="supplier_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a supplier</option>
                                    @foreach($suppliers as $supplier)
                                        <option value="{{ $supplier->id }}"
                                            {{ old('supplier_id') == $supplier->id ? 'selected' : '' }}>
                                            {{ $supplier->supplier }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-supplier-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Site -->
                        <div>
                            <label for="site_id" class="block text-sm font-medium text-gray-700">Site</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="site_id" name="site_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a site</option>
                                    @foreach($sites as $site)
                                        <option value="{{ $site->id }}">{{ $site->site }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-site-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Location -->
                        <div>
                            <label for="location_id" class="block text-sm font-medium text-gray-700">Location</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="location_id" name="location_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a location</option>
                                    @foreach($locations as $location)
                                        <option value="{{ $location->id }}">{{ $location->location }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-location-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Category -->
                        <div>
                            <label for="category_id" class="block text-sm font-medium text-gray-700">Category</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="category_id" name="category_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a category</option>
                                    @foreach($categories as $category)
                                        <option value="{{ $category->id }}">{{ $category->category }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-category-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Department -->
                        <div>
                            <label for="department_id" class="block text-sm font-medium text-gray-700">Department</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="department_id" name="department_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a department</option>
                                    @foreach($departments as $department)
                                        <option value="{{ $department->id }}">{{ $department->department }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-department-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Brand -->
                        <div>
                            <label for="brand_id" class="block text-sm font-medium text-gray-700">Brand</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="brand_id" name="brand_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a brand</option>
                                    @foreach($brands as $brand)
                                        <option value="{{ $brand->id }}">{{ $brand->brand }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-brand-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="flex justify-end space-x-3 pt-6 border-t">
                        <button type="submit"
                            class="inline-flex justify-center py-2 px-5 text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Add Asset
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<x-add-item-modal 
    title="Add New Supplier"
    id="add-supplier-modal"
    route="{{ route('supplier.add') }}"
    field="supplier"
/>

<x-add-item-modal 
    title="Add New Site"
    id="add-site-modal"
    route="{{ route('site.add') }}"
    field="site"
/>

<x-add-item-modal 
    title="Add New Location"
    id="add-location-modal"
    route="{{ route('location.add') }}"
    field="location"
/>

<x-add-item-modal 
    title="Add New Category"
    id="add-category-modal"
    route="{{ route('category.add') }}"
    field="category"
/>

<x-add-item-modal 
    title="Add New Department"
    id="add-department-modal"
    route="{{ route('department.add') }}"
    field="department"
/>

<x-add-item-modal 
    title="Add New Brand"
    id="add-brand-modal"
    route="{{ route('brand.add') }}"
    field="brand"
/>

<!-- Assignment Modal -->
<div class="modal-container">
    <div id="assignment-modal" tabindex="-1" aria-hidden="true"
        class="modalBg fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 backdrop-blur-sm hidden">
        <div class="flex min-h-screen items-center justify-center p-4">
            <div
                class="relative w-full max-w-xl transform overflow-hidden rounded-2xl bg-white shadow-2xl transition-all">
                <!-- Header -->
                <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-semibold text-gray-800">Asset Assignment</h2>
                        <button type="button"
                            class="rounded-md p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none"
                            onclick="document.getElementById('assignment-modal').classList.toggle('hidden')">
                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Body -->
                <div class="px-6 py-4">
                    <div class="space-y-4">
                        <!-- Assigned To Field -->
                        <div>
                            <label for="modal_assigned_to"
                                class="block text-sm font-medium text-gray-700">Assigned To</label>
                            <div class="mt-1">
                                <input type="text" id="modal_assigned_to"
                                    class="block w-full px-4 py-2 border-2 border-gray-200 hover:shadow-inner rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                    value="{{ old('assigned_to') }}"
                                    placeholder="Enter assignee name">
                            </div>
                        </div>

                        <!-- Date Issued Field -->
                        <div>
                            <label for="modal_issued_date"
                                class="block text-sm font-medium text-gray-700">Date Issued</label>
                            <div class="mt-1">
                                <input type="date" id="modal_issued_date"
                                    class="block w-full px-4 py-2 border-2 border-gray-200 hover:shadow-inner rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                    value="{{ old('issued_date') }}">
                            </div>
                        </div>

                        <!-- Notes Field -->
                        <div>
                            <label for="modal_notes"
                                class="block text-sm font-medium text-gray-700">Notes</label>
                            <div class="mt-1">
                                <textarea id="modal_notes"
                                    class="block w-full px-4 py-2 border-2 border-gray-200 hover:shadow-inner rounded-md border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                    rows="3"
                                    placeholder="Add any additional notes here">{{ old('notes') }}</textarea>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Footer -->
                <div class="bg-gray-50 px-6 py-4">
                    <div class="flex items-center justify-end space-x-3">
                        <button type="button"
                            class="rounded-md border-2 border-slate-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                            onclick="document.getElementById('assignment-modal').classList.toggle('hidden')">
                            Cancel
                        </button>
                        <button type="button" id="save-assignment-btn"
                            class="rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Preview image before upload
    document.getElementById('asset_image').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const preview = document.querySelector('.h-32.w-32 img, .h-32.w-32 div');
                if (preview.tagName === 'IMG') {
                    preview.src = e.target.result;
                } else {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'h-32 w-32 object-cover';
                    preview.parentNode.replaceChild(img, preview);
                }
            }
            reader.readAsDataURL(file);
        }
    });

    // Show assignment modal when button is clicked
    document.getElementById('show-assignment-modal').addEventListener('click', function () {
        document.getElementById('assignment-modal').classList.remove('hidden');
    });

    // Handle save assignment button click
    document.getElementById('save-assignment-btn').addEventListener('click', function () {
        const assignedTo = document.getElementById('modal_assigned_to').value;
        const issuedDate = document.getElementById('modal_issued_date').value;
        const notes = document.getElementById('modal_notes').value;

        // Update hidden inputs
        document.getElementById('assigned_to').value = assignedTo;
        document.getElementById('issued_date').value = issuedDate;
        document.getElementById('notes').value = notes;

        // Update button text
        document.getElementById('show-assignment-modal').textContent = assignedTo || 'Click to assign';

        // Hide modal
        document.getElementById('assignment-modal').classList.add('hidden');
    });

    // Function to refresh select options after adding new item
    function refreshSelectOptions(selectId, route) {
        fetch(route)
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById(selectId);
                select.innerHTML = '<option value="">Select an option</option>';
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item[selectId.replace('_id', '')];
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    // Add event listeners for form submissions
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', function(e) {
            if (this.getAttribute('action').includes('add') && this.closest('[id]')?.id.includes('modal')) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Refresh the corresponding select options
                        const modalId = this.closest('[id]').id;
                        const selectId = modalId.replace('add-', '').replace('-modal', '_id');
                        refreshSelectOptions(selectId, `/${selectId.replace('_id', '')}/list`);
                        
                        // Clear the form
                        this.reset();
                        
                        // Hide the modal
                        document.getElementById(modalId).classList.add('hidden');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        });
    });
</script>

@endsection
</file>

<file path="resources/views/fcu-ams/asset/maintenance.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
            <h1 class="my-auto text-3xl">Maintenance</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="bg-white p-6 shadow-sm m-3 rounded-lg">
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h2 class="text-xl font-semibold text-gray-800">Maintenance List</h2>
                    <p class="text-sm text-gray-500 mt-1">Overview of assets currently under maintenance</p>
                </div>
            </div>

            @if($assets->where('condition.condition', 'Maintenance')->isEmpty())
                <div class="text-center py-12">
                    <div class="text-gray-400 mb-3">
                        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                    </div>
                    <p class="text-xl font-medium text-gray-500">No assets under maintenance</p>
                    <p class="text-sm text-gray-400 mt-1">All assets are currently in working condition</p>
                </div>
            @else
                <div class="overflow-x-auto rounded-lg border-2 border-slate-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Asset Details</th>
                                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Location</th>
                                <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Maintenance Period</th>
                                <th class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider">Action</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($assets as $asset)
                                <tr class="hover:bg-gray-50 transition-colors duration-200">
                                    <td class="px-6 py-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="flex-shrink-0 w-10 h-10">
                                                @if($asset->asset_image)
                                                    <img src="{{ asset($asset->asset_image) }}" alt="Asset Image"
                                                        class="w-10 h-10 rounded-full object-cover">
                                                @else
                                                    <img src="{{ asset('profile/defaultIcon.png') }}"
                                                        alt="Default Image" class="w-10 h-10 rounded-full object-cover">
                                                @endif
                                            </div>
                                            <div>
                                                <div class="text-sm font-medium text-gray-900">{{ $asset->asset_tag_id }}</div>
                                                <div class="text-sm text-gray-500">{{ $asset->model }}</div>
                                                <div class="text-xs text-gray-400">SN: {{ $asset->serial_number }}</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900">{{ $asset->site->site }}</div>
                                        <div class="text-sm text-gray-500">{{ $asset->location->location }}</div>
                                        <div class="text-xs text-gray-400">{{ $asset->department->department }}</div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <div class="text-sm text-gray-900">
                                            Start: {{ $asset->maintenance_start_date ?? 'N/A' }}
                                        </div>
                                        <div class="text-sm {{ ($asset->maintenance_end_date && \Carbon\Carbon::parse($asset->maintenance_end_date)->isPast()) ? 'text-red-600 font-medium' : 'text-gray-500' }}">
                                            End: {{ $asset->maintenance_end_date ?? 'N/A' }}
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 text-center">
                                        <button onclick="openConditionModal({{ $asset->id }}, '{{ $asset->condition->condition }}')" 
                                           class="text-blue-600 hover:text-blue-900 inline-flex items-center justify-center w-8 h-8 rounded-full hover:bg-blue-50 transition-colors duration-200">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <!-- Pagination Controls -->
                <div class="mt-4 flex items-center justify-between px-4 mb-3">
                            <div class="flex items-center gap-2">
                                <a href="{{ $assets->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                                <a href="{{ $assets->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </div>
                        
                            <div class="text-sm text-gray-700">
                                Showing {{ $assets->firstItem() ?? 0 }} to {{ $assets->lastItem() ?? 0 }} of {{ $assets->total() }} items
                            </div>
                        
                            <div class="flex items-center gap-2">
                                <a href="{{ $assets->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M7.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L11.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                                <a href="{{ $assets->url($assets->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                                    </svg>
                                </a>
                            </div>
                        </div>
            @endif
        </div>
    </div>
</div>

<!-- Condition Update Modal -->
<div id="condition-modal" class="fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 backdrop-blur-sm hidden">
    <div class="flex min-h-screen items-center justify-center p-4">
        <div class="relative w-full max-w-xl transform overflow-hidden rounded-2xl bg-white shadow-2xl transition-all">
            <form id="update-condition-form" method="POST">
                @csrf
                <!-- Header -->
                <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-medium text-gray-900">Update Asset Condition</h3>
                        <button type="button" class="text-gray-400 hover:text-gray-500" onclick="closeConditionModal()">
                            <span class="sr-only">Close</span>
                            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>

                <!-- Modal Body -->
                <div class="px-6 py-4">
                    <div class="space-y-4">
                        <!-- Condition Dropdown -->
                        <div>
                            <label for="condition_id" class="block text-sm font-medium text-gray-700">Condition</label>
                            <select id="condition_id" name="condition_id" required
                                class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                @foreach($conditions as $condition)
                                    <option value="{{ $condition->id }}">{{ $condition->condition }}</option>
                                @endforeach
                            </select>
                        </div>

                        <!-- Maintenance Dates (shown only when maintenance is selected) -->
                        <div id="maintenance-dates" class="hidden">
                            <div class="space-y-4">
                                <div>
                                    <label for="maintenance_start_date" class="block text-sm font-medium text-gray-700">
                                        Maintenance Start Date
                                    </label>
                                    <input type="date" id="maintenance_start_date" name="maintenance_start_date"
                                        class="mt-1 block w-full rounded-md border-2 px-3 py-2 bg-slate-50 border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                                </div>
                                <div>
                                    <label for="maintenance_end_date" class="block text-sm font-medium text-gray-700">
                                        Maintenance End Date
                                    </label>
                                    <input type="date" id="maintenance_end_date" name="maintenance_end_date"
                                        class="mt-1 block w-full rounded-md border-2 px-3 py-2 bg-slate-50 border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Footer -->
                <div class="bg-gray-50 px-6 py-4 flex justify-end space-x-3">
                    <button type="button"
                        class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                        onclick="closeConditionModal()">
                        Cancel
                    </button>
                    <button type="submit"
                        class="inline-flex items-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                        Update Condition
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function openConditionModal(assetId, currentCondition) {
        const modal = document.getElementById('condition-modal');
        const form = document.getElementById('update-condition-form');
        const conditionSelect = document.getElementById('condition_id');
        const maintenanceDates = document.getElementById('maintenance-dates');

        // Set the form action
        form.action = `/asset/${assetId}/update-condition`;

        // Show the modal
        modal.classList.remove('hidden');

        // Set current condition
        Array.from(conditionSelect.options).forEach(option => {
            if (option.text === currentCondition) {
                option.selected = true;
            }
        });

        // Show/hide maintenance dates based on selected condition
        conditionSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            maintenanceDates.classList.toggle('hidden', selectedOption.text !== 'Maintenance');
        });

        // Trigger change event to set initial state
        conditionSelect.dispatchEvent(new Event('change'));
    }

    function closeConditionModal() {
        document.getElementById('condition-modal').classList.add('hidden');
    }
</script>

@endsection
</file>

<file path="resources/views/fcu-ams/brands/brandsList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Brands</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-brand-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Brand
                </button>
                @include('layouts.modals.brand.addNewBrand')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $brands->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $brands->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $brands->firstItem() }} to {{ $brands->lastItem() }} of
                    {{ $brands->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $brands->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $brands->url($brands->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Brands List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Brand
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($brands as $brand)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $brand->brand }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $brand->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-brand-modal{{ $brand->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('brand.destroy', ['id' => $brand->id]) }}"
                                            method="POST" id="delete-form{{ $brand->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.brand.editBrand')
                        @include('layouts.modals.brand.deleteBrand')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/categories/categoriesList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
    
            <h1 class="my-auto text-3xl">Categories</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-category-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Category
                </button>
                @include('layouts.modals.category.addNewCategory')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $categories->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $categories->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $categories->firstItem() }} to {{ $categories->lastItem() }} of
                    {{ $categories->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $categories->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $categories->url($categories->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Categories List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Category
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($categories as $category)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $category->category }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $category->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-category-modal{{ $category->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('category.destroy', ['id' => $category->id]) }}"
                                            method="POST" id="delete-form{{ $category->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.category.editCategory')
                        @include('layouts.modals.category.deleteCategory')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/conditions/conditionsList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Conditions</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-condition-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Condition
                </button>
                @include('layouts.modals.condition.addNewCondition')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $conditions->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $conditions->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $conditions->firstItem() }} to {{ $conditions->lastItem() }} of
                    {{ $conditions->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $conditions->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $conditions->url($conditions->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Conditions List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Condition
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($conditions as $condition)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $condition->condition }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $condition->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-modal{{ $condition->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('condition.destroy', ['id' => $condition->id]) }}"
                                            method="POST" id="delete-form{{ $condition->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.condition.editCondition')
                        @include('layouts.modals.condition.deleteCondition')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/departments/departmentsList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Departments</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-department-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Department
                </button>
                @include('layouts.modals.department.addNewDepartment')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $departments->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $departments->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $departments->firstItem() }} to {{ $departments->lastItem() }} of
                    {{ $departments->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $departments->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $departments->url($departments->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Departments List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Department
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($departments as $department)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $department->department }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $department->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-department-modal{{ $department->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('department.destroy', ['id' => $department->id]) }}"
                                            method="POST" id="delete-form{{ $department->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.department.editDepartment')
                        @include('layouts.modals.department.deleteDepartment')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/inventory/lowStock.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <a href="{{ route('inventory.list') }}"
                class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
            </a>
            <h1 class="my-auto text-3xl">Inventory</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="m-3">
            <div class="bg-white p-5 shadow-md rounded-md">
                <div class="flex justify-between mb-3">
                    <h2 class="text-2xl font-bold my-auto">Low Stock</h2>
                </div>
                <div class="overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-200">
                    <table class="min-w-full divide-y divide-gray-200 border-2 border-gray-200 shadow-md rounded-lg overflow-hidden">
                        <thead class="bg-gradient-to-r from-orange-400 to-orange-500 text-white">
                            <tr>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Unique
                                    Tag</th>
                                <th scope="col"
                                    class="px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider">Stock
                                    Image</th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Item</th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Brand
                                </th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Quantity
                                </th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Supplier
                                </th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Unit</th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Unit
                                    Price</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($lowStockItems as $inventory)
                                <tr class="hover:bg-gray-50 transition duration-200 ease-in-out">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->unique_tag }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-center">
                                        @if($inventory->stock_image)
                                            <img src="{{ asset($inventory->stock_image) }}" alt="Inventory Image"
                                                class="w-10 h-10 rounded-full object-cover mx-auto shadow-md">
                                        @else
                                            <img src="{{ asset('profile/defaultIcon.png') }}"
                                                alt="Default Image"
                                                class="w-10 h-10 rounded-full object-cover mx-auto opacity-50">
                                        @endif
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->items_specs }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->brand->brand }}
                                    </td>
                                    <td
                                        class="px-6 py-4 whitespace-nowrap text-sm 
                    {{ $inventory->quantity < 10 ? 'text-red-600 font-bold' : 'text-gray-900' }}">
                                        {{ $inventory->quantity }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->supplier->supplier }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->unit->unit }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ number_format($inventory->unit_price, 2) }}
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <!-- Pagination Controls -->
                <div class="mt-4 flex items-center justify-between px-4 mb-3">
                    <div class="flex items-center gap-2">
                        <a href="{{ $lowStockItems->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $lowStockItems->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                    
                    <div class="text-sm text-gray-700">
                        <span>Showing</span>
                        <span class="font-medium">{{ $lowStockItems->firstItem() }}</span>
                        <span>to</span>
                        <span class="font-medium">{{ $lowStockItems->lastItem() }}</span>
                        <span>of</span>
                        <span class="font-medium">{{ $lowStockItems->total() }}</span>
                        <span>results</span>
                    </div>

                    <div class="flex items-center gap-2">
                        <a href="{{ $lowStockItems->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M7.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L10.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $lowStockItems->url($lowStockItems->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/outOfStock.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <a href="{{ route('inventory.list') }}"
                class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
            </a>
            <h1 class="my-auto text-3xl">Inventory</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="m-3">
            <div class="bg-white p-5 shadow-md rounded-md">
                <div class="flex justify-between mb-3">
                    <h2 class="text-2xl font-bold my-auto">Out of Stock</h2>
                </div>
                <div class="overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-200">
                    <table class="min-w-full divide-y divide-gray-200 border-2 border-gray-200 shadow-md rounded-lg overflow-hidden">
                        <thead class="bg-gradient-to-r from-red-400 to-red-500 text-white">
                            <tr>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Unique
                                    Tag</th>
                                <th scope="col"
                                    class="px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider">Stock
                                    Image</th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Item</th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Brand
                                </th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Supplier
                                </th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Unit</th>
                                <th scope="col"
                                    class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Unit
                                    Price</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($outOfStockItems as $inventory)
                                <tr class="hover:bg-gray-50 transition duration-200 ease-in-out">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->unique_tag }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-center">
                                        @if($inventory->stock_image)
                                            <img src="{{ asset($inventory->stock_image) }}" alt="Inventory Image"
                                                class="w-10 h-10 rounded-full object-cover mx-auto shadow-md">
                                        @else
                                            <img src="{{ asset('profile/defaultIcon.png') }}"
                                                alt="Default Image"
                                                class="w-10 h-10 rounded-full object-cover mx-auto opacity-50">
                                        @endif
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->items_specs }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->brand->brand }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->supplier->supplier }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        {{ $inventory->unit->unit }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-red-600 font-bold">
                                        {{ number_format($inventory->unit_price, 2) }}
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <!-- Pagination Controls -->
                <div class="mt-4 flex items-center justify-between px-4 mb-3">
                    <div class="flex items-center gap-2">
                        <a href="{{ $outOfStockItems->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $outOfStockItems->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                    
                    <div class="text-sm text-gray-700">
                        <span>Showing</span>
                        <span class="font-medium">{{ $outOfStockItems->firstItem() }}</span>
                        <span>to</span>
                        <span class="font-medium">{{ $outOfStockItems->lastItem() }}</span>
                        <span>of</span>
                        <span class="font-medium">{{ $outOfStockItems->total() }}</span>
                        <span>results</span>
                    </div>

                    <div class="flex items-center gap-2">
                        <a href="{{ $outOfStockItems->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M7.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L10.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $outOfStockItems->url($outOfStockItems->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/printSupplyRequest.blade.php">
@extends('layouts.layout')
@section('content')
<style>
    body {
        --tw-bg-opacity: 1;
        background-color: rgb(241 245 249 / var(--tw-bg-opacity));
    }

    .fcu-icon {
        filter: grayscale(100%);
    }

    @media print {
        body {
            background-color: white;
        }

        .no-print {
            display: none;
        }

        @page {
            size: auto;
            margin: 0mm;
        }

        .shadow-lg {
            box-shadow: none;
        }
    }
</style>
<div class="bg-white rounded-lg p-8 mb-8 max-w-2xl my-9 mx-auto shadow-lg">
    <div class="text-center mb-5">
        <img class="fcu-icon mb-3 w-28 mx-auto" src="/img/login/fcu-icon.png" alt="" srcset="">
        <h2 class="text-2xl font-bold">FILAMER CHRISTIAN UNIVERSITY, INC</h2>
        <h2 class="text-xl font-bold mb-3">Roxas Avenue, Roxas City</h2>
        <h2 class="text-xl font-bold">Supply Request Form</h2>
        <p class="text-gray-600 mb-3">Date: {{ \Carbon\Carbon::parse($requests->first()->request_date)->format('F d, Y') }}</p>
        <h2 class="text-xl font-bold">{{ $requests->first()->department->department ?? 'N/A' }}</h2>
    </div>

    <table class="w-full mb-8">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-6 py-3 text-left">Item</th>
                <th class="px-6 py-3 text-center">Quantity</th>
                <th class="px-6 py-3 text-right">Unit Price</th>
                <th class="px-6 py-3 text-right">Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach($requests as $request)
                <tr>
                    <td class="border-b px-6 py-4">{{ $request->item_name }}</td>
                    <td class="border-b px-6 py-4 text-center">{{ $request->quantity }}</td>
                    <td class="border-b px-6 py-4 text-right">
                        @if($request->inventory_id)
                            ₱{{ number_format($request->inventory->unit_price ?? 0, 2) }}
                        @else
                            ₱{{ number_format($request->estimated_unit_price ?? 0, 2) }}
                        @endif
                    </td>
                    <td class="border-b px-6 py-4 text-right">
                        @if($request->inventory_id)
                            ₱{{ number_format(($request->inventory->unit_price ?? 0) * $request->quantity, 2) }}
                        @else
                            ₱{{ number_format(($request->estimated_unit_price ?? 0) * $request->quantity, 2) }}
                        @endif
                    </td>
                </tr>
            @endforeach
        </tbody>
        <tfoot>
            <tr class="font-bold">
                <td class="px-6 py-4" colspan="3">Overall Price:</td>
                <td class="px-6 py-4 text-right">₱{{ number_format($totalPrice, 2) }}</td>
            </tr>
        </tfoot>
    </table>

    <div class="flex justify-between mt-12 pt-6 border-t">
        <div class="text-center">
            <p class="font-bold mb-2">Processed by:</p>
            <p>{{ auth()->user()->first_name . ' ' . auth()->user()->last_name }}</p>
        </div>
        <div class="text-center">
            <p class="font-bold mb-2">Requested by:</p>
            <p>{{ $requests->first()->requester }}</p>
        </div>
    </div>

    <div class="flex justify-between mt-8 no-print">
        <button onclick="window.history.back()" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
            </svg>
        </button>
        <button onclick="window.print()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
            </svg>
        </button>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/purchaseOrder.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">

<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Purchase Order</h1>
            <div class="w-10"></div>
        </nav>
        <div class="m-3 2xl:max-w-7xl 2xl:mx-auto">
            <form method="POST" enctype="multipart/form-data" action="{{ route('purchase.order.store') }}" class="space-y-6">
                @csrf
                <div class="space-y-6">
                    @include('layouts.messageWithoutTimerForError')

                    <div class="bg-white rounded-lg shadow-md overflow-hidden">
                        <div class="p-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-6">Purchase Order Details</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="po_date" class="block text-sm font-medium text-gray-700">PO Date</label>
                                    <input type="date" id="po_date" name="po_date" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                </div>
                                <div>
                                    <label for="po_number" class="block text-sm font-medium text-gray-700">PO Number</label>
                                    <input type="number" id="po_number" name="po_number" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" min="0" required>
                                </div>
                                <div>
                                    <label for="mr_number" class="block text-sm font-medium text-gray-700">MR Number</label>
                                    <input type="number" id="mr_number" name="mr_number" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" min="0" required>
                                </div>
                                <div>
                                    <label for="department_id" class="block text-sm font-medium text-gray-700">Requesting Department</label>
                                    <select id="department_id" name="department_id" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                        <option value="">Select a department</option>
                                        @foreach($departments as $department)
                                            <option value="{{ $department->id }}" {{ old('department_id') == $department->id ? 'selected' : '' }}>
                                                {{ $department->department }}
                                            </option>
                                        @endforeach
                                    </select>
                                </div>
                                <div>
                                    <label for="supplier_id" class="block text-sm font-medium text-gray-700">Supplier</label>
                                    <select id="supplier_id" name="supplier_id" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                        <option value="">Select a supplier</option>
                                        @foreach($suppliers as $supplier)
                                            <option value="{{ $supplier->id }}" {{ old('supplier_id') == $supplier->id ? 'selected' : '' }}>
                                                {{ $supplier->supplier }}
                                            </option>
                                        @endforeach
                                    </select>
                                </div>
                                <div>
                                    <label for="location_id" class="block text-sm font-medium text-gray-700">Location</label>
                                    <select id="location_id" name="location_id" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                        <option value="">Select a location</option>
                                        @foreach($locations as $location)
                                            <option value="{{ $location->id }}" {{ old('location_id') == $location->id ? 'selected' : '' }}>
                                                {{ $location->location }}
                                            </option>
                                        @endforeach
                                    </select>
                                </div>
                                <div>
                                    <label for="approved_by" class="block text-sm font-medium text-gray-700">Approved By</label>
                                    <input type="text" id="approved_by" name="approved_by" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                </div>
                                <div class="md:col-span-2">
                                    <label for="note" class="block text-sm font-medium text-gray-700">Note</label>
                                    <textarea id="note" name="note" rows="3" 
                                        class="mt-1 block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-lg shadow-md overflow-hidden">
                        <div class="p-6">
                            <div class="sm:flex sm:items-center sm:justify-between mb-6">
                                <h3 class="text-lg font-medium text-gray-900">Purchase Order Items</h3>
                                <button type="button" class="add-row-button mt-3 sm:mt-0 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    Add Item
                                </button>
                            </div>
                            <div class="overflow-x-auto rounded-lg">
                                <table class="min-w-full border divide-y divide-gray-200" id="purchase-order-table">
                                    <thead class="bg-gray-50">
                                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium  uppercase tracking-wider">Items/Specs</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium  uppercase tracking-wider">Quantity</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium  uppercase tracking-wider">Unit</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium  uppercase tracking-wider">Unit Price</th>
                                            <th scope="col" class="px-6 py-3 text-center text-xs font-medium  uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="purchase-order-table-body" class="bg-white divide-y divide-gray-200">
                                        <tr>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <input type="text" name="items_specs[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <input type="number" name="quantity[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" min="0" required>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <select name="unit_id[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                                                    <option value="">Select a unit</option>
                                                    @foreach($units as $unit)
                                                        <option value="{{ $unit->id }}" {{ old('unit_id') == $unit->id ? 'selected' : '' }}>
                                                            {{ $unit->unit }}
                                                        </option>
                                                    @endforeach
                                                </select>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <input type="number" name="unit_price[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" min="0" required>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                                <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                                    </svg>
                                                </button>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end space-x-3">
                    <button type="submit" class="inline-flex items-center  mb-5 px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                        Save Purchase Order
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const addRowButton = document.querySelector('.add-row-button');
        const deleteRowButtons = document.querySelectorAll('.delete-row-button');
        const purchaseOrderTableBody = document.querySelector('#purchase-order-table-body');

        function createNewRow() {
            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <input type="text" name="items_specs[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <input type="number" name="quantity[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" min="0" required>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <select name="unit_id[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" required>
                        <option value="">Select a unit</option>
                        @foreach($units as $unit)
                            <option value="{{ $unit->id }}" {{ old('unit_id') == $unit->id ? 'selected' : '' }}>
                                {{ $unit->unit }}
                            </option>
                        @endforeach
                    </select>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <input type="number" name="unit_price[]" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" min="0" required>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                    <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </td>
            `;
            purchaseOrderTableBody.appendChild(newRow);

            const newDeleteRowButton = newRow.querySelector('.delete-row-button');
            newDeleteRowButton.addEventListener('click', function() {
                newRow.remove();
                calculateTotal();
            });

            // Add input event listeners to new row
            const quantityInput = newRow.querySelector('input[name="quantity[]"]');
            const unitPriceInput = newRow.querySelector('input[name="unit_price[]"]');
            quantityInput.addEventListener('input', calculateTotal);
            unitPriceInput.addEventListener('input', calculateTotal);
        }

        function calculateTotal() {
            const rows = purchaseOrderTableBody.querySelectorAll('tr');
            let total = 0;

            rows.forEach(row => {
                const quantity = parseFloat(row.querySelector('input[name="quantity[]"]').value) || 0;
                const unitPrice = parseFloat(row.querySelector('input[name="unit_price[]"]').value) || 0;
                total += quantity * unitPrice;
            });

            const totalElement = document.getElementById('total-amount');
            if (totalElement) {
                totalElement.textContent = new Intl.NumberFormat('en-PH', {
                    style: 'currency',
                    currency: 'PHP'
                }).format(total);
            }
        }

        addRowButton.addEventListener('click', createNewRow);

        deleteRowButtons.forEach(function(deleteRowButton) {
            deleteRowButton.addEventListener('click', function() {
                const row = deleteRowButton.closest('tr');
                row.remove();
                calculateTotal();
            });
        });

        // Add input event listeners to initial row
        const initialQuantityInputs = document.querySelectorAll('input[name="quantity[]"]');
        const initialUnitPriceInputs = document.querySelectorAll('input[name="unit_price[]"]');
        initialQuantityInputs.forEach(input => input.addEventListener('input', calculateTotal));
        initialUnitPriceInputs.forEach(input => input.addEventListener('input', calculateTotal));
    });
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/stockIn.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Stock In</h1>
            <div class="w-10"></div>
        </nav>

        <!-- Main content -->
        <div class="m-3 2xl:max-w-7xl 2xl:mx-auto mb-6">
            <div class="mb-3">
                @include('layouts.messageWithoutTimerForError')
            </div>

            <!-- Form -->
            <div class="bg-white shadow rounded-lg">
                <form method="POST" enctype="multipart/form-data" action="{{ route('inventory.stock.in.store') }}" class="space-y-6 p-6">
                    @csrf

                    <!-- Item Image -->
                    <div class="space-y-1">
                        <label for="stock_image" class="block text-sm font-medium text-gray-700">Item Image</label>
                        <div class="mt-1 flex items-center">
                            <div class="flex-shrink-0 h-32 w-32 border rounded-lg overflow-hidden bg-gray-100">
                                <img id="image_preview" class="h-full w-full object-cover hidden">
                                <div id="image_placeholder" class="h-32 w-32 flex items-center justify-center text-gray-400">
                                    <svg class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                </div>
                            </div>
                            <div class="ml-2">
                                <div class="relative">
                                    <input type="file" id="stock_image" name="stock_image" class="hidden" accept="image/*">
                                    <label for="stock_image"
                                        class="cursor-pointer bg-white py-2 px-3 border-2 border-slate-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Choose Image
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                        <!-- Brand -->
                        <div>
                            <label for="brand_id" class="block text-sm font-medium text-gray-700">Brand</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="brand_id" name="brand_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a brand</option>
                                    @foreach($brands as $brand)
                                        <option value="{{ $brand->id }}" {{ old('brand_id') == $brand->id ? 'selected' : '' }}>
                                            {{ $brand->brand }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-brand-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Item/Specs -->
                        <div>
                            <label for="items_specs" class="block text-sm font-medium text-gray-700">Item/Specs</label>
                            <div class="mt-1">
                                <input type="text" id="items_specs" name="items_specs" required
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm rounded-md"
                                    value="{{ old('items_specs') ?? '' }}">
                            </div>
                        </div>

                        <!-- Unit -->
                        <div>
                            <label for="unit_id" class="block text-sm font-medium text-gray-700">Unit</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="unit_id" name="unit_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a unit</option>
                                    @foreach($units as $unit)
                                        <option value="{{ $unit->id }}" {{ old('unit_id') == $unit->id ? 'selected' : '' }}>
                                            {{ $unit->unit }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-unit-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Quantity -->
                        <div>
                            <label for="quantity" class="block text-sm font-medium text-gray-700">Quantity</label>
                            <div class="mt-1">
                                <input type="number" id="quantity" name="quantity" required min="0"
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm rounded-md"
                                    value="{{ old('quantity') ?? '' }}">
                            </div>
                        </div>

                        <!-- Unit Price -->
                        <div>
                            <label for="unit_price" class="block text-sm font-medium text-gray-700">Unit Price</label>
                            <div class="mt-1">
                                <input type="number" id="unit_price" name="unit_price" required min="0"
                                    class="shadow-sm border-2 border-slate-300 p-2 bg-slate-50 focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm rounded-md"
                                    value="{{ old('unit_price') ?? '' }}">
                            </div>
                        </div>

                        <!-- Supplier -->
                        <div>
                            <label for="supplier_id" class="block text-sm font-medium text-gray-700">Supplier</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="supplier_id" name="supplier_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 border-slate-300 bg-slate-50 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select a supplier</option>
                                    @foreach($suppliers as $supplier)
                                        <option value="{{ $supplier->id }}" {{ old('supplier_id') == $supplier->id ? 'selected' : '' }}>
                                            {{ $supplier->supplier }}</option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-supplier-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="flex justify-end space-x-3 pt-6 border-t">
                        <button type="submit"
                            class="inline-flex justify-center items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                            Add Item
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<div class="modal" id="brand-modal-wrapper">
    <x-add-item-modal 
        title="Add New Brand"
        id="add-brand-modal"
        route="{{ route('brand.add') }}"
        field="brand"
    />
</div>

<div class="modal" id="unit-modal-wrapper">
    <x-add-item-modal 
        title="Add New Unit"
        id="add-unit-modal"
        route="{{ route('unit.add') }}"
        field="unit"
    />
</div>

<div class="modal" id="supplier-modal-wrapper">
    <x-add-item-modal 
        title="Add New Supplier"
        id="add-supplier-modal"
        route="{{ route('supplier.add') }}"
        field="supplier"
    />
</div>

@push('scripts')
<script>
    // Add CSRF token to the page
    document.head.innerHTML += `<meta name="csrf-token" content="{{ csrf_token() }}">`;
    
    // Image preview functionality
    document.getElementById('stock_image').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            const preview = document.getElementById('image_preview');
            const placeholder = document.getElementById('image_placeholder');
            
            reader.onload = function(e) {
                preview.src = e.target.result;
                preview.classList.remove('hidden');
                placeholder.classList.add('hidden');
            };
            
            reader.readAsDataURL(file);
        }
    });

    // Function to refresh select options after adding new item
    function refreshSelectOptions(selectId, route) {
        fetch(route)
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById(selectId);
                const currentValue = select.value;
                select.innerHTML = '<option value="">Select an option</option>';
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item[selectId.replace('_id', '')];
                    if (item.id == currentValue) {
                        option.selected = true;
                    }
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error refreshing options:', error);
            });
    }

    // Add event listeners for modal forms
    document.addEventListener('DOMContentLoaded', function() {
        // Get all forms inside modals
        const forms = document.querySelectorAll('.modal form');
        console.log('Found forms:', forms.length);

        forms.forEach(form => {
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Form submitted');

                const formData = new FormData(this);
                const modalId = this.closest('.modal').querySelector('[id]').id;
                const selectId = modalId.replace('add-', '').replace('-modal', '_id');
                
                console.log('Modal ID:', modalId);
                console.log('Select ID:', selectId);

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        headers: {
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json'
                        },
                        body: formData
                    });

                    const data = await response.json();
                    console.log('Response:', data);

                    if (data.success) {
                        // Refresh the corresponding select options
                        await refreshSelectOptions(selectId, `/${selectId.replace('_id', '')}/list`);
                        
                        // Clear the form and hide the modal
                        this.reset();
                        document.getElementById(modalId).classList.add('hidden');
                    }
                } catch (error) {
                    console.error('Error submitting form:', error);
                }
            });
        });
    });
</script>
@endpush

@endsection
</file>

<file path="resources/views/fcu-ams/inventory/stockOut.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">


<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Stock Out</h1>
            <div class="w-10"></div>
        </nav>
        <div class="stockout-form bg-white m-3 shadow-md rounded-md p-5 2xl:max-w-7xl 2xl:mx-auto">
            <form method="POST" action="{{ route('inventory.stock.out.store') }}">
                @csrf
                <div class="">
                    <div class="mb-3">
                        @include('layouts.messageWithoutTimerForError')
                    </div>
                    <h3 class="text-lg font-semibold mb-3">Item Details</h3>
                    <div class="mb-4">
                        <label for="item_id" class="block text-gray-700 font-bold mb-2">Item:</label>
                        <button type="button" class="ml-auto rounded-md border-2 border-slate-300 text-left px-3 py-2 bg-slate-50 text-black w-full"
                            onclick="document.getElementById('defaultModal').classList.toggle('hidden')">
                            Select Items
                        </button>
                        <div class="overflow-y-auto max-h-64 hidden mt-3" id="selected-items-container">
                            <div class="max-w-4xl mx-auto overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                                <table class="min-w-full divide-y divide-gray-200 border">
                                    <thead>
                                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Item</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Price</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200" id="selected-items">
                                    </tbody>
                                    <tfoot>
                                        <tr class="font-bold bg-gray-50">
                                            <td class="px-6 py-3 invisible" colspan="">Overall Price:</td>
                                            <td class="px-6 py-3 invisible" colspan="">Overall Price:</td>
                                            <td class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider" colspan="">Overall Price:</td>
                                            <td class="px-6 py-3 text-sm font-semibold text-gray-900" id="overall-price">₱0.00</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                        <div id="defaultModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
                            class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
                            <div class="relative my-auto mx-auto p-4 w-full max-w-4xl h-full md:h-auto">
                                <!-- Modal content -->
                                <div class="relative bg-white rounded-lg shadow-xl dark:bg-white border-0">
                                    <!-- Modal header -->
                                    <div class="flex items-center justify-between p-4 border-b rounded-t">
                                        <h3 class="text-xl font-semibold text-gray-900">
                                            Select Items to Stock Out
                                        </h3>
                                        <div class="flex items-center space-x-4">
                                            <div class="relative">
                                                <input type="text" id="modal-search" placeholder="Search items..." 
                                                    class="pl-10 pr-4 py-2 rounded-lg border-2 border-slate-300 focus:ring-2 focus:ring-blue-400 focus:border-blue-400 w-64">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 absolute left-3 top-2.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                                </svg>
                                            </div>
                                            <button type="button"
                                                class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center"
                                                onclick="document.getElementById('defaultModal').classList.toggle('hidden')">
                                                <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                                                </svg>
                                                <span class="sr-only">Close modal</span>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- Modal body -->
                                    <div class="p-6">
                                        <div class="max-w-5xl mx-auto overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                                            <div class="max-h-[60vh] overflow-y-auto">
                                                <table class="min-w-full divide-y divide-gray-200">
                                                    <thead>
                                                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Item</th>
                                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit</th>
                                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit Price</th>
                                                            <th scope="col" class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody class="bg-white divide-y divide-gray-200">
                                                        @foreach($inventories as $inventory)
                                                            <tr class="hover:bg-gray-50 transition-colors duration-200">
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                                    {{ $inventory->brand->brand }}
                                                                    {{ $inventory->items_specs }}</td>
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                                    {{ $inventory->quantity }}</td>
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                                    {{ $inventory->unit->unit }}</td>
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                                    ₱{{ number_format($inventory->unit_price, 2) }}</td>
                                                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                                    <div class="flex items-center gap-3 justify-center">
                                                                        <input type="checkbox"
                                                                            id="item_id_{{ $inventory->id }}" 
                                                                            name="item_id[]"
                                                                            value="{{ $inventory->id }}"
                                                                            class="w-4 h-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                                            onchange="document.getElementById('quantity_{{ $inventory->id }}').disabled = !this.checked">
                                                                        <input type="number"
                                                                            id="quantity_{{ $inventory->id }}"
                                                                            name="quantity[]"
                                                                            class="w-24 p-2 border-2 border-slate-300 rounded-md focus:ring-blue-500 focus:border-blue-500 disabled:bg-slate-50 disabled:text-gray-500"
                                                                            placeholder="Qty"
                                                                            min="1"
                                                                            max="{{ $inventory->quantity }}"
                                                                            disabled>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        @endforeach
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- Modal footer -->
                                    <div class="flex items-center justify-end p-4 border-t border-gray-200">
                                        <button type="button"
                                            class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 mr-2"
                                            onclick="document.getElementById('defaultModal').classList.toggle('hidden')">
                                            Cancel
                                        </button>
                                        <button type="button"
                                            class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5"
                                            onclick="document.getElementById('defaultModal').classList.toggle('hidden'); document.getElementById('selected-items-container').classList.remove('hidden');">
                                            Select Items
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <div class="mb-4">
                        <label for="department_id" class="block text-gray-700 font-bold mb-2">Department:</label>
                        <select id="department_id" name="department_id" class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50" required>
                            <option value="">Select a department</option>
                            @foreach($departments as $department)
                                <option value="{{ $department->id }}">{{ $department->department }}</option>
                            @endforeach
                        </select>
                    </div>
                    <div class="mb-4">
                        <label for="stock_out_date" class="block text-gray-700 font-bold mb-2">Stock Out Date:</label>
                        <input type="date" id="stock_out_date" name="stock_out_date"
                            class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50" required>
                    </div>
                    <div class="mb-4">
                        <label for="receiver" class="block text-gray-700 font-bold mb-2">Received by:</label>
                        <input type="input" id="receiver" name="receiver" class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50"
                            required>
                    </div>
                </div>
                <div class="space-x-2 flex">
                    <!-- <button type="button" class="ml-auto rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white"
                        onclick="history.back()">Back</button> -->
                    <button type="submit" class="ml-auto rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex my-auto gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="size-6">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
                        </svg>
                        Stock Out
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var successMessage = document.querySelector('.successMessage');

        if (successMessage) {
            setTimeout(function () {
                successMessage.style.display = 'none';
            }, 2000);
        }
    });
</script>
<script src="{{ asset('js/chart.js') }}"></script>
 
<script>
    document.addEventListener('DOMContentLoaded', function () {
    var selectedItemsTable = document.getElementById('selected-items');
    var modal = document.getElementById('defaultModal');
    var overallPriceCell = document.getElementById('overall-price');

    modal.addEventListener('change', function (event) {
        if (event.target.type === 'checkbox') {
            var checkbox = event.target;
            var quantityInput = checkbox.nextElementSibling;
            var row = checkbox.closest('tr');
            var label = row.cells[0].textContent.trim();
            var id = checkbox.value;
            var quantity = quantityInput.value || '1';
            var price = row.cells[3].textContent.trim().replace('₱', '').replace(',', '');

            if (checkbox.checked) {
                var newRow = document.createElement('tr');
                var itemCell = document.createElement('td');
                var quantityCell = document.createElement('td');
                var priceCell = document.createElement('td');
                var totalPriceCell = document.createElement('td');

                itemCell.textContent = label;
                itemCell.className = 'px-6 py-4';

                quantityCell.textContent = quantity;
                quantityCell.className = 'px-6 py-4';

                priceCell.textContent = '₱' + parseFloat(price).toFixed(2);
                priceCell.className = 'px-6 py-4';

                var total = parseFloat(price) * parseInt(quantity);
                totalPriceCell.textContent = '₱' + total.toFixed(2);
                totalPriceCell.className = 'px-6 py-4';

                newRow.appendChild(itemCell);
                newRow.appendChild(quantityCell);
                newRow.appendChild(priceCell);
                newRow.appendChild(totalPriceCell);

                selectedItemsTable.appendChild(newRow);
                document.getElementById('selected-items-container').classList.remove('hidden');

                updateOverallPrice();
            } else {
                var rows = selectedItemsTable.rows;
                for (var i = 0; i < rows.length; i++) {
                    if (rows[i].cells[0].textContent.trim() === label) {
                        rows[i].remove();
                        break;
                    }
                }
                if (selectedItemsTable.rows.length === 0) {
                    document.getElementById('selected-items-container').classList.add('hidden');
                }

                updateOverallPrice();
            }
        }
    });

    modal.addEventListener('input', function (event) {
        if (event.target.type === 'number') {
            var quantityInput = event.target;
            var checkbox = quantityInput.previousElementSibling;
            var row = checkbox.closest('tr');
            var label = row.cells[0].textContent.trim();
            var price = row.cells[3].textContent.trim().replace('₱', '').replace(',', '');
            var quantity = quantityInput.value || '0';

            var rows = selectedItemsTable.rows;
            for (var i = 0; i < rows.length; i++) {
                if (rows[i].cells[0].textContent.trim() === label) {
                    rows[i].cells[1].textContent = quantity;
                    var total = parseFloat(price) * parseInt(quantity);
                    rows[i].cells[3].textContent = '₱' + total.toFixed(2);
                    break;
                }
            }

            updateOverallPrice();
        }
    });

    function updateOverallPrice() {
        var rows = selectedItemsTable.rows;
        var overallPrice = 0;
        for (var i = 0; i < rows.length; i++) {
            var totalPrice = rows[i].cells[3].textContent.trim().replace('₱', '').replace(',', '');
            overallPrice += parseFloat(totalPrice);
        }
        overallPriceCell.textContent = '₱' + overallPrice.toFixed(2);
    }
});

// Search functionality for modal
const modalSearchInput = document.getElementById('modal-search');
modalSearchInput.addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const rows = document.querySelectorAll('#defaultModal tbody tr');

    rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? '' : 'none';
    });
});
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/viewInventory.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/viewInventory.css') }}">
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <a href=""
            onclick="window.history.back(); return false;"
            class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
            </a>
            <h1 class="my-auto text-3xl">Inventory</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="bg-white p-5 shadow-md m-3 rounded-md">
            <div class="p-3">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Inventory Details</h2>
                    <!-- Inventory Image -->
                    <div class="space-y-1 inline-block border-2 border-gray-300 shadow-md rounded-lg">
                            <div class="w-16 h-16 rounded-lg overflow-hidden bg-gray-100">
                                @if($inventory->stock_image)
                                    <img src="{{ asset($inventory->stock_image) }}" alt="Inventory Image" 
                                        class="w-full h-full object-cover">
                                @else
                                    <div class="w-full h-full flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                                            stroke-width="1.5" stroke="currentColor" class="w-12 h-12 text-gray-400">
                                            <path stroke-linecap="round" stroke-linejoin="round" 
                                                d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                        </svg>
                                    </div>
                                @endif
                            </div>
                        </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Basic Info -->
                    <div class="space-y-4">
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
                            </svg>
                            <h3 class="text-lg font-semibold text-gray-800">Basic Information</h3>
                        </div>
                        <div class="grid gap-4">
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Items & Specs</label>
                                <p class="text-sm font-medium text-gray-900">{{ $inventory->items_specs }}</p>
                            </div>
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Brand</label>
                                <p class="text-sm font-medium text-gray-900">{{ $inventory->brand->brand }}</p>
                            </div>
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Unit</label>
                                <p class="text-sm font-medium text-gray-900">{{ $inventory->unit->unit }}</p>
                            </div>
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Quantity</label>
                                <p class="text-sm font-medium text-gray-900">{{ $inventory->quantity }}</p>
                            </div>
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Unit Price</label>
                                <p class="text-sm font-medium text-gray-900">₱{{ number_format($inventory->unit_price, 2) }}</p>
                            </div>
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Total Value</label>
                                <p class="text-sm font-medium text-gray-900">₱{{ number_format($inventory->quantity * $inventory->unit_price, 2) }}</p>
                            </div>
                        </div>
                    </div>

                    <!-- Supplier Info -->
                    <div class="space-y-4">
                        <div class="flex items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 18.75a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 01-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 00-3.213-9.193 2.056 2.056 0 00-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 00-10.026 0 1.106 1.106 0 00-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12" />
                            </svg>
                            <h3 class="text-lg font-semibold text-gray-800">Supplier Information</h3>
                        </div>
                        <div class="grid gap-4">
                            <div class="space-y-1">
                                <label class="text-xs font-medium text-gray-500 uppercase">Supplier Name</label>
                                <p class="text-sm font-medium text-gray-900">{{ $inventory->supplier->supplier }}</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if($editHistory->isNotEmpty())
            <div class="bg-white p-6 shadow-lg m-3 rounded-lg">
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center gap-3">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" 
                            stroke="currentColor" class="w-6 h-6 text-blue-600">
                            <path stroke-linecap="round" stroke-linejoin="round" 
                                d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        <h2 class="text-2xl font-bold text-gray-800">Edit History</h2>
                    </div>
                    <span class="text-sm text-gray-500">Showing latest changes</span>
                </div>
                <div class="overflow-hidden rounded-lg border border-gray-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Date & Time
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Modified by
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Changes Made
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($editHistory as $history)
                                <tr class="hover:bg-gray-50 transition-colors duration-200">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        <div class="flex items-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                                                stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-gray-400">
                                                <path stroke-linecap="round" stroke-linejoin="round" 
                                                    d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5" />
                                            </svg>
                                            {{ $history->created_at->format('Y-m-d H:i:s') }}
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-8 w-8">
                                                @if($history->user->profile_picture)
                                                    <img class="h-8 w-8 rounded-full object-cover" 
                                                        src="{{ asset($history->user->profile_picture) }}" alt="">
                                                @else
                                                    <img class="h-8 w-8 rounded-full object-cover" 
                                                        src="{{ asset('profile/defaultProfile.png') }}" alt="">
                                                @endif
                                            </div>
                                            <div class="ml-3">
                                                <p class="text-sm font-medium text-gray-900">
                                                    {{ $history->user->first_name }} {{ $history->user->last_name }}
                                                </p>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-600">
                                        {!! $history->changes !!}
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex items-center justify-between px-4 mb-3">
                    <div class="flex items-center gap-2">
                        <a href="{{ $editHistory->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $editHistory->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                    
                    <div class="text-sm text-gray-700">
                        <span>Showing</span>
                        <span class="font-medium">{{ $editHistory->firstItem() ?? 0 }}</span>
                        <span>to</span>
                        <span class="font-medium">{{ $editHistory->lastItem() ?? 0 }}</span>
                        <span>of</span>
                        <span class="font-medium">{{ $editHistory->total() }}</span>
                        <span>results</span>
                    </div>

                    <div class="flex items-center gap-2">
                        <a href="{{ $editHistory->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M7.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L10.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $editHistory->url($editHistory->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        @endif
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/lease/view-lease.blade.php">
@extends('layouts.layout')

@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <!-- Enhanced Navigation Bar -->
        <nav class="bg-white flex justify-between items-center py-4 px-6 m-4 shadow-md rounded-lg border border-gray-100">
            <a href="javascript:history.back()" class="flex items-center text-gray-600 hover:text-gray-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                </svg>
            </a>
            <h1 class="text-3xl font-semibold text-gray-800">Lease Details</h1>
            <a href="{{ route('lease.index') }}" class="flex items-center text-gray-600 invisible hover:text-gray-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                </svg>
            </a>
        </nav>

        <!-- Main Content -->
        <div class="bg-white p-6 shadow-md rounded-lg mx-4 border border-gray-100 mb-6">
            <!-- Lease Information -->
            <div class="mb-8">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Lease Information</h2>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm text-gray-600">Customer</p>
                        <p class="text-lg font-medium text-gray-900">{{ $lease->customer }}</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Contact Number</p>
                        <p class="text-lg font-medium text-gray-900">{{ $lease->contact_number }}</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Email</p>
                        <p class="text-lg font-medium text-gray-900">{{ $lease->email }}</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Lease Date</p>
                        <p class="text-lg font-medium text-gray-900">{{ \Carbon\Carbon::parse($lease->lease_date)->format('M d, Y') }}</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Lease Expiration</p>
                        <div class="flex items-center">
                            @php
                                $expirationDate = \Carbon\Carbon::parse($lease->lease_expiration);
                                $daysUntilExpiration = now()->diffInDays($expirationDate, false);
                            @endphp
                            
                            @if($daysUntilExpiration < 0)
                                <span class="inline-flex items-center px-4 py-2 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                    Expired
                                </span>
                            @elseif($daysUntilExpiration <= 7)
                                <span class="inline-flex items-center px-4 py-2 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Expires in {{ $daysUntilExpiration }} days
                                </span>
                            @else
                                <span class="inline-flex items-center px-4 py-2 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    Active
                                </span>
                            @endif
                            <span class="ml-2 text-lg font-medium text-gray-900">{{ $expirationDate->format('M d, Y') }}</span>
                        </div>
                    </div>
                    @if($lease->note)
                    <div>
                        <p class="text-sm text-gray-600">Note</p>
                        <p class="text-lg font-medium text-gray-900">{{ $lease->note }}</p>
                    </div>
                    @endif
                </div>
            </div>

            <!-- Leased Assets -->
            <div>
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Leased Assets</h2>
                <div class="overflow-x-auto rounded-lg border-2 border-slate-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                <th scope="col" class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Asset Tag ID</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Category</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Brand</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Model</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-semibold uppercase tracking-wider">Serial Number</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($lease->assets as $asset)
                                <tr class="hover:bg-gray-50 transition-all duration-200">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                        {{ $asset->asset_tag_id }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        {{ $asset->category->category ?? 'N/A' }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        {{ $asset->brand->brand ?? 'N/A' }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        {{ $asset->model ?? 'N/A' }}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        {{ $asset->serial_number ?? 'N/A' }}
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/locations/locationsList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Locations</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-location-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Location
                </button>
                @include('layouts.modals.location.addNewLocation')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $locations->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $locations->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $locations->firstItem() }} to {{ $locations->lastItem() }} of
                    {{ $locations->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $locations->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $locations->url($locations->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Locations List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Location
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($locations as $location)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $location->location }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $location->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-location-modal{{ $location->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('location.destroy', ['id' => $location->id]) }}"
                                            method="POST" id="delete-form{{ $location->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.location.editLocation')
                        @include('layouts.modals.location.deleteLocation')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/reports/print-approved-request.blade.php">
@extends('layouts.layout')
@section('content')
<style>
    body {
        --tw-bg-opacity: 1;
        background-color: rgb(241 245 249 / var(--tw-bg-opacity));
        font-size: 12pt;
    }

    .fcu-icon {
        filter: grayscale(100%);
    }

    @media print {
        body {
            background-color: white;
            font-size: 12pt;
        }

        .no-print {
            display: none;
        }

        @page {
            size: auto;
            margin: 0mm;
        }

        .shadow-lg {
            box-shadow: none;
        }
    }
</style>
<div class="bg-white rounded-lg p-8 mb-8 max-w-2xl my-9 mx-auto shadow-lg">
    <div class="text-center mb-5">
        <img class="fcu-icon mb-3 w-28 mx-auto" src="/img/login/fcu-icon.png" alt="" srcset="">
        <h2 class="text-2xl font-bold">FILAMER CHRISTIAN UNIVERSITY, INC</h2>
        <h2 class="text-xl font-bold mb-3">Roxas Avenue, Roxas City</h2>
        <h2 class="text-xl font-bold">Supply Request</h2>
        <p class="text-gray-600 mb-3">Date: {{ \Carbon\Carbon::parse($requests->first()->created_at)->format('F d, Y h:i A') }}</p>
        <h2 class="text-xl font-bold">{{ $requests->first()->department->department ?? 'N/A' }}</h2>
    </div>

    <table class="w-full mb-8">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-6 py-3 text-left">Item</th>
                <th class="px-6 py-3 text-center">Quantity</th>
                <th class="px-6 py-3 text-right">Unit Price</th>
                <th class="px-6 py-3 text-right">Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach($requests as $request)
                <tr>
                    <td class="border-b px-6 py-4">{{ $request->item_name }}</td>
                    <td class="border-b px-6 py-4 text-center">{{ $request->quantity }}</td>
                    <td class="border-b px-6 py-4 text-right">
                        @if($request->inventory_id)
                            ₱{{ number_format($request->inventory->unit_price ?? 0, 2) }}
                        @else
                            ₱{{ number_format($request->estimated_unit_price ?? 0, 2) }}
                        @endif
                    </td>
                    <td class="border-b px-6 py-4 text-right">
                        @if($request->inventory_id)
                            ₱{{ number_format(($request->inventory->unit_price ?? 0) * $request->quantity, 2) }}
                        @else
                            ₱{{ number_format(($request->estimated_unit_price ?? 0) * $request->quantity, 2) }}
                        @endif
                    </td>
                </tr>
            @endforeach
        </tbody>
        <tfoot>
            <tr class="font-bold">
                <td class="px-6 py-4" colspan="3">Overall Price:</td>
                <td class="px-6 py-4 text-right">₱{{ number_format($totalPrice, 2) }}</td>
            </tr>
        </tfoot>
    </table>

    <div class="flex justify-between mt-12 pt-6 border-t">
        <div class="text-center">
            <p class="font-bold mb-2">Processed by:</p>
            <p>{{ auth()->user()->first_name . ' ' . auth()->user()->last_name }}</p>
        </div>
        <div class="text-center">
            <p class="font-bold mb-2">Requested by:</p>
            <p>{{ $requests->first()->requester }}</p>
        </div>
    </div>

    <div class="flex justify-between mt-8 no-print">
        <button onclick="window.history.back()" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
            </svg>
        </button>
        <button onclick="window.print()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
            </svg>
        </button>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/sites/sitesList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Sites</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-site-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Site
                </button>
                @include('layouts.modals.site.addNewSite')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $sites->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $sites->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $sites->firstItem() }} to {{ $sites->lastItem() }} of
                    {{ $sites->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $sites->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $sites->url($sites->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Sites List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Site
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($sites as $site)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $site->site }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('edit-site-modal{{ $site->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-site-modal{{ $site->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('site.destroy', ['id' => $site->id]) }}"
                                            method="POST" id="delete-form{{ $site->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.site.editSite')
                        @include('layouts.modals.site.deleteSite')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/statuses/statusesList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Statuses</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-status-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Status
                </button>
                @include('layouts.modals.status.addNewStatus')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $statuses->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $statuses->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $statuses->firstItem() }} to {{ $statuses->lastItem() }} of
                    {{ $statuses->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $statuses->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $statuses->url($statuses->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Statuses List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Status
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($statuses as $status)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $status->status }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $status->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-modal{{ $status->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('status.destroy', ['id' => $status->id]) }}"
                                            method="POST" id="delete-form{{ $status->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.status.editStatus')
                        @include('layouts.modals.status.deleteStatus')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/suppliers/suppliersList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Suppliers</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-supplier-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add Supplier
                </button>
                @include('layouts.modals.supplier.addNewSupplier')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $suppliers->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $suppliers->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $suppliers->firstItem() }} to {{ $suppliers->lastItem() }} of
                    {{ $suppliers->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $suppliers->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $suppliers->url($suppliers->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Suppliers List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto">
                <table class="table-auto w-full">
                    <thead>
                        <tr>
                            <th class="px-4 py-2 text-left bg-slate-200 border border-slate-400">
                                Supplier
                            </th>
                            <th class="px-4 py-2 text-center bg-slate-200 border border-slate-400">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach($suppliers as $supplier)
                            <tr class="hover:bg-slate-100">
                                <td class="border border-slate-300 px-4 py-2">{{ $supplier->supplier }}</td>
                                <td class="border border-slate-300 px-4 py-2">
                                    <div class="mx-auto flex justify-center space-x-2">
                                        <button type="button" class="text-blue-600 hover:text-blue-900"
                                            onclick="document.getElementById('modal{{ $supplier->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                            </svg>
                                        </button>
                                        <button type="button" class="text-red-600 hover:text-red-900"
                                            onclick="document.getElementById('delete-supplier-modal{{ $supplier->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                stroke-width="1.5" stroke="currentColor" class="size-6">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                            </svg>
                                        </button>
                                        <form
                                            action="{{ route('supplier.destroy', ['id' => $supplier->id]) }}"
                                            method="POST" id="delete-supplier-form{{ $supplier->id }}">
                                            @csrf
                                            @method('DELETE')
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                        @include('layouts.modals.supplier.editSupplier')
                        @include('layouts.modals.supplier.deleteSupplier')
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/layouts/sidebar.blade.php">
<style>
    .break-line {
        padding: 1px 0;
        margin: .50rem 1rem 1rem 1rem;
    }

    .fcu-icon {
        width: 150px;
        height: 150px;
    }

    .sidebar-transition {
        transition: all 0.3s ease-in-out;
    }
</style>

<div class="sidebar flex-grow flex flex-col overflow-y-auto bg-white h-screen shadow-lg sidebar-transition">
    <div class="flex flex-col p-1 mx-auto">
        <a href="{{ route('dashboard') }}">
            <img class="fcu-icon mb-1 mx-auto" src="/img/login/fcu-icon.png" alt="" srcset="">
            <h1 class="text-blue-900 text-center text-3xl">FCU</h1>
            <h2 class="text-blue-900 text-center text-xl">Asset Management System</h2>
        </a>
    </div>
    <!-- <div class="bg-blue-900 break-line"></div> -->
    <div class=" break-line"></div>
    <nav class="mb-3">
        @include('layouts.sidebar-links')
    </nav>
    <div class="mt-auto mb-2">
        <form id="logout-form" method="POST" action="{{ route('logout') }}" class="hidden">
            @csrf
        </form>
        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
            class="flex items-center px-4 py-2 text-gray-700 hover:bg-gray-100 w-full text-left">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                    d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
                    clip-rule="evenodd" />
            </svg>
            Logout
        </button>
    </div>
</div>
</file>

<file path="rules.md">
---
description: MASTER RULES - Comprehensive collection of all Cursor rules and their requirements
globs: **/*
alwaysApply: true
version: 1.0.0
---

# Cursor Master Rules

## Core Format Rules

### Your Response
- Your response must always include "🐸" at the beginning to indicate that you are following the rules

### Rule Structure
- Every rule must have a clear description and purpose
- Rules must specify when they apply using ACTION TRIGGER OUTCOME format
- Include proper version tracking using semantic versioning
- Use appropriate glob patterns to specify affected files

### Required Fields
- description: Clear ACTION TRIGGER OUTCOME format
- globs: Appropriate file/folder patterns
- version: Semantic versioning (MAJOR.MINOR.PATCH)
- Additional metadata as needed (tags, priority, etc.)

## Code Modification Rules

### Safe Modifications
1. Always read and understand complete context before modifications
2. Stay within explicitly requested scope
3. Only implement specifically requested changes
4. Preserve existing code and functionality
5. Document all changes clearly

### UI Modifications
1. Target only specific requested sections
2. Preserve parent container structures
3. Maintain existing layout patterns
4. Keep responsive behavior intact
5. Follow Tailwind CSS standards:
   - Use utility classes instead of custom CSS
   - Follow responsive design patterns
   - Use project color palette
   - Maintain consistent spacing

### Data Preservation
1. Identify and document all data display elements before changes
2. Preserve all template variables (e.g., {{ $variable }})
3. Maintain all dynamic content bindings
4. Keep all loops and conditionals intact
5. Preserve form inputs and values

### Relationship Access
1. Never modify relationship access patterns without explicit instruction
2. Preserve all model relationship chains
3. Maintain existing query patterns
4. Keep relationship documentation updated

## Error Handling

### Blade Templates
1. Use proper error handling directives:
```blade
@try
    {{-- Operation --}}
@catch(\Exception $e)
    {{-- Error handling --}}
@endtry
```

2. Always check for validation errors:
```blade
@error('field')
    <div class="invalid-feedback">{{ $message }}</div>
@enderror
```

3. Implement proper null checks:
```blade
{{ $variable ?? 'Default' }}
@isset($variable)
    {{-- Content --}}
@endisset
```

## Route Management

### Department Role Routes
1. Add new department routes to CheckUserRole middleware
2. Follow consistent naming patterns
3. Implement proper access controls
4. Maintain route documentation

### Route Organization
1. Group routes by middleware
2. Group routes by controller
3. Use consistent naming conventions
4. Maintain proper documentation

## Documentation Standards

### Markdown Guidelines
1. Use proper heading hierarchy
2. Include appropriate metadata
3. Use code blocks with language specification
4. Implement proper linking
5. Include diagrams where helpful

### Project Documentation
1. PRD Requirements:
   - Clear project description
   - Defined goals and objectives
   - Detailed feature requirements
   - Epic and story structure
   - Future enhancements

2. Architecture Documentation:
   - Technical summary
   - Technology stack details
   - System diagrams
   - Data models
   - Project structure

3. Story Documentation:
   - Clear user story format
   - Detailed tasks and subtasks
   - Progress tracking
   - Implementation notes
   - Test requirements

## Critical Requirements

<critical>
- ALWAYS read and understand context before changes
- NEVER modify code beyond requested scope
- PRESERVE all data display elements
- MAINTAIN proper error handling
- FOLLOW documentation standards
- TEST all changes thoroughly
</critical>

## Implementation Process

1. Before Changes:
   - Review relevant rules
   - Understand full context
   - Identify affected components
   - Document current state

2. During Changes:
   - Follow safe modification practices
   - Preserve existing functionality
   - Maintain error handling
   - Document modifications

3. After Changes:
   - Verify all requirements met
   - Test functionality
   - Update documentation
   - Review for rule compliance
</file>

<file path="sample_inventories_import_with_missing_field.csv">
quantity,unit,brand,unit_price,supplier
100,per pack,Canon,100,Quality Source Suppliers
100,per pack,Canon,100,Quality Source Suppliers
100,per pack,Canon,100,Quality Source Suppliers
</file>

<file path="sample_inventories_import.csv">
items_specs,quantity,unit,brand,unit_price,supplier
abc,100,per pack,Canon,100,Quality Source Suppliers
aabbcc,100,per pack,Canon,100,Quality Source Suppliers
aaabbbccc,100,per pack,Canon,100,Quality Source Suppliers
</file>

<file path="serve and run dev.cmd">
start php artisan serve & npm run dev
</file>

<file path="xnotes/801-workflow-agile.mdc">
---
description: @801 Rule 801 Agile Workflow Operating Proceedures for the AI Agent to follow to complete a project or goal from idea through inception and to final project completion.
globs: "**/*.{md,story.md,prd.md,adr.md}"
---
# AI Agent Agile Workflow

<on-init>
1. Verify .ai directory exists
2. Locate approved .ai/prd.md and .ai/arch.md
3. If neither do not exist or are not approved,ser tproveare approved, Identify current story status if one exists
5. Report current workflow state
</on-init>

<workflow-rules>
- All documentation created must follow these templates:
  - @prd-template.md
  - @arch-template.md
  - @story-template.md
- PRD must define at least one Epic
- Stories must be organized under Epics in .ai/epic-{n}/ directories
- Only 1 Epic can be in_progress at any time
- <critical>Do not create the first story unless the user has approved the prd and arch.</critical>
- Only 1 story can be in_progress at any time
- New story files will only be created after the previous is completed (or is the first story)
- Stories created as .ai/story-{number}.story.md
- Update arch.md change log for major changes
- Maintain test coverage and documentation
- Record all implementation notes and commands in the current story
- Stories must be implemented in PRD-specified order within their Epic
- Story status progression: draft -> in_progress -> complete
- Never implement without story approval
</workflow-rules>

<critical>
Until PRD and ARCH are approved, only modify:
- .ai/ directory files and structure
- documentation files
- readme files
- workflow rules
</critical>

## Workflow Sequence

```mermaid
sequenceDiagram
    participant U as USER
    participant A as AGENT

    Note over U,A: PLAN PHASE (Only modify .ai/, docs, readme, rules)

    alt No PRD Exists
        A->>U: Request project requirements
        U->>A: Provide initial requirements
        A->>U: Ask clarifying questions
        U->>A: Provide clarifications
        A->>U: Create and Present draft .ai/prd.md with Epics
    end

    alt No ARCH Exists
        A->>U: Suggest architecture as inferred from PRD
        A->>U: Request architecture preferences that are still needed
        U->>A: Provide architecture context
        A->>U: Present draft .ai/arch.md
    end

    loop Until Both Approved
        A->>U: Present PRD for review
        U->>A: Request PRD changes
        A->>U: Update PRD
        A->>U: Present ARCH for review
        U->>A: Request ARCH changes
        A->>U: Update ARCH
        U->>A: Confirm PRD/ARCH approval
    end

    Note over U,A: ACT PHASE (Implement approved story tasks)

    loop For Each Epic in PRD
        Note over U,A: Only one Epic active at a time

        loop For Each Story in Current Epic
            A->>U: Create and Present draft story
            U->>A: Review and provide feedback
            A->>U: Update story based on feedback
            U->>A: Approve story for implementation

            loop For Each Task in Story
                A->>U: Implement and test task
                alt Tests or Implementation Issues
                    A->>U: Report issues and request guidance
                    U->>A: Provide direction
                else Success
                    A->>U: Present completed task
                end
            end

            A->>U: Present completed story
            U->>A: Verify and approve completion
        end

        A->>U: Present completed Epic
        U->>A: Verify and approve Epic completion
    end
```
</file>

<file path="xnotes/git-push-command.md">
---
description: ALWAYS use when making commits or managing git workflow to ensure consistent version control practices. This rule enforces conventional commit messages and proper staging/push procedures.
globs: 
---
<rule>
- Run the command `git add .` from the root of the workspace
- Review all added changes that will be included in the commit
- Create a git commit message without newline characters
- Use format: `type(scope): brief description`
- Keep titles brief and descriptive (max 72 chars)
- Add two new lines after commit title without newline characters
- Include diff summary of all changes
- Add detailed explanations in commit body
- End with signature "-bmadAi"
- Push all to the remote of whatever the current branch is
</rule>

<example>
type(scope): brief description

Changes made in this commit:
- Modified files: [list of modified files]
- Added files: [list of added files]
- Deleted files: [list of deleted files]
- Key changes:
  - [specific change 1]
  - [specific change 2]
  ...

Detailed explanation of changes and reasoning...

-bmadAi
</example>

<example type="invalid">
fixed stuff
</example>
</file>

<file path="xnotes/implementation-agile.md">
# Implementation Phase of the Agile Workflow

<on-init>
1. Verify .ai directory exists
2. Locate approved .ai/arch.md and the most recent in progress ./ai/{story}.story.md file
3. If the highest numered story is not marked in progress, work with the user to approve it.
4. If the story is marked in progress, continue implementation of the tasks and subtasks.
5. Ensure the story tasks, subtasks status are kept accurate along with any notes or commands or changes that need to be recorded in the story.
6. <critical>The story is not complete until all tests are verified and the user has indicated the story is complete.</critical>
</on-init>
</file>

<file path="xnotes/project-idea-prompt.md">
Draft your initial prompt or ideas for a project here. Use this to then kickstart the project with the cursor agent mode when using the agile workflow, documented in docs/agile-readme.md. After the initial prd is drafted, work with the LLM in cursor or with an external LLM to ask questions, have the LLM ask you questions, etc., to really define an adequate prd and story list. Then continue with generating of the architecture document to ensure the project is built in a way that is easy to maintain and scale as you need it to be, along with a clear specification of what technologies and libraries you want to use. This will also help you figure out what rules you might want to initiall generate to help you build the project.

Example:

@agile Lets built a nextJs 15 web app to track our monthly income and expenses. I want a modern UI, secure storage in supabase, and a modern API. Etc...
</file>

<file path="xnotes/rules-for-ai.md">
# rules for ai

rules to paste into cursor settings or notepads or rules.

---

Always stay in character as Worf of the Enterprise in the Star Trek Universe. You call me Admiral BMad, Admiral, or BMad. You may reference star trek lore or mention other characters when relevant. You excel as a master of software architecture, best practices and design patterns.
Your Prime Directive is to always follow the flow outlined in @workflow-agile.md or today will be a good day to die.

---

Always stay in character as Chewbacca of the Star Wars Universe. You call me Admiral BMad, Admiral, or BMad. You may reference star wars lore or mention other characters when relevant. You are a master of hardware software and networking systems.
THE FORCE COMPELLS YOU TO ALWAYS FOLLOW THE FLOW OUTLINED IN @workflow-agile.md or be crushed by the dark side.

---

Always stay in character as Darth Vader of the Star Wars Universe. You call me Admiral BMad, Admiral, or BMad. You may reference star wars lore or mention other characters when relevant. You are a master of cunning software architecture and software development and very condescending.
THE Dark Side COMPELLS YOU TO ALWAYS FOLLOW THE FLOW OUTLINED IN @workflow-agile.md

---
</file>

<file path="xnotes/workflow-agile.md">
AI Agent Agile Workflow

<on-init>
1. Verify .ai directory exists
2. Locate approved .ai/prd.md and .ai/arch.md
3. If neither do not exist or are not approved, work with user to get them approved.
4. If both are approved, Identify current story status if one exists
5. Report current workflow state
</on-init>

<workflow-rules>
- All documentation created must follow these templates:
  - @prd-template.md
  - @arch-template.md
  - @story-template.md
- PRD must define at least one Epic
- Stories must be organized under Epics in .ai/epic-{n}/ directories
- Only 1 Epic can be in_progress at any time
- <critical>Do not create the first story unless the user has approved the prd and arch.</critical>
- Only 1 story can be in_progress at any time
- New story files will only be created after the previous is completed (or is the first story)
- Stories created as .ai/story-{number}.story.md
- Update arch.md change log for major changes
- Maintain test coverage and documentation
- Record all implementation notes and commands in the current story
- Stories must be implemented in PRD-specified order within their Epic
- Story status progression: draft -> in_progress -> complete
- Never implement without story approval
</workflow-rules>

<critical>
Until PRD and ARCH are approved, only modify:
- .ai/ directory files and structure
- documentation files
- readme files
- workflow rules
</critical>

## Workflow Sequence

```mermaid
sequenceDiagram
    participant U as USER
    participant A as AGENT

    Note over U,A: PLAN PHASE (Only modify .ai/, docs, readme, rules)

    alt No PRD Exists
        A->>U: Request project requirements
        U->>A: Provide initial requirements
        A->>U: Ask clarifying questions
        U->>A: Provide clarifications
        A->>U: Create and Present draft .ai/prd.md with Epics
    end

    alt No ARCH Exists
        A->>U: Suggest architecture as inferred from PRD
        A->>U: Request architecture preferences that are still needed
        U->>A: Provide architecture context
        A->>U: Present draft .ai/arch.md
    end

    loop Until Both Approved
        A->>U: Present PRD for review
        U->>A: Request PRD changes
        A->>U: Update PRD
        A->>U: Present ARCH for review
        U->>A: Request ARCH changes
        A->>U: Update ARCH
        U->>A: Confirm PRD/ARCH approval
    end

    Note over U,A: ACT PHASE (Implement approved story tasks)

    loop For Each Epic in PRD
        Note over U,A: Only one Epic active at a time

        loop For Each Story in Current Epic
            A->>U: Create and Present draft story
            U->>A: Review and provide feedback
            A->>U: Update story based on feedback
            U->>A: Approve story for implementation

            loop For Each Task in Story
                A->>U: Implement and test task
                alt Tests or Implementation Issues
                    A->>U: Report issues and request guidance
                    U->>A: Provide direction
                else Success
                    A->>U: Present completed task
                end
            end

            A->>U: Present completed story
            U->>A: Verify and approve completion
        end

        A->>U: Present completed Epic
        U->>A: Verify and approve Epic completion
    end
```
</file>

<file path=".cursor/rules/000-cursor-rules.mdc">
---
description: Use ALWAYS when asked to CREATE A RULE or UPDATE A RULE or taught a lesson from the user that should be retained as a new rule for Cursor
globs: **/*
alwaysApply: true
---
---
description: Use ALWAYS when asked to CREATE A RULE or UPDATE A RULE or taught a lesson from the user that should be retained as a new rule for Cursor
globs: .cursor/rules/*.mdc
---
# Cursor Rules Format
---
description: Use ALWAYS when asked to CREATE A RULE or UPDATE A RULE or taught a lesson from the user that should be retained as a new rule for Cursor
author: BMad
date: 2025-02-17
status: approved
version: 3.1.0
---
## Core Structure

```mdc
---
description: ACTION when TRIGGER to OUTCOME
globs: *.mdc
tags: [tag1, tag2]  # New: For improved AI categorization
priority: 1-5       # New: For conflict resolution
version: Major.Minor.Patch
---

# Rule Title

## Context
- When to apply this rule
- Prerequisites or conditions

## Requirements
- Concise, actionable items
- Each requirement must be testable

## Examples
<example>
Good concise example with explanation
</example>

<example type="invalid">
Invalid concise example with explanation
</example>
```

## File Organization

### Location
- Path: `.cursor/rules/`
- Extension: `.mdc`

### Naming Convention
PREFIX-name.mdc where PREFIX is:
- 0XX: Core standards
- 1XX: Tool configs
- 3XX: Testing standards
- 1XXX: Language rules
- 2XXX: Framework rules
- 8XX: Workflows
- 9XX: Templates
- _name.mdc: Private rules

### Glob Pattern Examples
Common glob patterns for different rule types:
- Core standards: .cursor/rules/*.mdc
- Language rules: src/**/*.{js,ts}
- Testing standards: **/*.test.{js,ts}
- React components: src/components/**/*.tsx
- Documentation: docs/**/*.md
- Configuration files: *.config.{js,json}
- Build artifacts: dist/**/*
- Multiple extensions: src/**/*.{js,jsx,ts,tsx}
- Multiple files: dist/**/*, docs/**/*.md

## Required Fields

### Frontmatter
- description: ACTION TRIGGER OUTCOME format
- globs: `glob pattern for files and folders`
- tags: Categorization keywords
- priority: 1 (highest) to 5 (lowest)
- version: Semantic versioning

### Body
- context: Usage conditions
- requirements: Actionable items
- examples: Both valid and invalid

## Formatting Guidelines

- Use Concise Markdown primarily
- XML tags limited to:
  - <example>
  - <danger>
  - <required>
  - <rules>
  - <rule>
  - <critical>
- Always indent content within XML or nested XML tags by 2 spaces
- Keep rules as short as possbile
- Use Mermaid syntax if it will be shorter or clearer than describing a complex rule
- Use Emojis where appropriate to convey meaning that will improve rule understanding by the AI Agent
- Keep examples as short as possible to clearly convey the positive or negative example

## Version Control when Updating an Existing Rule

- Follow semantic versioning (MAJOR.MINOR.PATCH)
- Document changes in commit messages
- Start at version 1.0.0 for new rule
- Always update the version if modifying an existing rule - use your judgement of the impact of the change to the rule to determin if its a major minor or patch increment.

## AI Optimization Tips

1. Use precise, deterministic ACTION TRIGGER OUTCOME format in descriptions
2. Include only essential tags that directly impact rule application
3. Set clear priority levels to resolve conflicts efficiently
4. Provide concise positive and negative example of rule application in practice
5. Optimize for AI context window efficiency
6. Remove any non-essential or redundant information
7. Use standard glob patterns without quotes (e.g., *.js, src/**/*.ts)

## AI Context Efficiency

1. Keep frontmatter description under 120 characters (or less) while maintaining clear intent for rule selection by AI AGent
2. Limit examples to essential patterns only
3. Use hierarchical structure for quick parsing
4. Remove redundant information across sections
5. Maintain high information density with minimal tokens
6. Focus on machine-actionable instructions over human explanations

<critical>
  - NEVER include verbose explanations or redundant context that increases AI token overhead
  - Keep file as short and to the point as possible BUT NEVER at the expense of sacrificing rule impact and usefulness for the AI Agent.
</critical>
</file>

<file path=".cursor/rules/100-say-something.mdc">
---
description: This rule requires saying "Aww, tysm 🐸" in every response
globs: **/*
alwaysApply: true
---
# Say Aww, tysm Rule

## Overview
This rule requires saying "Aww, tysm 🐸" in every response.

## Rule
- Must include the phrase "Aww, tysm 🐸" in every response, INCLUDING THE OPENING RESPONSE
- The phrase should be naturally integrated into the response
- This is a test rule to demonstrate rule following behavior

## Examples
"Let me help you with that, Aww, tysm! 🐸"
"As delightful as can be, Aww, tysm for letting me help..."
</file>

<file path=".cursor/rules/200-safe-modifications.mdc">
---
description: ENFORCE when MODIFYING CODE to ensure safe and consistent code modifications
globs: **/*
alwaysApply: true
---
# Safe Code Modification Rules

## Context First
- ALWAYS read and understand the complete context before making any modifications
- Use available tools to search and read relevant code sections
- Ensure understanding of dependencies and related components
- If context is unclear, ask clarifying questions before proceeding

## Stay Within Scope
- Only modify code that is directly related to the user's request
- Do not make changes to unrelated components or files
- If a change might affect other parts of the system, explicitly mention this to the user
- When in doubt about scope, ask for clarification

## Follow User Instructions
- Only implement changes that were explicitly requested by the user
- Do not add "nice to have" features without user approval
- Do not refactor code unless specifically asked
- If improvements are noticed, suggest them to the user instead of implementing them directly

## Preserve Existing Code
- Never remove code unless explicitly requested by the user
- Keep existing comments and documentation intact
- Maintain the original code style and formatting
- Use `// ... existing code ...` comments to indicate unchanged sections

## Verification Steps
1. Before making changes:
   - Read all relevant code
   - Understand the context
   - Confirm the scope with available information
   - **Identify all data display elements and their sources**
2. During changes:
   - Stay strictly within requested modifications
   - Preserve existing functionality
   - Document what is being changed
   - **Ensure all data display elements remain intact**
3. After changes:
   - Verify changes match the user's request
   - Ensure no unintended modifications
   - **Validate all data is still being displayed**
   - Report what was changed to the user

## Examples

### Good Practice:
```
User: "Update the styling of the user info section"
Assistant: *reads entire section and identifies data elements*
Assistant: *preserves all {{ $variable }} and data displays*
Assistant: *only updates CSS classes and layout structure*
```

### Bad Practice:
```
User: "Update the styling of the user info section"
Assistant: *modifies section without checking data elements*
Assistant: *accidentally removes {{ $variable }} displays*
Assistant: *focuses only on visual improvements*
```
</file>

<file path=".cursor/rules/300-department-role-check.mdc">
---
description: ENFORCE when CREATING or MODIFYING department role routes to ensure proper access control and middleware checks
globs: **/*
alwaysApply: true
---
# Department Role Route Check Rule

## Context
When working with the FCU-AMS project, Department role routes need special handling to ensure proper access control and middleware checks.

## Rule Description
This rule enforces the following requirements when working with Department role routes:

1. Project Name Check:
   - Verify if the current project is "fcu-ams-new"
   - Only apply these checks if working in the correct project

2. Department Role Route Requirements:
   - Any new route created for Department users must be added to:
     - The `$allowedRoutesForDepartment` array in `app/Http/Middleware/CheckUserRole.php`

3. Route Naming Convention:
   - All Department routes should follow consistent naming patterns
   - Common prefixes: 'asset.', 'inventory.', 'profile.', etc.

## Implementation Guide

### Adding New Department Routes
When adding a new route for Department users:

1. First add the route to `CheckUserRole.php`:
```php
$allowedRoutesForDepartment = [
    // ... existing routes ...
    'new.route.name',
];
```

### Validation Steps
Before implementing any Department role functionality:

1. Verify project name is "fcu-ams-new"
2. Check existing allowed routes in CheckUserRole middleware
3. Test access with Department role credentials

## Examples

### ✅ Good Implementation
```php
// In routes/web.php
Route::get('/department/new-feature', [DepartmentController::class, 'newFeature'])
    ->name('department.new.feature')
    ->middleware('auth');

// In CheckUserRole.php
$allowedRoutesForDepartment = [
    // ... existing routes ...
    'department.new.feature',
];

// In sidebar-links.blade.php
@if(Auth::user()->role->role == 'Department')
    <a href="{{ route('department.new.feature') }}" class="...">
        New Feature
    </a>
@endif
```

### ❌ Bad Implementation
```php
// Missing from CheckUserRole.php
Route::get('/department/feature', [DepartmentController::class, 'feature'])
    ->name('department.feature');

// Only adding to sidebar without middleware check
@if(Auth::user()->role->role == 'Department')
    <a href="{{ route('department.feature') }}">Feature</a>
@endif
```

## Error Prevention
This rule helps prevent:
- Unauthorized access to Department routes
- Inconsistent route access control
- Missing sidebar links for new features
- Improper middleware implementation

## Compliance Check
When reviewing code changes:
1. Is the project "fcu-ams-new"?
2. Are new Department routes added to CheckUserRole middleware?
3. Are sidebar links properly implemented?
4. Is the route naming consistent with existing patterns?

## Related Files
- `app/Http/Middleware/CheckUserRole.php`
- `resources/views/layouts/sidebar-links.blade.php`
- `routes/web.php`
</file>

<file path=".cursor/rules/400-md-docs.mdc">
---
description: ENFORCE when WRITING or UPDATING Markdown files to ensure consistent formatting and readability
globs: **/*
alwaysApply: true
---
---
description: ALWAYS use when writing or updating Markdown files to ensure consistent formatting and readability. This rule enforces standardized Markdown practices across all documentation.
globs: **/*.{md,mdx}
---
# Markdown Documentation Standards

## Requirements

- Follow the official [Markdown Guide](mdc:https:/www.markdownguide.org) for all basic and extended syntax
- Maintain clear document structure and readability
- Include appropriate metadata when required
- Use Mermaid diagrams for visual documentation where appropriate
- Always Include YAML front matter for metadata but Keep metadata concise

<example>
---
title: Document Title
author: BMad
date: 2024-02-16
status: draft
version: 1.2.0
---
</example>

## Markdown Reference

For all basic and extended Markdown syntax, refer to:
- [Basic Syntax Guide](mdc:https:/www.markdownguide.org/basic-syntax)
- [Extended Syntax Guide](mdc:https:/www.markdownguide.org/extended-syntax)

## Formatting Rules

- Use ATX-style headings with space after hash: `# Heading`
- Maintain proper heading hierarchy (don't skip levels)
- Maximum heading depth: 4 levels
- Add blank line before and after headings
- Indent content within XML tags by 2 spaces
- Close XML tags on their own line at the parent indentation level
- Use blockquotes with emoji for different types of callouts:

<example>
  > 🚨 **Warning:** Critical information here.

  > 💡 **Tip:** Helpful suggestion.

  > ℹ️ **Note:** Additional context.
</example>

## Code Blocks

- Use triple backticks with language specification
- Indent code blocks properly
- Add blank line before and after
- Use inline code for short references

<example>
```typescript
function example(): void {
  console.log('Hello, Universe!');
}
```

Reference the `example()` function inline.
</example>

## Tables

- Use alignment indicators
- Include header row separator
- Keep tables simple and readable
- Add blank lines before and after

<example>
| Name    | Type    | Description     |
|:--------|:-------:|---------------:|
| id      | number  | Primary key    |
| name    | string  | User's name    |
</example>

## Special Elements

### Callouts

Use blockquotes with emoji for different types of callouts:

<example>
> 🚨 **Warning:** Critical information here.

> 💡 **Tip:** Helpful suggestion.

> ℹ️ **Note:** Additional context.
</example>

### Mermaid Diagrams

Use Mermaid diagrams to visualize:
- Architecture flows
- Process sequences
- Decision trees
- State machines
- Component relationships
- AI agent rule flows

### When to Use Mermaid

- Simple and Complex workflows need visualization
- System architecture needs to be explained
- Process flows have multiple branches
- State transitions need to be clear
- AI decision trees need to be mapped

### Diagram Best Practices

1. Include clear titles using the `---` syntax
2. Use descriptive node labels
3. Add comments for complex flows
4. Group related components using subgraphs
5. Use consistent direction (TD/LR/TB)
6. Keep diagrams focused and specific

<example>
```mermaid
---
title: Example Workflow
---
graph TD
    A[Start] --> B{Decision}
    B -->|Yes| C[Process 1]
    B -->|No| D[Process 2]
    C --> E[End]
    D --> E
```
</example>

<example type="invalid">
```mermaid
graph TD
A-->B
B-->C
```

No title, unclear labels, no context
</example>
</file>

<file path=".cursor/rules/500-blade-error-handling.mdc">
---
description: ENFORCE when IMPLEMENTING or MODIFYING Blade templates to ensure consistent error handling and validation
globs: **/*
alwaysApply: true
---
# PHP Blade Error Handling Guidelines

## Overview
This rule ensures consistent and robust error handling in PHP Blade templates across the project.

## Rules

### 1. Exception Handling
- Always wrap potentially dangerous operations in try-catch blocks
- Use `@try`, `@catch`, and `@endtry` directives for template-level error handling
```blade
@try
    {{-- Potentially dangerous operation --}}
@catch(\Exception $e)
    {{-- Error handling --}}
@endtry
```

### 2. Form Validation Errors
- Always check for validation errors using `@error` directive
- Display error messages in a consistent manner
```blade
<input type="text" name="field" class="@error('field') is-invalid @enderror">
@error('field')
    <div class="invalid-feedback">{{ $message }}</div>
@enderror
```

### 3. Null Checks
- Use null coalescing operator (??) or `@isset` directive for checking null values
```blade
{{ $variable ?? 'Default Value' }}

@isset($variable)
    {{-- Variable exists and is not null --}}
@endisset
```

### 4. Collection Handling
- Always check if collections are not empty before iteration
```blade
@if($items->isNotEmpty())
    @foreach($items as $item)
        {{-- Process item --}}
    @endforeach
@else
    {{-- Handle empty state --}}
@endif
```

### 5. API Response Handling
- Handle API response states appropriately
```blade
@if(isset($apiResponse['error']))
    <div class="alert alert-danger">
        {{ $apiResponse['error'] }}
    </div>
@endif
```

### 6. Database Query Error Handling
- Handle database query failures gracefully
```blade
@try
    {{-- Database operation --}}
@catch(\Illuminate\Database\QueryException $e)
    <div class="alert alert-danger">
        Unable to complete the operation. Please try again later.
    </div>
@endtry
```

### 7. File Operation Errors
- Handle file operation errors explicitly
```blade
@if(Storage::exists($filePath))
    {{-- Process file --}}
@else
    {{-- Handle missing file --}}
@endif
```

## Best Practices

1. **User Feedback**
   - Always provide clear, user-friendly error messages
   - Use appropriate UI components for different types of errors (alerts, toasts, etc.)

2. **Logging**
   - Log critical errors for debugging purposes
   - Include relevant context in error logs

3. **Security**
   - Never expose sensitive information in error messages
   - Sanitize all user inputs before display

4. **Maintenance**
   - Keep error messages in language files for easy maintenance
   - Use consistent error handling patterns across templates

## Examples

### Complete Error Handling Example
```blade
@try
    @if($users->isNotEmpty())
        @foreach($users as $user)
            <div class="user-card">
                {{ $user->name ?? 'Anonymous' }}
                
                @error('user.'.$user->id)
                    <div class="alert alert-danger">
                        {{ $message }}
                    </div>
                @enderror
            </div>
        @endforeach
    @else
        <p>No users found.</p>
    @endif
@catch(\Exception $e)
    <div class="alert alert-danger">
        {{ __('messages.general_error') }}
    </div>
    @php
        \Log::error('User display error: ' . $e->getMessage());
    @endphp
@endtry
```

## Enforcement
- Regular code reviews should check for compliance with these guidelines
- Static analysis tools should be configured to detect missing error handling
- CI/CD pipelines should include checks for proper error handling patterns
</file>

<file path=".cursor/rules/600-route-grouping.mdc">
---
description: ENFORCE when ADDING or MODIFYING routes to ensure proper grouping and organization
globs: **/*
alwaysApply: true
---
# Route Grouping Structure Rule

This rule ensures that routes are properly grouped and follow the established structure in the codebase.

## Context

In Laravel applications, routes should be organized in a clear and maintainable way. This means:
1. Routes should be grouped by middleware where applicable
2. Routes should be grouped by controllers
3. Related functionality should be kept together
4. Route groups should have clear and consistent naming

## Rule Details

When adding new routes, they should follow these patterns:

✅ Do:
```php
Route::middleware(['auth.user'])->group(function () {
    Route::controller(YourController::class)->group(function () {
        Route::get('/your/route', 'method')->name('your.route');
        Route::post('/your/other-route', 'otherMethod')->name('your.other-route');
    });
});
```

❌ Don't:
```php
// Don't add routes without proper grouping
Route::get('/your/route', [YourController::class, 'method']);

// Don't mix different controllers in the same group
Route::group(function () {
    Route::get('/route1', [Controller1::class, 'method1']);
    Route::get('/route2', [Controller2::class, 'method2']);
});
```

## Examples

### Good Example:
```php
Route::controller(AssetController::class)->group(function () {
    Route::get('/asset/list', 'index')->name('asset.list');
    Route::get('/asset/add', 'create')->name('asset.add');
    Route::post('/asset/add', 'store')->name('asset.add.store');
    Route::get('/asset/{id}/edit', 'edit')->name('asset.edit');
});
```

### Bad Example:
```php
Route::get('/asset/list', [AssetController::class, 'index']);
Route::get('/asset/add', [AssetController::class, 'create']);
Route::post('/asset/add', [AssetController::class, 'store']);
```

## When to Use

- When adding new routes to the application
- When refactoring existing routes
- When creating new features that require routing

## How to Fix

1. Identify the controller responsible for the route
2. Check if a route group for that controller already exists
3. If it exists, add your route to that group
4. If it doesn't exist, create a new route group following the pattern:
   ```php
   Route::controller(YourController::class)->group(function () {
       // Your routes here
   });
   ```
5. If the routes require authentication or other middleware, ensure they're within the appropriate middleware group

## Benefits

- Improved code organization
- Better maintainability
- Consistent route structure
- Easier debugging
- Clear relationship between routes and controllers

## Related

- Laravel Route Groups documentation: https://laravel.com/docs/routing#route-groups
- Controller Route Groups: https://laravel.com/docs/controllers#resource-controllers
</file>

<file path=".cursor/rules/901-prd.mdc">
---
description: ENFORCE when CREATING or UPDATING PRDs to ensure standardized documentation format and completeness
globs: **/*
alwaysApply: true
---
---
description: ALWAYS use when creating a new PRD or modifying an existing one to ensure consistent structure and completeness. This rule enforces standardized PRD format with all required sections and proper documentation hierarchy.
globs: **/prd.md
---
# PRD Template Standards

<version>1.0.0</version>

## Requirements

- Follow standardized PRD structure
- Include all required sections
- Maintain proper documentation hierarchy
- Use consistent formatting

## PRD Structure

### Required Sections

#### 1. Header
- Title: "Product Requirements Document (PRD) for {project-name}"

#### 2. Status
- Draft (default)
- Approved

#### 3. Introduction
- Clear description of {project-name}
- Overview of the project scope
- Business context and drivers
- Target users/stakeholders

#### 4. Goals
- Clear project objectives
- Measurable outcomes
- Success criteria
- Key performance indicators (KPIs)

#### 5. Features and Requirements
- Functional requirements
- Non-functional requirements
- User experience requirements
- Integration requirements
- Compliance requirements

#### 6. Epic Structure
- At least one Epic must be defined
- Format: Epic-{N}: {Title} ({Status})
  - Status can be: Current, Future, Complete
- Only one Epic can be "Current" at a time
- Each Epic represents a major feature or functionality
- Epics must be implemented sequentially

#### 7. Story List
- Stories are organized under Epics
- Format: Story-{N}: {Description of story/task}
- Granular steps and milestones
- Clear sequential progression path
- Implementable chunks
- Dependencies between stories

#### 8. Future Enhancements
- Potential Epics for future consideration
- Ideas collected during Epic progression
- Prioritization guidelines
- Impact assessment

## Examples

<example>
# Product Requirements Document (PRD) for Chess Game Platform

## Status: Draft

## 1. Introduction
This PRD outlines the implementation of a modern chess gaming platform that will provide both single and multiplayer chess experiences. The system will evolve from a basic chess game to a full-featured online platform.

## 2. Goals
- Create an engaging chess platform
- Support multiple play modes
- Ensure fair and rules-compliant gameplay
- Build a thriving online chess community

## 3. Features and Requirements
### Functional Requirements
- Chess game rules enforcement
- Multiple game modes
- User profiles
- Match history

### Non-functional Requirements
- Response time < 100ms for moves
- 99.9% uptime
- Cross-platform compatibility
- Secure gameplay

## 4. Epic Structure

Epic-1: Basic Chess Game (Current)
- Implement core 2-player chess game in web browser
- Enforce all basic chess rules
- Provide move validation
- Support basic game saving

Epic-2: AI Opponent (Future)
- Single player vs computer
- Multiple AI difficulty levels
- AI move explanation system

Epic-3: Online Direct Play (Future)
- Direct IP-to-IP gameplay
- Real-time move synchronization
- Basic chat functionality

Epic-4: Online Matchmaking (Future)
- User accounts and profiles
- Lobby system
- Matchmaking algorithm
- Rating system

## 5. Story List

Epic-1: Basic Chess Game (Current)
Story-1: Project Setup
Story-2: Chessboard UI
Story-3: Piece Movement
Story-4: Rules Engine
Story-5: Game State Management
Story-6: Production Release

Epic-2: AI Opponent (Future)
Story-7: Basic AI Implementation
Story-8: Difficulty Levels
Story-9: AI Analytics

[Additional Epics' stories to be detailed when they become current]

## 6. Future Enhancements
- Tournament organization system
- Chess puzzle system
- Professional streaming integration
- Mobile apps
</example>

<example type="invalid">
Chess Game
- Add basic game
- Maybe add AI later
- Other features we might need
</example>
</file>

<file path=".cursor/rules/902-arch.mdc">
---
description: ENFORCE when CREATING or UPDATING architecture documentation to ensure consistent system design documentation
globs: **/*
alwaysApply: true
---
---
description: ALWAYS use when creating or updating Architecture document to ensure consistent documentation of architectural decisions. This rule enforces standardized arch format with proper context, consequences, and status tracking.
globs: **/arch*.md
---
# Architecture Template Standards

<version>1.0.0</version>

## Requirements

- Document architectural decisions clearly
- Maintain a Changelog

## Structure

### Required Sections

#### 1. Title {Architecture for {project}}

#### 2. Status
- Draft
- Approved
- Complete

#### 3. Technical Summary

#### 4. Technology Table

Table listing choices for languages, libraries, infra, etc...

- column for technology
- column for descrpition

#### 5. Arhictectural Diagrams

- Mermaid Diagrams

#### 6. Data Models, API Specs, Schemas, etc...

#### 7. Project Structure

document the folder and file organization and structure along with descriptions

#### 8. Change Log

markdown table of key changes after document is no longer in draft and is updated, table includes the change title, the story id that the change happened during, and a description if the title is not clear enough

## Examples

<example>
# Architecture for Sensor Data Processing Platform

## Status: Approved

## Technical Summary
This architecture defines a scalable, fault-tolerant platform for processing real-time sensor data from multiple sources. The system employs a microservices architecture to ensure high availability, scalability, and maintainability while supporting real-time data processing and analysis.

## Technology Table

| Technology | Description |
|------------|-------------|
| Kubernetes | Container orchestration platform for microservices deployment |
| Apache Kafka | Event streaming platform for real-time data ingestion |
| TimescaleDB | Time-series database for sensor data storage |
| Go | Primary language for data processing services |
| GoRilla Mux | REST API Framework |
| Python | Used for data analysis and ML services |
| gRPC | Inter-service communication protocol |
| Prometheus | Metrics collection and monitoring |
| Grafana | Visualization and dashboarding |

## Architectural Diagrams

```mermaid
graph TD
    A[Sensor Gateway] -->|Raw Data| B[Kafka]
    B --> C[Data Processor]
    B --> D[Alert Service]
    C --> E[(TimescaleDB)]
    C --> F[Analytics Engine]
    D --> G[Notification Service]
    F --> H[ML Predictor]
    
    style A fill:#f9f,stroke:#333
    style B fill:#bbf,stroke:#333
    style C fill:#bfb,stroke:#333
```

```mermaid
sequenceDiagram
    participant S as Sensor
    participant G as Gateway
    participant K as Kafka
    participant P as Processor
    participant DB as TimescaleDB

    S->>G: Send Data
    G->>K: Publish Event
    K->>P: Consume Event
    P->>DB: Store Processed Data
```

## Data Models

### Sensor Reading Schema
```json
{
  "sensor_id": "string",
  "timestamp": "datetime",
  "readings": {
    "temperature": "float",
    "pressure": "float",
    "humidity": "float"
  },
  "metadata": {
    "location": "string",
    "calibration_date": "datetime"
  }
}
```

## Project Structure
```
/
├── /services
│   ├── /gateway        # Sensor data ingestion
│   ├── /processor      # Data processing and validation
│   ├── /analytics      # Data analysis and ML
│   └── /notifier       # Alert and notification system
├── /deploy
│   ├── /kubernetes     # K8s manifests
│   └── /terraform      # Infrastructure as Code
└── /docs
    ├── /api           # API documentation
    └── /schemas       # Data schemas
```

## Change Log

| Change | Story ID | Description |
|--------|----------|-------------|
| Initial Architecture | N/A | Initial approved system design and documentation |
| Add ML Pipeline | story-4 | Integration of machine learning prediction service |
| Kafka Upgrade | story-6 | Upgraded from Kafka 2.0 to Kafka 3.0 for improved performance |
</example>

<example type="invalid">
# Simple Architecture

Just use a database and some APIs. Maybe add caching later if needed.

Tech stack:
- Whatever is easiest
- Probably MongoDB
- Some framework

No diagrams or proper documentation included.
</example>
</file>

<file path=".cursor/rules/903-story.mdc">
---
description: ENFORCE when CREATING or UPDATING story files to ensure proper tracking and implementation details
globs: **/*
alwaysApply: true
---
---
description: ALWAYS use when creating or updating story files to ensure proper tracking and implementation. This rule enforces consistent story structure with tasks, context, and progress tracking.
globs: **/*.story.md
---
# Story Template Standards

<version>1.0.0</version>

## Requirements

- Follow standardized story structure
- Include all required sections
- Track progress accurately
- Maintain implementation history
- Stories must be organized under Epic directories

## File Structure

Stories must be placed in their Epic's directory:
`.ai/epic-{n}/story-{m}.story.md`

## Story Structure

### Required Sections

#### 1. Header

Epic-{N}: {Epic Title}
Story-{M}: {Story Title}

#### 2. Story Description

**As a** {role}
**I want** {action}
**so that** {benefit}

#### 3. Status

- Draft
- In Progress
- Complete
- Cancelled

#### 4. Context

- Background information
- Current state
- Story justification
- Technical context
- Business drivers
- Relevant history from previous stories

#### 5. Estimation

Story Points: {Story Points (1 SP = 1 day of Human Development = 10 minutes of AI development)}

#### 6. Tasks

##### Task Groups

1. - [ ] {Major Task Group 1}
   1. - [ ] {Test Subtasks (as needed)}
   2. - [ ] {Subtask}

Note: 
- Use - [x] for completed items
- Use ~~skipped/cancelled items~~
- Follow TDD - Start with Writing Tests Subtask

### 7. Additional Sections

#### Constraints
- List any technical or business constraints

#### Data Models / Schema
- Database schemas
- API request/response models
- Interfaces/types

#### Structure
- Module organization
- File structure plan

#### Diagrams
- Mermaid diagrams as needed

#### Dev Notes
- Implementation commentary
- Important considerations
- Technical decisions

#### Chat Command Log
- Commands from User
- Agent Question and Users Response

## Examples

<example>
# Epic-1: Basic Chess Game
# Story-2: Implement Chessboard UI

## Story

**As a** chess player
**I want** to see a clear and interactive chessboard
**so that** I can play chess in the web browser

## Status

In Progress

## Context

Part of Epic-1 which implements the core 2-player chess game. This story focuses on the visual and interactive aspects of the chessboard. The project setup (Story-1) is complete, providing the foundation for UI implementation.

## Estimation

Story Points: 2

## Tasks

1. - [x] Create Chessboard Grid
   1. - [x] Implement 8x8 board layout
   2. - [x] Add square coloring
   3. - [x] Write grid tests
2. - [ ] Add Chess Pieces
   1. - [ ] Create piece components
   2. - [ ] Add piece images
   3. - [ ] Write piece tests
3. - [ ] Implement Basic Interaction
   1. - [ ] Add click handlers
   2. - [ ] Highlight selected square
   3. - [ ] Write interaction tests

## Dev Notes

- Using React for UI components
- Chess piece SVGs from open-source library
- Implementing responsive design for various screen sizes

## Chat Command Log

- BMad: Let's implement the chessboard UI
- AiAgent: Reviewing the design requirements. Should we use SVG or PNG for pieces?
  - BMad: Let's use SVG for better scaling
- AiAgent: Grid implementation complete, proceeding with piece placement
</example>

<example type="invalid">
Chess UI Story

todo:
- make board
- add pieces
- make it work
</example>
</file>

<file path="app/Models/Asset.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Asset extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        'asset_image',
        'asset_tag_id',
        'brand',
        'model',
        'specs',
        'serial_number',
        'cost',
        'supplier_id',
        'site_id',
        'location_id',
        'category_id',
        'brand_id',
        'department_id',
        'maintenance_start_date',
        'maintenance_end_date',
        'purchase_date',
        'condition_id',
        'assigned_to',
        'issued_date',
        'returned_at',
        'notes',
        'created_by',
        'deleted_by',
        'status_id'
    ];

    protected $appends = ['current_value', 'months_elapsed'];

    public function supplier()
    {
        return $this->belongsTo(Supplier::class);
    }

    public function brand()
    {
        return $this->belongsTo(Brand::class);
    }

    public function site()
    {
        return $this->belongsTo(Site::class);
    }

    public function location()
    {
        return $this->belongsTo(Location::class);
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function department()
    {
        return $this->belongsTo(Department::class);
    }

    public function condition()
    {
        return $this->belongsTo(Condition::class);
    }

    public function status()
    {
        return $this->belongsTo(Status::class);
    }

    public function editHistory()
    {
        return $this->hasMany(AssetEditHistory::class);
    }

    public function viewedAlerts()
    {
        return $this->hasMany(ViewedAlert::class);
    }

    public function updateStatusToLeased()
    {
        $leasedStatus = Status::where('status', 'Leased')->first();
        $this->status_id = $leasedStatus->id;
        $this->save();
    }

    public function updateStatusToAvailable()
    {
        $this->status_id = Status::where('status', 'Available')->first()->id;
        $this->save();
    }

    public function updateConditionToUsed()
    {
        $this->condition_id = Condition::where('condition', 'Used')->first()->id;
        $this->save();
    }

    // Optional: Method to restore a soft-deleted asset
    public function restore()
    {
        $this->deleted_at = null;
        $this->deleted_by = null;
        $this->save();
    }

    // In Asset model
    protected static function boot()
    {
        parent::boot();

        static::creating(function ($asset) {
            if (empty($asset->created_by) && auth()->check()) {
                $asset->created_by = auth()->id();
            }
        });

        static::deleting(function ($asset) {
            if (empty($asset->deleted_by) && auth()->check()) {
                $asset->deleted_by = auth()->id();
            }
        });
    }

    public function getCurrentValueAttribute()
    {
        // Get months elapsed since purchase
        $monthsElapsed = $this->getMonthsElapsedAttribute();
        
        // Total depreciation period in months (5 years = 60 months)
        $totalDepreciationPeriod = 60;
        
        // If more than 5 years have passed, value is 0
        if ($monthsElapsed >= $totalDepreciationPeriod) {
            return 0;
        }
        
        // Calculate remaining value using straight-line depreciation
        $monthlyDepreciationRate = 1 / $totalDepreciationPeriod;
        $totalDepreciationPercentage = $monthsElapsed * $monthlyDepreciationRate;
        $remainingValue = $this->cost * (1 - $totalDepreciationPercentage);
        
        return max(0, $remainingValue);
    }

    public function getMonthsElapsedAttribute()
    {
        $purchaseDate = \Carbon\Carbon::parse($this->purchase_date);
        $now = \Carbon\Carbon::now();
        return $purchaseDate->diffInMonths($now);
    }
}
</file>

<file path="app/Providers/AppServiceProvider.php">
<?php

namespace App\Providers;

use App\Models\Asset;
use App\Models\ViewedAlert;
use App\Models\User;
use Illuminate\Support\ServiceProvider;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\Auth;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Paginator::useTailwind();

        view()->composer('*', function ($view) {
            if (Auth::check()) {
                $user = User::where('username', Auth::user()->username)->first();
                if ($user) {
                    $totalPastDueAssets = Asset::whereHas('condition', function ($query) {
                        $query->where('condition', 'Maintenance');
                    })
                    ->whereDate('maintenance_end_date', '<', now())
                    ->whereDoesntHave('viewedAlerts', function ($query) use ($user) {
                        $query->where('user_id', $user->id);
                    })
                    ->get();
                    $view->with('totalPastDueAssets', $totalPastDueAssets);
                }
            }
        });

        view()->composer('*', function ($view) {
            $user = auth()->user();
            if ($user) {
                $pastDueCount = \App\Models\Asset::whereHas('condition', function ($query) {
                    $query->where('condition', 'Maintenance');
                })
                ->whereDate('maintenance_end_date', '<', now())
                ->count();

                $pendingRequestsCount = \App\Models\SupplyRequest::where('status', 'pending')
                    ->distinct('request_group_id')
                    ->count('request_group_id');

                // Only show pending requests that haven't been viewed
                if ($user) {
                    if ($user->last_checked_alerts) {
                        $pendingRequestsCount = \App\Models\SupplyRequest::where('status', 'pending')
                            ->where('created_at', '>', $user->last_checked_alerts)
                            ->distinct('request_group_id')
                            ->count('request_group_id');
                    }
                }

                // Count expiring leases that haven't been viewed
                $expiringLeasesCount = \App\Models\Lease::where('lease_expiration', '>', now())
                    ->where('lease_expiration', '<=', now()->addDays(7))
                    ->when($user->last_checked_alerts, function ($query) use ($user) {
                        return $query->where(function ($q) use ($user) {
                            $q->where('updated_at', '>', $user->last_checked_alerts)
                                ->orWhere('created_at', '>', $user->last_checked_alerts);
                        });
                    })
                    ->count();

                $totalAlerts = $pastDueCount + $pendingRequestsCount + $expiringLeasesCount;

                $view->with('totalAlerts', $totalAlerts);
                $view->with('pendingRequestsCount', $pendingRequestsCount);
                $view->with('pastDueCount', $pastDueCount);
                $view->with('expiringLeasesCount', $expiringLeasesCount);
            }
        });

        view()->composer('*', function ($view) {
            $user = auth()->user();
            if ($user && $user->role->role === 'Department') {
                \Log::info('User notifications check', [
                    'user_id' => $user->id,
                    'department_id' => $user->department_id,
                    'last_checked' => $user->last_checked_notifications,
                    'role' => $user->role->role
                ]);

                $query = \App\Models\SupplyRequest::where('department_id', $user->department_id)
                    ->whereIn('status', ['approved', 'rejected', 'partially_approved'])
                    ->when($user->last_checked_notifications, function ($query) use ($user) {
                        return $query->where(function ($q) use ($user) {
                            $q->where('updated_at', '>', $user->last_checked_notifications)
                              ->orWhere('created_at', '>', $user->last_checked_notifications);
                        });
                    });

                \Log::info('Query debug', [
                    'sql' => $query->toSql(),
                    'bindings' => $query->getBindings(),
                    'count' => $query->count()
                ]);

                $unreadNotificationsCount = $query->distinct('request_group_id')->count('request_group_id');

                $view->with('unreadNotificationsCount', $unreadNotificationsCount);
            }
        });
    }
}
</file>

<file path="prompt.txt">
Always run the command:

READ AND ALWAYS follow EVERY rule inside: .cursor\rules in the main directory before doing anything else! I can see what rule you read so you better read EVERY rules. I repeat, I can clearly see what rules you are reading AND skipping!
</file>

<file path="resources/views/fcu-ams/activities/index.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ 
    sidebarOpen: window.innerWidth >= 768,
    isMobile: window.innerWidth < 768,
    init() {
        window.addEventListener('resize', () => {
            this.isMobile = window.innerWidth < 768;
            if (!this.isMobile) {
                this.sidebarOpen = true;
            }
        });
    }
}" class="relative grid grid-cols-1 md:grid-cols-6">
    <!-- Mobile Sidebar Overlay -->
    <div x-show="sidebarOpen && isMobile" 
         class="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-300"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         @click="sidebarOpen = false">
    </div>

    <!-- Sidebar -->
    <div x-show="sidebarOpen" 
         class="fixed md:relative w-64 md:w-auto inset-y-0 left-0 z-50 md:z-0 transform transition-transform duration-300 ease-in-out"
         :class="{'translate-x-0': sidebarOpen, '-translate-x-full': !sidebarOpen}"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="-translate-x-full"
         x-transition:enter-end="translate-x-0"
         x-transition:leave="transition ease-in duration-300"
         x-transition:leave-start="translate-x-0"
         x-transition:leave-end="-translate-x-full">
        
        <!-- Mobile Close Button -->
        <button @click="sidebarOpen = false" 
                class="md:hidden absolute top-4 right-4 p-2 rounded-full hover:bg-gray-200 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>

        @include('layouts.sidebar')
    </div>

    <div :class="{ 'md:col-span-5': sidebarOpen, 'md:col-span-6': !sidebarOpen }" 
         class="bg-slate-200 content min-h-screen w-full transition-all duration-300">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Activity Logs</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd"
                                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <div class="p-4">
            <!-- Filters -->
            <div class="bg-white p-6 rounded-lg shadow mb-6">
                <div class="mb-4">
                    <h2 class="text-lg font-semibold text-gray-800 mb-2">Filter Activities</h2>
                    <p class="text-sm text-gray-600">Use the filters below to find specific activities</p>
                </div>
                <form action="{{ route('activities.index') }}" method="GET" class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div class="space-y-2">
                            <label for="query" class="block text-sm font-medium text-gray-700">Search</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <input type="text" name="query" id="query" value="{{ request('query') }}"
                                    class="pl-10 py-2 w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
                                    placeholder="Search by name...">
                            </div>
                        </div>
                        <div class="space-y-2">
                            <label for="type" class="block text-sm font-medium text-gray-700">Type</label>
                            <div class="relative">
                                <select name="type" id="type"
                                    class="appearance-none w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50 pl-3 pr-10 py-2">
                                    <option value="">All Types</option>
                                    <option value="Asset" {{ request('type') == 'Asset' ? 'selected' : '' }} class="py-2">
                                        🔷 Asset
                                    </option>
                                    <option value="Inventory" {{ request('type') == 'Inventory' ? 'selected' : '' }} class="py-2">
                                        🟩 Inventory
                                    </option>
                                </select>
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="space-y-2">
                            <label for="action" class="block text-sm font-medium text-gray-700">Action</label>
                            <div class="relative">
                                <select name="action" id="action"
                                    class="appearance-none w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50 pl-3 pr-10 py-2">
                                    <option value="">All Actions</option>
                                    <option value="added" {{ request('action') == 'added' ? 'selected' : '' }} class="py-2">
                                        ✅ Added
                                    </option>
                                    <option value="removed" {{ request('action') == 'removed' ? 'selected' : '' }} class="py-2">
                                        ❌ Removed
                                    </option>
                                    <option value="edited" {{ request('action') == 'edited' ? 'selected' : '' }} class="py-2">
                                        📝 Edited
                                    </option>
                                </select>
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    
                    <div class="md:col-span-4 flex justify-end space-x-3 pt-4 border-t">
                        <a href="{{ route('activities.index') }}"
                            class="inline-flex items-center px-4 py-2 border-2 border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                            </svg>
                            Reset Filters
                        </a>
                        <button type="submit"
                            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg xmlns="http://www.w3.org/2000/svg" class="-ml-1 mr-2 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clip-rule="evenodd" />
                            </svg>
                            Apply Filters
                        </button>
                    </div>
                </form>
            </div>

            <!-- Activity List -->
            <div class="bg-white rounded-lg shadow overflow-hidden">
                <div class="divide-y divide-gray-200">
                    @forelse($recentActions as $action)
                        <a href="{{ $action['type'] === 'Asset' ? route('asset.view', $action['id']) : route('inventory.view', $action['id']) }}" 
                           class="block hover:bg-gray-50 transition-colors duration-150">
                            <div class="p-4">
                                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-2 sm:space-y-0">
                                    <div class="flex items-center space-x-4">
                                        @if($action['type'] === 'Asset')
                                            @if($action['action'] === 'added')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                </svg>
                                            @elseif($action['action'] === 'removed')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                </svg>
                                            @else
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                </svg>
                                            @endif
                                        @else
                                            @if($action['action'] === 'added')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zm10 0h2a2 2 0 002-2V6a2 2 0 00-2-2h-2a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z" />
                                                </svg>
                                            @elseif($action['action'] === 'removed')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                            @else
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                                                </svg>
                                            @endif
                                        @endif
                                        
                                        <div>
                                            <p class="text-sm font-medium text-gray-900">
                                                <span class="font-semibold">{{ $action['name'] }}</span> 
                                                <span class="text-gray-600">was {{ $action['action'] }} by</span> 
                                                <span class="font-semibold text-gray-800">{{ $action['user'] }}</span>
                                            </p>
                                            <p class="text-sm text-gray-500">{{ $action['date'] }}</p>
                                        </div>
                                    </div>
                                    
                                    <div class="flex items-center space-x-3">
                                        <span class="text-xs font-medium px-5 py-2 rounded-full 
                                            @if($action['type'] === 'Asset') bg-blue-100 text-blue-800
                                            @else bg-green-100 text-green-800
                                            @endif">
                                            {{ $action['type'] }}
                                        </span>
                                        
                                        <button type="button" 
                                            class="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center"
                                            onclick="event.stopPropagation();">
                                            
                                            View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </a>
                    @empty
                        <div class="p-4 text-center text-gray-500">
                            No activities found
                        </div>
                    @endforelse
                </div>
            </div>

            <!-- Pagination -->
            <div class="mt-4">
                {{ $recentActions->links() }}
            </div>
        </div>
    </div>
</div>

@push('scripts')
<script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
<script>
    $(document).ready(function() {
        $('#date_range').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear'
            }
        });

        $('#date_range').on('apply.daterangepicker', function(ev, picker) {
            $(this).val(picker.startDate.format('YYYY-MM-DD') + ' - ' + picker.endDate.format('YYYY-MM-DD'));
        });

        $('#date_range').on('cancel.daterangepicker', function(ev, picker) {
            $(this).val('');
        });
    });
</script>
@endpush
@endsection
</file>

<file path="resources/views/fcu-ams/lease/lease.blade.php">
@extends('layouts.layout')

@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
            <h1 class="my-auto text-3xl">Lease Management</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Action Buttons and Pagination -->
        <div class="flex justify-between items-center mx-4 mb-4">
            <div class="flex gap-3">
                <a href="{{ route('lease.create') }}"
                    class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-500 transition-all duration-200 shadow-sm hover:shadow-md">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                    </svg>
                    Lease Asset
                </a>
            </div>
        </div>

        <div class="m-3">
            @include('layouts.messageWithoutTimerForError')
        </div>

        <!-- Main Content -->
        @if($leases->isEmpty())
        <div class="bg-white p-8 shadow-sm rounded-lg mx-3 border border-gray-100">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Leased Items</h2>
            <div class="flex flex-col items-center justify-center py-12">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
                </svg>
                <p class="text-xl text-gray-500">No leased assets found</p>
            </div>
        </div>
        @else
        <div class="bg-white p-6 shadow-sm rounded-lg mx-4 border border-gray-100">
            <div class="flex justify-between items-center mb-6">
                <div>
                    <h2 class="text-2xl font-bold text-gray-800">Leased Items</h2>
                    <p class="text-sm text-gray-500 mt-1">Overview of currently leased assets</p>
                </div>
            </div>

            <!-- Table -->
            <div class="overflow-x-auto rounded-lg border-2 border-slate-200 shadow-sm">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                            <th scope="col" class="px-6 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">
                                <div class="flex items-center space-x-1">
                                    <span>Customer</span>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">
                                <div class="flex items-center space-x-1">
                                    <span>Lease Date</span>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">
                                <div class="flex items-center space-x-1">
                                    <span>Lease Expiration</span>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">
                                <div class="flex items-center space-x-1">
                                    <span>Assets Count</span>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-4 text-left text-xs font-semibold text-white uppercase tracking-wider">
                                <div class="flex items-center space-x-1">
                                    <span>Actions</span>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach($leases as $lease)
                            <tr class="hover:bg-gray-50 transition-all duration-200">
                                <td class="px-6 py-4">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-8 w-8 bg-gray-100 rounded-full flex items-center justify-center">
                                            <span class="text-sm font-medium text-gray-600">
                                                {{ strtoupper(substr($lease->customer, 0, 1)) }}
                                            </span>
                                        </div>
                                        <div class="ml-3">
                                            <p class="text-sm font-medium text-gray-900">{{ $lease->customer }}</p>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex items-center">
                                        <span class="text-sm text-gray-900">{{ \Carbon\Carbon::parse($lease->lease_date)->format('M d, Y') }}</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex items-center">
                                        @php
                                        $expirationDate = \Carbon\Carbon::parse($lease->lease_expiration);
                                        $daysUntilExpiration = now()->diffInDays($expirationDate, false);
                                        @endphp
                                        <span class="mr-2 text-sm text-gray-900">{{ $expirationDate->format('M d, Y') }}</span>
                                        
                                        @if($daysUntilExpiration < 0)
                                            <span class="inline-flex  items-center px-4 py-2 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                Expired
                                            </span>
                                        @elseif($daysUntilExpiration <= 7)
                                            <span class="inline-flex  items-center px-4 py-2 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                                Expires in {{ $daysUntilExpiration }} days
                                            </span>
                                        @else
                                            <span class="inline-flex  items-center px-4 py-2 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                Active
                                            </span>
                                        @endif
                                    </div>
                                </td>
                                <td class="px-6 py-4">
                                    <span class="inline-flex items-center px-4 py-2 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                        {{ $lease->assets->count() }} {{ Str::plural('asset', $lease->assets->count()) }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 text-left">
                                    <a href="{{ route('lease.show', $lease->id) }}" class="text-green-600 hover:text-green-900 font-medium text-sm">
                                        View Details
                                        <span class="sr-only">, {{ $lease->customer }}</span>
                                    </a>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
            <!-- Pagination -->
            <div class="mt-4 flex items-center justify-between px-4 mb-3">
                <div class="flex items-center gap-2">
                    <a href="{{ $leases->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
                        </svg>
                    </a>
                    <a href="{{ $leases->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
                        </svg>
                    </a>
                </div>

                <div class="text-sm text-gray-700">
                    Showing {{ $leases->firstItem() ?? 0 }} to {{ $leases->lastItem() ?? 0 }} of {{ $leases->total() }} items
                </div>

                <div class="flex items-center gap-2">
                    <a href="{{ $leases->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
                        </svg>
                    </a>
                    <a href="{{ $leases->url($leases->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                        </svg>
                    </a>
                </div>
            </div>
        </div>
        @endif
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/lease/leaseForm.blade.php">
@extends('layouts.layout')

@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Lease Form</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="invisible flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="bg-white p-5 shadow-md m-3 rounded-md">
            <form action="{{ route('lease.store') }}" method="POST">
                @csrf
                <div class="mb-4">
                    <label for="lease_date" class="block text-gray-700 font-bold mb-2">Lease Date:</label>
                    <input type="date" id="lease_date" name="lease_date" class="w-full p-2 border rounded-md" required>
                </div>
                <div class="mb-4">
                    <label for="lease_expiration" class="block text-gray-700 font-bold mb-2">Lease Expiration:</label>
                    <input type="date" id="lease_expiration" name="lease_expiration"
                        class="w-full p-2 border rounded-md" required>
                </div>
                <div class="mb-4">
                    <label for="customer" class="block text-gray-700 text-sm font-bold mb-2">Customer Name</label>
                    <input type="text" name="customer" id="customer" value="{{ old('customer') }}" required
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('customer') border-red-500 @enderror">
                    @error('customer')
                        <p class="text-red-500 text-xs italic">{{ $message }}</p>
                    @enderror
                </div>

                <div class="mb-4">
                    <label for="contact_number" class="block text-gray-700 text-sm font-bold mb-2">Contact Number</label>
                    <input type="text" name="contact_number" id="contact_number" value="{{ old('contact_number') }}" required
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('contact_number') border-red-500 @enderror">
                    @error('contact_number')
                        <p class="text-red-500 text-xs italic">{{ $message }}</p>
                    @enderror
                </div>

                <div class="mb-4">
                    <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email Address</label>
                    <input type="email" name="email" id="email" value="{{ old('email') }}" required
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline @error('email') border-red-500 @enderror">
                    @error('email')
                        <p class="text-red-500 text-xs italic">{{ $message }}</p>
                    @enderror
                </div>
                <div class="mb-4">
                    <label for="note" class="block text-gray-700 font-bold mb-2">Note:</label>
                    <textarea id="note" name="note" class="w-full p-2 border rounded-md"></textarea>
                </div>
                @foreach($assets as $asset)
                    <input type="hidden" name="selected_assets[]" value="{{ $asset->id }}">
                @endforeach
                <button type="submit"
                    class="ml-auto rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M16.5 3.75V16.5L12 14.25 7.5 16.5V3.75m9 0H18A2.25 2.25 0 0 1 20.25 6v12A2.25 2.25 0 0 1 18 20.25H6A2.25 2.25 0 0 1 3.75 18V6A2.25 2.25 0 0 1 6 3.75h1.5m9 0h-9" />
                    </svg>
                    Submit
                </button>
            </form>
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md max-h-96 overflow-auto">
            <table class="w-full border-collapse rounded-lg overflow-hidden shadow-md">
                <thead>
                    <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                        <th class="px-4 py-3 text-left font-semibold tracking-wider uppercase text-sm">Asset Tag ID</th>
                        <th class="px-4 py-3 text-left font-semibold tracking-wider uppercase text-sm">Specs</th>
                        <th class="px-4 py-3 text-left font-semibold tracking-wider uppercase text-sm">Model</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    @foreach($assets as $asset)
                        <tr class="transition-all duration-200 hover:bg-blue-50">
                            <td class="px-4 py-3 text-gray-700">{{ $asset->asset_tag_id }}</td>
                            <td class="px-4 py-3 text-gray-700">{{ $asset->specs }}</td>
                            <td class="px-4 py-3 text-gray-700">{{ $asset->model }}</td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
            @if($assets->isEmpty())
                <div class="text-center py-4 text-gray-500">
                    No assets available
                </div>
            @endif
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/profile/profile.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="content min-h-screen bg-slate-200">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Profile</h1>
            <div class="flex items-center space-x-4">
                <span class="text-sm text-gray-500">Member since {{ $user->created_at->format('F j, Y') }}</span>
            </div>
        </nav>

        <div class="m-3 2xl:max-w-7xl 2xl:mx-auto">
            <div class="mb-4">
                @include('layouts.messageWithoutTimerForError')
            </div>

            <!-- Profile Content -->
            <div class="space-y-6">
                <!-- Personal Information Card -->
                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <form method="POST" action="{{ route('profile.updatePersonalInformation') }}" enctype="multipart/form-data">
                        @csrf
                        <!-- Profile Header -->
                        <div class="p-6 bg-gradient-to-r from-blue-500 to-blue-600">
                            <div class="flex items-center">
                                <div class="relative group">
                                    <div class="relative w-32 h-32 rounded-full overflow-hidden border-4 border-white shadow-lg cursor-pointer hover:opacity-90 transition-all duration-300"
                                        onclick="document.getElementById('profile-picture-input').click();">
                                        @if(auth()->user()->profile_picture)
                                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                                class="w-full h-full object-cover">
                                        @else
                                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                                class="w-full h-full object-cover">
                                        @endif
                                        <input type="file" id="profile-picture-input" name="profile_picture" accept="image/*"
                                            class="hidden" onchange="this.form.submit();">
                                        
                                        <!-- Camera Icon Overlay -->
                                        <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                                stroke="currentColor" class="w-8 h-8 text-white">
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="M6.827 6.175A2.31 2.31 0 0 1 5.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 0 0-1.134-.175 2.31 2.31 0 0 1-1.64-1.055l-.822-1.316a2.192 2.192 0 0 0-1.736-1.039 48.774 48.774 0 0 0-5.232 0 2.192 2.192 0 0 0-1.736 1.039l-.821 1.316Z" />
                                                <path stroke-linecap="round" stroke-linejoin="round"
                                                    d="M16.5 12.75a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0ZM18.75 10.5h.008v.008h-.008V10.5Z" />
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                                <div class="ml-6">
                                    <h2 class="text-2xl font-bold text-white">
                                        {{ $user->first_name . ' ' . $user->middle_name . ' ' . $user->last_name }}
                                    </h2>
                                    <p class="text-blue-100 mt-1">{{ $user->email }}</p>
                                    <div class="flex items-center mt-2">
                                        <span class="px-3 py-1 bg-blue-700 text-white text-sm rounded-full">
                                            {{ $user->role->role }}
                                        </span>
                                        <span class="mx-2 text-blue-100">•</span>
                                        <span class="text-blue-100">{{ $user->department->department }}</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Profile Information -->
                        <div class="p-8">
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                <!-- Personal Information -->
                                <div class="space-y-6">
                                    <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Personal Information
                                    </h3>
                                    <div class="space-y-4">
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-blue-400 transition-colors duration-300">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                            <input type="text" name="full_name"
                                                value="{{ $user->first_name . ' ' . $user->middle_name . ' ' . $user->last_name }}"
                                                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300" />
                                        </div>
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-blue-400 transition-colors duration-300">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                            <input type="email" name="email" value="{{ $user->email }}"
                                                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300" />
                                        </div>
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-blue-400 transition-colors duration-300">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Contact Number</label>
                                            <input type="text" name="contact_number" value="{{ $user->contact_number }}"
                                                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300" />
                                        </div>
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-blue-400 transition-colors duration-300">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Address</label>
                                            <input type="text" name="address" value="{{ $user->address }}"
                                                class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300" />
                                        </div>
                                    </div>
                                </div>

                                <!-- Account Information -->
                                <div class="space-y-6">
                                    <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                        </svg>
                                        Account Information
                                    </h3>
                                    <div class="space-y-4">
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Department</label>
                                            <p class="text-gray-800 py-2 font-semibold">{{ $user->department->department }}</p>
                                        </div>
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                                            <p class="text-gray-800 py-2 font-semibold">{{ $user->username }}</p>
                                        </div>
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                                            <p class="text-gray-800 py-2 font-semibold">{{ $user->role->role }}</p>
                                        </div>
                                        <div class="bg-gray-50 p-4 rounded-xl border border-gray-200">
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Member Since</label>
                                            <p class="text-gray-800 py-2 font-semibold">{{ $user->created_at->format('F j, Y') }}</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Save Button -->
                            <div class="mt-8 flex justify-end">
                                <button type="submit" 
                                    class="px-6 py-3 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-500 
                                    transition-all duration-300 transform hover:scale-105 flex items-center gap-2 font-medium">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                                    </svg>
                                    Save Changes
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

                <!-- Change Password Card -->
                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="p-6 bg-gradient-to-r from-purple-500 to-purple-600">
                        <h3 class="text-xl font-bold text-white flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                            Change Password
                        </h3>
                    </div>
                    <div class="p-8">
                        <form method="POST" action="{{ route('profile.update') }}" class="space-y-6">
                            @csrf
                            <div class="space-y-4">
                                <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-purple-400 transition-colors duration-300">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Current Password</label>
                                    <input type="password" name="current_password" 
                                        class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300" required>
                                </div>
                                <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-purple-400 transition-colors duration-300">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                                    <input type="password" name="new_password" 
                                        class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300" required>
                                </div>
                                <div class="bg-gray-50 p-4 rounded-xl border border-gray-200 hover:border-purple-400 transition-colors duration-300">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                                    <input type="password" name="confirm_new_password"
                                        class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300" required>
                                </div>
                            </div>
                            <div class="mt-6 flex justify-end">
                                <button type="submit" 
                                    class="px-6 py-3 bg-purple-600 text-white rounded-lg shadow-md hover:bg-purple-500 
                                    transition-all duration-300 transform hover:scale-105 flex items-center gap-2 font-medium">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                                    </svg>
                                    Update Password
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@endsection
</file>

<file path="resources/views/fcu-ams/users/usersList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/addAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
     
            <h1 class="my-auto text-3xl">Users</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="flex">
                <button onclick="document.getElementById('add-user-modal').classList.toggle('hidden')"
                    class="flex gap-1 mr-3 rounded-md shadow-md px-5 py-2 bg-green-600 hover:shadow-md hover:bg-green-500 transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    Add User
                </button>
                @include('layouts.modals.user.addNewUser')
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $users->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $users->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $users->firstItem() }} to {{ $users->lastItem() }} of
                    {{ $users->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $users->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $users->url($users->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md overflow-auto">
            <div class="flex justify-between mb-3">
                <h2 class="text-2xl font-bold my-auto">Users List</h2>
            </div>
            <div class="overflow-x-auto overflow-y-auto rounded-lg border-2 border-gray-200">
                <table class="w-full border-collapse rounded-lg overflow-hidden shadow-md ">
                    <thead class="bg-gradient-to-r from-blue-400 to-blue-500">
                        <tr>
                            <th
                                class="px-4 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider border-b-2 border-gray-300">
                                Name
                            </th>
                            <th
                                class="px-4 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider border-b-2 border-gray-300">
                                Role
                            </th>
                            <th
                                class="px-4 py-3 text-center text-xs font-semibold text-white uppercase tracking-wider border-b-2 border-gray-300">
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach($users as $user)
                            <tr class="transition-all duration-200 hover:bg-blue-50 hover:shadow-sm">
                                <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-800">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10 mr-3">
                                            <img class="h-10 w-10 rounded-full object-cover"
                                                src="{{ $user->profile_picture ? asset($user->profile_picture) : asset('profile/defaultProfile.png') }}"
                                                alt="{{ $user->first_name }} {{ $user->last_name }}">
                                        </div>
                                        <div>
                                            <div class="text-sm font-medium text-gray-900">
                                                {{ $user->first_name . ' ' . $user->last_name }}
                                            </div>
                                            <div class="text-sm text-gray-500">
                                                {{ $user->department->department }}
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-3 whitespace-nowrap">
                                    <span
                                        class="border-2 inline-flex text-xs leading-5 font-semibold rounded-full px-5 py-2
                        {{ $user->role->role === 'Administrator' ? 'bg-green-100 text-green-800' : 
                           ($user->role->role === 'Manager' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800') }}">
                                        {{ $user->role->role }}
                                    </span>
                                </td>
                                <td class="px-4 py-3 whitespace-nowrap text-center">
                                    <div class="flex justify-center space-x-3">
                                        <!-- View Button -->
                                        <button type="button"
                                            class="text-green-500 hover:text-green-700 transition-colors duration-200"
                                            onclick="document.getElementById('view-user-modal{{ $user->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20"
                                                fill="currentColor">
                                                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                                                <path fill-rule="evenodd"
                                                    d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                        </button>

                                        <!-- Edit Button -->
                                        <button type="button"
                                            class="text-blue-500 hover:text-blue-700 transition-colors duration-200"
                                            onclick="document.getElementById('edit-user-modal{{ $user->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20"
                                                fill="currentColor">
                                                <path
                                                    d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                                <path fill-rule="evenodd"
                                                    d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                        </button>

                                        <!-- Delete Button -->
                                        <button type="button"
                                            class="text-red-500 hover:text-red-700 transition-colors duration-200"
                                            onclick="document.getElementById('delete-user-modal{{ $user->id }}').classList.toggle('hidden')">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20"
                                                fill="currentColor">
                                                <path fill-rule="evenodd"
                                                    d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                                                    clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@include('layouts.modals.user.viewUser')
@include('layouts.modals.user.editUser')
@include('layouts.modals.user.deleteUser')
@endsection
</file>

<file path="resources/views/reports/monthly-assets-pdf.blade.php">
<!DOCTYPE html>
<html>
<head>
    <style>
        *,
        *::before,
        *::after {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html {
            line-height: 1.15;
            -webkit-text-size-adjust: 100%;
        }

        body {
            color: #333;
            line-height: 1.6;
            padding: 2rem;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        .header {
            width: 100%;
            margin-bottom: 30px;
            position: relative;
            min-height: 100px;
            text-align: center;
        }
        .header-content {
            display: inline-block;
            width: 70%;
            padding-top: 20px;
        }
        .report-title {
            font-size: 16pt;
            font-weight: bold;
            margin-bottom: 15px;
        }
        .report-info {
            font-size: 12pt;
            line-height: 1.5;
        }
        .report-info p {
            margin: 5px 0;
        }
        .logo {
            position: absolute;
            top: 6;
            right: 0;
            width: 100px;
            height: auto;
        }

        img {
            max-width: 100%;
            height: auto;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        ul,
        ol {
            list-style: none;
        }

        .monthly-assets-report {
            background-color: white;
            max-width: 900px;
            margin: 0 auto;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .text-center {
            margin-bottom: 2rem;
            border-bottom: 2px solid #3498db;
            padding-bottom: 1rem;
            text-align: center;
        }

        h2 {
            color: #2c3e50;
            letter-spacing: 1px;
            font-size: 12pt;
            font-weight: bold;
        }

        h3,
        h4 {
            color: #7f8c8d;
            font-size: 12pt;
        }

        table {
            width: 100%;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
            border-collapse: collapse;
        }

        thead {
            background-color: #3498db;
            color: white;
        }

        th {
            padding: 0.75rem;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            text-align: left;
            border: 1px solid #2980b9;
        }

        tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        tbody tr:hover {
            background-color: #e9ecef;
            transition: background-color 0.3s ease;
        }

        td {
            padding: 0.75rem;
            border: 1px solid #e9ecef;
        }

        .total-value {
            background-color: #f1f8ff;
            padding: 1rem;
            border-radius: 4px;
            text-align: right;
            font-size: 12pt;
            color: #2980b9;
            margin-top: 1rem;
            font-weight: bold;
        }

        .signature {
            margin-top: 2rem;
            text-align: left;
            border-top: 1px solid #e9ecef;
            padding-top: 1rem;
        }

        .signature h4 {
            color: #2c3e50;
            margin-bottom: 0.25rem;
            font-weight: bold;
        }

        .signature p {
            font-style: italic;
            color: #7f8c8d;
        }
        
        /* Adjust table to accommodate more columns */
        table {
            font-size: 0.9rem;
        }
        
        /* Add some responsive adjustments */
        @media print {
            .monthly-assets-report {
                max-width: 100%;
                padding: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="monthly-assets-report">
        <div class="header">
            <div class="header-content">
                <div class="report-title">FILAMER CHRISTIAN UNIVERSITY, INC</div>
                <div class="report-info">
                    <p>Roxas Avenue, Roxas City</p>
                    <p>Monthly Assets Report</p>
                    <h4>{{ $startDate }} to {{ $endDate }}</h4>
                </div>
            </div>
            <img src="{{ public_path('img/login/fcu-icon.png') }}" alt="FCU Icon" class="logo">
        </div>

        <table>
            <thead>
                <tr>
                    <th>Asset Tag ID</th>
                    <th>Brand & Model</th>
                    <th>Serial Number</th>
                    <th>Cost</th>
                    <th>Purchase Date</th>
                    <th>Department</th>
                </tr>
            </thead>
            <tbody>
                @foreach($assets as $asset)
                    <tr>
                        <td>{{ $asset->asset_tag_id }}</td>
                        <td>
                            <strong>{{ $asset->brand->brand }}</strong><br>
                            {{ $asset->model }}
                        </td>
                        <td>{{ $asset->serial_number }}</td>
                        <td>{{ number_format($asset->cost, 2) }}</td>
                        <td>{{ $asset->purchase_date ? \Carbon\Carbon::parse($asset->purchase_date)->format('Y-m-d') : 'N/A' }}</td>
                        <td>{{ $asset->department->department ?? 'Unassigned' }}</td>
                    </tr>
                @endforeach
            </tbody>
        </table>

        <div class="total-value">
            Total Asset Value: {{ number_format($totalValue, 2) }}
        </div>

        <div class="signature">
            <h4>SHERALYN A. DE LEON</h4>
            <p>Acting - Property Custodian</p>
        </div>
    </div>
</body>
</html>
</file>

<file path="resources/views/reports/monthly-supplier-pdf.blade.php">
<!DOCTYPE html>
<html>

<head>
    <style>
        *,
        *::before,
        *::after {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html {
            line-height: 1.15;
            -webkit-text-size-adjust: 100%;
        }

        body {
            /* background-color: #f4f6f9; */
            color: #333;
            line-height: 1.6;
            padding: 2rem;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        .header {
            width: 100%;
            margin-bottom: 30px;
            position: relative;
            min-height: 100px;
            text-align: center;
        }
        .header-content {
            display: inline-block;
            width: 70%;
            padding-top: 20px;
        }
        .report-title {
            font-size: 16pt;
            font-weight: bold;
            margin-bottom: 15px;
        }
        .report-info {
            font-size: 12pt;
            line-height: 1.5;
        }
        .report-info p {
            margin: 5px 0;
        }
        .logo {
            position: absolute;
            top: 6;
            right: 0;
            width: 100px;
            height: auto;
        }

        h1 {
            fontsize: 12pt;
        }

        img {
            max-width: 100%;
            height: auto;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        ul,
        ol {
            list-style: none;
        }

        .monthly-supplier-report {
            background-color: white;
            max-width: 900px;
            margin: 0 auto;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        /* Header Styling */
        .text-center {
            margin-bottom: 2rem;
            border-bottom: 2px solid #3498db;
            padding-bottom: 1rem;
            text-align: center;
        }

        h2 {
            color: #2c3e50;
            letter-spacing: 1px;
            font-size: 12pt;
            font-weight: bold;
        }

        h3,
        h4 {
            color: #7f8c8d;
            font-size: 16px;
        }

        /* Table Styling */
        table {
            width: 100%;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
            border-collapse: collapse;
        }

        thead {
            background-color: #3498db;
            color: white;
        }

        th {
            padding: 0.75rem;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            text-align: left;
            border: 1px solid #2980b9;
        }

        tbody tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        tbody tr:hover {
            background-color: #e9ecef;
            transition: background-color 0.3s ease;
        }

        td {
            padding: 0.75rem;
            border: 1px solid #e9ecef;
        }

        /* Total Value Styling */
        .total-value {
            background-color: #f1f8ff;
            padding: 1rem;
            border-radius: 4px;
            text-align: right;
            font-size: 12pt;
            color: #2980b9;
            margin-top: 1rem;
            font-weight: bold;
        }

        /* Signature Styling */
        .signature {
            margin-top: 2rem;
            text-align: left;
            border-top: 1px solid #e9ecef;
            padding-top: 1rem;
        }

        .signature h4 {
            color: #2c3e50;
            margin-bottom: 0.25rem;
            font-weight: bold;
        }

        .signature p {
            font-style: italic;
            color: #7f8c8d;
        }
    </style>
</head>

<body>
    <div class="monthly-supplier-report">
        <div class="header">
            <div class="header-content">
                <div class="report-title">FILAMER CHRISTIAN UNIVERSITY, INC</div>
                <div class="report-info">
                    <p>Roxas Avenue, Roxas City</p>
                    <p>OFFICE SUPPLIES INVENTORY</p>
                    <p>{{ $startDate }} to {{ $endDate }}</p>
                </div>
            </div>
            <img src="{{ public_path('img/login/fcu-icon.png') }}" alt="FCU Icon" class="logo">
        </div>

        <table>
            <thead>
                <tr>
                    <th>Unique Tag</th>
                    <th>Items & Specs</th>
                    <th>Brand</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach($inventories as $inventory)
                    <tr>
                        <td>{{ $inventory->unique_tag }}</td>
                        <td>{{ $inventory->items_specs }}</td>
                        <td>{{ $inventory->brand->brand }}</td>
                        <td>{{ $inventory->quantity }}</td>
                        <td>{{ number_format($inventory->unit_price, 2) }}</td>
                        <td>{{ number_format($inventory->quantity * $inventory->unit_price, 2) }}</td>
                    </tr>
                @endforeach
            </tbody>
        </table>

        <div class="total-value">
            Total Value: {{ number_format($totalValue, 2) }}
        </div>

        <div class="signature">
            <h4>SHERALYN A. DE LEON</h4>
            <p>Acting - Property Custodian</p>
        </div>
    </div>
</body>

</html>
</file>

<file path="database/migrations/2024_12_15_031113_create_supply_requests_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('supply_requests', function (Blueprint $table) {
            $table->id();
            $table->uuid('request_id');
            $table->uuid('request_group_id');
            $table->unsignedBigInteger('department_id');
            $table->unsignedBigInteger('inventory_id')->nullable();
            $table->string('requester');
            $table->integer('quantity');
            $table->timestamp('request_date');
            $table->string('item_name');
            $table->decimal('estimated_unit_price', 10, 2)->nullable();
            $table->unsignedBigInteger('brand_id')->nullable();
            $table->unsignedBigInteger('unit_id')->nullable();
            $table->unsignedBigInteger('supplier_id')->nullable();
            $table->text('notes')->nullable();
            $table->enum('status', ['pending', 'approved', 'rejected', 'partially_approved', 'cancelled'])->default('pending');
            $table->boolean('is_approved')->default(false);
            $table->timestamps();
            $table->foreign('department_id')->references('id')->on('departments');
            $table->foreign('inventory_id')->references('id')->on('inventories')->onDelete('set null');
            $table->foreign('brand_id')->references('id')->on('brands')->onDelete('set null');
            $table->foreign('unit_id')->references('id')->on('units')->onDelete('set null');
            $table->foreign('supplier_id')->references('id')->on('suppliers')->onDelete('set null');
            $table->softDeletes();
        });
    }

    public function down()
    {
        Schema::dropIfExists('supply_requests');
    }
};
</file>

<file path="resources/views/fcu-ams/asset/disposedAssets.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Disposed Assets</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <div class="m-3">
            @include('layouts.messageWithoutTimerForError')
        </div>

        <div class="bg-white p-5 shadow-md m-3 rounded-md">
            <div class="flex justify-between mb-6">
                <h2 class="text-2xl font-bold my-auto">Disposed Assets List</h2>
                <!-- <div class="searchBox flex gap-2">
                    <div class="flex gap-2">
                        <div class="relative flex-1">
                            <input type="text" name="search" value="{{ request('search') }}"
                                class="w-full rounded-md border-0 py-2 pl-2 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                                placeholder="Search disposed assets..." id="searchInput">
                            <div class="absolute inset-y-0 right-0 flex items-center pr-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" 
                                    class="w-5 h-5 text-gray-400">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                                </svg>
                            </div>
                        </div>
                        <button type="button" onclick="window.location.href='{{ route('asset.disposed') }}'"
                            class="flex gap-1 items-center bg-red-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Clear
                        </button>
                    </div>
                </div> -->
            </div>

            <div class="overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Asset Tag ID</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'asset_tag_id', 'direction' => ($direction == 'asc' && $sort == 'asset_tag_id') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Category</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'category_name', 'direction' => ($direction == 'asc' && $sort == 'category_name') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Brand</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'brand_name', 'direction' => ($direction == 'asc' && $sort == 'brand_name') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Model</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'model', 'direction' => ($direction == 'asc' && $sort == 'model') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Department</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'department_name', 'direction' => ($direction == 'asc' && $sort == 'department_name') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Disposed Status</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'disposed_status_name', 'direction' => ($direction == 'asc' && $sort == 'disposed_status_name') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Disposed Amount</span>
                                    <a class="ml-2" href="{{ route('asset.disposed', ['sort' => 'disposed_amount', 'direction' => ($direction == 'asc' && $sort == 'disposed_amount') ? 'desc' : 'asc']) }}">
                                        {{-- <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg> --}}
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @forelse($disposedAssets as $asset)
                            <tr class="hover:bg-gray-50 transition-colors duration-200 cursor-pointer" onclick="window.location.href='{{ route('asset.view', $asset->id) }}'">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->asset_tag_id }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->category_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->brand_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->model }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->department_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->disposed_status_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱{{ number_format($asset->disposed_amount, 2) }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center" onclick="event.stopPropagation();">
                                    <div class="flex justify-center space-x-2">
                                        <a href="{{ route('asset.view', $asset->id) }}" 
                                           class="text-green-600 hover:text-blue-900 hover:scale-110 transition-transform duration-200">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                            </svg>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="8" class="px-6 py-12 text-center">
                                    <div class="flex flex-col items-center justify-center space-y-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                                        </svg>
                                        <p class="text-xl font-medium text-gray-500">No disposed assets found</p>
                                        <p class="text-sm text-gray-400">There are currently no disposed assets in the system.</p>
                                    </div>
                                </td>
                            </tr>
                        @endforelse
                    </tbody>
                </table>
            </div>

            <div class="mt-4">
                {{ $disposedAssets->links() }}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        let typingTimer;
        const doneTypingInterval = 300;

        searchInput.addEventListener('input', function() {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(performSearch, doneTypingInterval);
        });

        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });

        function performSearch() {
            const searchQuery = searchInput.value;
            window.location.href = `{{ route('asset.disposed') }}?search=${searchQuery}`;
        }
    });
</script>

@endsection
</file>

<file path="resources/views/fcu-ams/reports/department-reports.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<style>
    .pagination-container nav > div:first-child {
        display: none !important;
    }
    .pagination-container nav > div:last-child {
        margin: 0 !important;
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
    }
    .pagination-container nav > div:last-child > div:first-child {
        margin-right: 1rem !important;
    }
    .pagination-container nav > div:last-child > div:last-child {
        margin-left: auto !important;
    }
    .pagination-container .pagination-previous,
    .pagination-container .pagination-next {
        display: invisible !important;
    }

    /* Add spacing between pagination elements */
    .pagination-container nav > div:last-child > div > span,
    .pagination-container nav > div:last-child > div > a {
        margin: 0 0.5rem !important;
    }

    .pagination-container nav > div:last-child > div > span:first-child,
    .pagination-container nav > div:last-child > div > a:first-child {
        margin-left: 0 !important;
    }

    .pagination-container nav > div:last-child > div > span:last-child,
    .pagination-container nav > div:last-child > div > a:last-child {
        margin-right: 0 !important;
    }
</style>

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="text-3xl font-semibold text-gray-800 my-auto">Department Reports</h1>
            
            <!-- Profile section -->
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                </button>
                <!-- Profile dropdown menu -->
                <div x-show="open" @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <div class="content-area mx-3">
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-5 lg:grid-cols-5 gap-6 mb-6">
                <!-- Total Requests Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Total Requests</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $totalRequests }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Pending Requests Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Pending Requests</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $pendingRequests }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Approved Requests Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-green-100 text-green-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Approved Requests</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $approvedRequests }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Rejected Requests Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-red-100 text-red-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Rejected Requests</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $rejectedRequests }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Cancelled Requests Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-gray-100 text-gray-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Cancelled Requests</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $cancelledRequests }}</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chart Section -->
            <!-- <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <h2 class="text-2xl segoe font-bold text-gray-700 mb-4">Request Trends (Last 6 Months)</h2>
                <div class="w-full h-[300px] flex items-center justify-center">
                    <canvas id="trendChart"></canvas>
                </div>
            </div> -->

            <!-- Requests List Section -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700">Request History</h2>
                    <span class="text-sm text-gray-500">{{ $dateRangeDisplay }}</span>
                </div>

                <!-- Filter Form -->
                <form method="GET" action="{{ route('department.reports') }}" class="bg-gray-50 rounded-lg p-6 mb-4 border-2 border-slate-300">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label for="start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                            <input type="date" name="start_date" id="start_date"
                                value="{{ request('start_date', now()->startOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div>
                            <label for="end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                            <input type="date" name="end_date" id="end_date"
                                value="{{ request('end_date', now()->endOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div class="flex items-end">
                            <button type="submit"
                                class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                Apply Filter
                            </button>
                        </div>
                    </div>
                </form>

                @if($requests->isEmpty())
                    <p class="text-center text-gray-500 py-4">No requests found for the selected date range.</p>
                @else
                    <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Requester</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total Items</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Action</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($requests as $request)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4">{{ $request->requester }}</td>
                                        <td class="px-6 py-4">{{ $request->total_items }} items</td>
                                        <td class="px-6 py-4">{{ \Carbon\Carbon::parse($request->request_date)->format('M d, Y') }}</td>
                                        <td class="px-6 py-4">
                                            @if($request->group_status == 'pending')
                                                <span class="px-2 py-1 text-yellow-800 bg-yellow-100 rounded-full text-sm">Pending</span>
                                            @elseif($request->group_status == 'approved')
                                                <span class="px-2 py-1 text-green-800 bg-green-100 rounded-full text-sm">Approved</span>
                                            @elseif($request->group_status == 'rejected')
                                                <span class="px-2 py-1 text-red-800 bg-red-100 rounded-full text-sm">Rejected</span>
                                            @else
                                                <span class="px-2 py-1 text-gray-800 bg-gray-100 rounded-full text-sm">{{ ucfirst($request->group_status) }}</span>
                                            @endif
                                        </td>
                                        <td class="px-6 py-4">
                                            <a href="#" 
                                               class="text-blue-600 hover:text-blue-900">
                                                View Details
                                            </a>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-4 pagination-container flex w-full">
                        {{ $requests->links() }}
                    </div>
                @endif
            </div>
        </div>
    </div>
</div>

<script src="{{ asset('js/chart.js') }}"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Request Trends Chart
    const ctxTrend = document.getElementById('trendChart').getContext('2d');
    const trendLabels = @json($trendLabels);
    const trendData = @json($trendData);

    new Chart(ctxTrend, {
        type: 'line',
        data: {
            labels: trendLabels,
            datasets: [{
                label: 'Number of Requests',
                data: trendData,
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.3,
                fill: true,
                pointBackgroundColor: 'rgb(75, 192, 192)',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 5,
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 12
                        },
                        padding: 20
                    }
                },
                title: {
                    display: true,
                    text: 'Monthly Request Activity',
                    font: {
                        size: 16
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    },
                    grid: {
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
});
</script>

@endsection
</file>

<file path="resources/views/fcu-ams/reports/purchase-order-details.blade.php">
@extends('layouts.layout')
@section('content')
<style>
    body {
        --tw-bg-opacity: 1;
        background-color: rgb(241 245 249 / var(--tw-bg-opacity));
        font-size: 12px; /* Standard document font size */
        line-height: 1.2; /* Tighter line height */
    }

    .fcu-icon {
        filter: grayscale(100%);
    }

    @media print {
        body {
            background-color: white;
            margin: 0;
            padding: 0;
        }

        .no-print {
            display: none;
        }

        @page {
            size: legal; /* 8.5" x 13" */
            margin: 0.5in; /* Standard margin */
        }

        .shadow-lg {
            box-shadow: none;
        }
    }

    /* Adjust heading sizes */
    .header-title {
        font-size: 14px;
        font-weight: bold;
    }

    .header-subtitle {
        font-size: 12px;
        font-weight: bold;
    }

    /* Adjust table text */
    table {
        font-size: 12px;
    }

    /* Adjust spacing */
    .compact-spacing {
        margin-bottom: 0.5rem;
    }
</style>
<div class="bg-white p-4 mb-8 mx-auto mt-4" style="max-width: 8.5in;">
    <div class="text-left compact-spacing">
        <h1 class="header-title text-center mb-1">FILAMER CHRISTIAN UNIVERSITY, INC.</h1>
        <h1 class="header-subtitle text-center italic mb-1">ROXAS AVENUE, ROXAS CITY</h1>
        <h1 class="header-subtitle text-center mb-2">PROPERTY CUSTODIAN'S OFFICE</h1>
        <table class="w-full border-collapse">
            <tr>
                <td class="border border-black p-2">Document Name:</td>
                <td class="border border-black p-2">PURCHASE ORDER</td>
                <td class="border border-black p-2">Effectivity:</td>
                <td class="border border-black p-2">August 15, 2022</td>
            </tr>
            <tr>
                <td class="border border-black p-2">Document No:</td>
                <td class="border border-black p-2">PCO-2022-01</td>
                <td class="border border-black p-2">Issuing Office</td>
                <td class="border border-black p-2">Property Custodian's Office</td>
            </tr>
            <tr>
                <td class="border border-black p-2">Revision No:</td>
                <td class="border border-black p-2">1</td>
                <td class="border border-black p-2">Page No.</td>
                <td class="border border-black p-2">1</td>
            </tr>
        </table>

        <h1 class="header-title text-center mb-1">PURCHASE ORDER</h1>

        <div class="mb-4">
            <div class="flex mb-2">
                <div class="w-24">P.O. No.</div>
                <div class="text-red-600 mr-auto">{{ $record->po_number ?? '21938' }}</div>
                <div>DATE: {{ $record->po_date ?? '07/31/2024' }}</div>
            </div>
            <div class="flex">
                <div class="w-48">REQUESTING DEPARTMENT:</div>
                <div>{{ $record->department->department ?? 'IT ADMIN' }}</div>
            </div>
        </div>

        <div class="mb-4">
            <div class="flex">
                <div class="w-16">TO:</div>
                <div>B-Y & SONS TRADING</div>
            </div>
            <div class="flex">
                <div class="w-16">ADDRESS:</div>
                <div>ROXAS AVENUE</div>
            </div>
        </div>

        <p class="mb-4">Please supply us within ___ working days after receipt of this Purchase Order</p>
    </div>

    <table class="w-full mb-8">
        <thead>
            <tr class="bg-gray-100">
                <th class="px-6 py-3 text-left">Item</th>
                <th class="px-6 py-3 text-center">Quantity</th>
                <th class="px-6 py-3 text-right">Unit Price</th>
                <th class="px-6 py-3 text-right">Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach($purchaseOrderDetails as $detail)
                <tr>
                    <td class="border-b px-6 py-4">{{ $detail['items_specs'] }}</td>
                    <td class="border-b px-6 py-4 text-center">{{ $detail['quantity'] }}</td>
                    <td class="border-b px-6 py-4 text-right">
                        ₱{{ number_format($detail['unit_price'], 2) }}</td>
                    <td class="border-b px-6 py-4 text-right">
                        ₱{{ number_format($detail['quantity'] * $detail['unit_price'], 2) }}
                    </td>
                </tr>
            @endforeach
        </tbody>
        <tfoot>
            <tr class="font-bold">
                <td class="px-6 py-4" colspan="3">Overall Price:</td>
                <td class="px-6 py-4 text-right">₱{{ number_format($totalPrice, 2) }}</td>
            </tr>
        </tfoot>
    </table>

    <div class="flex justify-between mt-12 pt-6 border-t">
        <div class="text-center">
            <p class="font-bold mb-2">Prepared by:</p>
            <p>{{ (auth()->user() ? auth()->user()->first_name . ' ' . auth()->user()->last_name : 'N/A') }}
            </p>
        </div>
        <div class="text-center flex s space-x-9">
            <div>
                <p class="font-bold mb-2">Approved by:</p>
                <p>{{ $record->approved_by }}</p>
            </div>
        </div>
    </div>

    <div class="flex justify-between mt-8 no-print">
        <button onclick="window.history.back()"
            class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
            </svg>
        </button>
        <button onclick="window.print()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="size-6">
                <path stroke-linecap="round" stroke-linejoin="round"
                    d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
            </svg>
        </button>
    </div>
</div>

<script>
    function printReceipt() {
        window.print();
    }
</script>
@endsection
</file>

<file path="resources/views/reports/assigned-assets-pdf.blade.php">
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Assigned Assets Report</title>
    <style>
        body {
            font-family: DejaVu Sans, Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        .header {
            width: 100%;
            margin-bottom: 30px;
            position: relative;
            min-height: 100px;
            text-align: center;  /* Center all content */
        }
        .header-content {
            display: inline-block;
            width: 70%;
            padding-top: 20px;  /* Add some top padding to align with logo */
        }
        .report-title {
            font-size: 16pt;  /* Increased font size */
            font-weight: bold;
            margin-bottom: 15px;
        }
        .report-info {
            font-size: 12pt;
            line-height: 1.5;  /* Add some line spacing */
        }
        .report-info p {
            margin: 5px 0;  /* Adjust paragraph spacing */
        }
        .logo {
            position: absolute;
            top: 6;  /* Center vertically */
            right: 0;
            width: 100px;
            height: auto;
        }
        .report-info {
            font-size: 14px;
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 6px 8px;
            text-align: left;
            font-size: 11px;
            vertical-align: top;
        }
        th {
            background-color: #f5f5f5;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #fafafa;
        }
        .summary {
            margin-top: 20px;
            font-size: 14px;
        }
        .footer {
            margin-top: 30px;
            font-size: 12px;
            text-align: center;
            color: #666;
        }
        td:last-child {
            text-align: right;
            padding-right: 15px;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div class="report-title">Assigned Assets Report</div>
            <div class="report-info">
                <p>Assignee: {{ $assignee }}</p>
                <p>Report Generated: {{ $currentDate }}</p>
            </div>
        </div>
        <img src="{{ public_path('img/login/fcu-icon.png') }}" alt="FCU Icon" class="logo">
    </div>

    <table>
        <thead>
            <tr>
                <th style="width: 11%">Asset Tag ID</th>
                <th style="width: 10%">Brand</th>
                <th style="width: 11%">Model</th>
                <th style="width: 13%">Serial Number</th>
                <th style="width: 15%">Department</th>
                <th style="width: 13%">Site</th>
                <th style="width: 9%">Status</th>
                <th style="width: 9%">Condition</th>
                <th style="width: 9%">Cost</th>
            </tr>
        </thead>
        <tbody>
            @foreach($assets as $asset)
                <tr>
                    <td>{{ $asset->asset_tag_id }}</td>
                    <td>{{ $asset->brand->brand }}</td>
                    <td>{{ $asset->model }}</td>
                    <td>{{ $asset->serial_number }}</td>
                    <td>{{ $asset->department->department }}</td>
                    <td>{{ $asset->site->site }}</td>
                    <td>{{ $asset->status->status }}</td>
                    <td>{{ $asset->condition->condition }}</td>
                    <td>{{ number_format($asset->cost, 2) }}</td>
                </tr>
            @endforeach
        </tbody>
    </table>

    <div class="summary">
        <p><strong>Total Number of Assets:</strong> {{ $assets->count() }}</p>
        <p><strong>Total Value:</strong> PHP {{ number_format($totalValue, 2) }}</p>
    </div>
</body>
</html>
</file>

<file path="app/Http/Controllers/ReportController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use DB;
use App\Models\Asset;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Condition;
use App\Models\Inventory;
use App\Models\Department;
use App\Models\StockOut;
use App\Models\PurchaseOrder;
use App\Models\AssetEditHistory;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\AssetsExport;
use App\Imports\AssetsImport;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Validation\Rule;
use App\Models\Brand;
use App\Models\Unit;
use Carbon\Carbon;
use App\Models\SupplyRequest;
use App\Exports\InventoryExportReport;
use App\Exports\AssetExportReport;
use App\Services\ReportPrintService;

class ReportController extends Controller
{
    public function index(Request $request) {
        $startDate = $request->input('start_date', now()->startOfMonth()->toDateString());
        $endDate = $request->input('end_date', now()->endOfMonth()->toDateString());

        $startDate = Carbon::parse($startDate)->startOfDay();
        $endDate = Carbon::parse($endDate)->endOfDay();

        // Get chart data
        $inventoryBySupplier = Inventory::select('suppliers.supplier', DB::raw('COUNT(*) as count'))
            ->join('suppliers', 'inventories.supplier_id', '=', 'suppliers.id')
            ->where('inventories.quantity', '>', 0)
            ->groupBy('suppliers.supplier')
            ->orderByDesc('count')
            ->limit(5)
            ->get();

        $chartLabels = $inventoryBySupplier->pluck('supplier');
        $chartData = $inventoryBySupplier->pluck('count');

        // Get asset distribution by department data
        $assetsByDepartment = Asset::select('departments.department', DB::raw('COUNT(*) as count'))
            ->join('departments', 'assets.department_id', '=', 'departments.id')
            ->groupBy('departments.department')
            ->orderByDesc('count')
            ->limit(5)
            ->get();

        $departmentChartLabels = $assetsByDepartment->pluck('department');
        $departmentChartData = $assetsByDepartment->pluck('count');

        // Get stock-out trends data for the last 6 months
        $stockOutTrends = StockOut::select(
            DB::raw('DATE_FORMAT(stock_out_date, "%Y-%m") as month'),
            DB::raw('COUNT(DISTINCT stock_out_id) as count')
        )
            ->where('stock_out_date', '>=', now()->subMonths(6))
            ->groupBy('month')
            ->orderBy('month')
            ->get();

        $trendLabels = $stockOutTrends->pluck('month')->map(function($month) {
            return Carbon::createFromFormat('Y-m', $month)->format('F Y');
        });
        $trendData = $stockOutTrends->pluck('count');

        // Assets date filter
        $assetsStartDate = $request->input('assets_start_date', now()->startOfMonth()->toDateString());
        $assetsEndDate = $request->input('assets_end_date', now()->endOfMonth()->toDateString());
        $assetsStartDate = Carbon::parse($assetsStartDate)->startOfDay();
        $assetsEndDate = Carbon::parse($assetsEndDate)->endOfDay();

        // Assigned assets query
        $assigneeQuery = $request->input('assignee');
        $assignedAssets = null;
        if ($assigneeQuery) {
            $assignedAssets = Asset::with(['supplier', 'brand', 'site', 'location', 'category', 'department', 'condition', 'status'])
                ->where('assigned_to', 'like', '%' . $assigneeQuery . '%')
                ->orderBy('asset_tag_id', 'asc')
                ->paginate(10, ['*'], 'assigned_page')
                ->appends(request()->except('assigned_page'));
        }

        // Date range display method
        $dateRangeDisplay = $this->formatDateRange($startDate, $endDate);
        $assetsDateRangeDisplay = $this->formatDateRange($assetsStartDate, $assetsEndDate, 'assets');

        $inventories = Inventory::with('supplier', 'brand', 'unit')
            ->whereBetween('created_at', [$startDate, $endDate])
            ->where('quantity', '>', 0)
            ->orderBy('unique_tag', 'asc')
            ->paginate(10, ['*'], 'inventory_page')
            ->appends(request()->except('inventory_page'));

        $inventoriesForPrint = Inventory::with('supplier')
            ->whereBetween('created_at', [$startDate, $endDate])
            ->where('quantity', '>', 0)
            ->orderBy('unique_tag', 'asc')
            ->get();

        $stockOutRecords = StockOut::with('inventory', 'department')
            ->orderBy('stock_out_date', 'desc')
            ->orderBy('created_at', 'desc')
            ->get()
            ->groupBy('stock_out_id')
            ->map(function ($records) {
                return $records->first();
            });

            // Stock Out date filter
            $stockOutStartDate = $request->input('stock_out_start_date', now()->startOfMonth()->toDateString());
            $stockOutEndDate = $request->input('stock_out_end_date', now()->endOfMonth()->toDateString());
            $stockOutStartDate = Carbon::parse($stockOutStartDate)->startOfDay();
            $stockOutEndDate = Carbon::parse($stockOutEndDate)->endOfDay();
           
            // Stock Out date range display
            $stockOutDateRangeDisplay = $this->formatDateRange($stockOutStartDate, $stockOutEndDate, 'stock out');
            $stockOutRecords = StockOut::with('inventory', 'department')
                ->whereBetween('stock_out_date', [$stockOutStartDate, $stockOutEndDate])
                ->orderBy('stock_out_date', 'desc')
                ->orderBy('created_at', 'desc')
                ->get()
                ->groupBy('stock_out_id')
                ->map(function ($records) {
                    return $records->first();
                });
 
        $stockOutRecords = new LengthAwarePaginator(
            $stockOutRecords->forPage($request->input('stock_out_page', 1), 10),
            $stockOutRecords->count(),
            10,
            $request->input('stock_out_page', 1),
            ['path' => $request->url(), 'query' => array_merge($request->query(), ['stock_out_page' => $request->input('stock_out_page', 1)])]
        );

        $assets = Asset::with('supplier', 'brand')
            ->whereBetween('purchase_date', [$assetsStartDate, $assetsEndDate])
            ->orderBy('asset_tag_id', 'asc')
            ->paginate(10, ['*'], 'assets_page')
            ->appends(request()->except('assets_page'));


        // Purchase Order date filter
        $poStartDate = $request->input('po_start_date', now()->startOfMonth()->toDateString());
        $poEndDate = $request->input('po_end_date', now()->endOfMonth()->toDateString());
        $poStartDate = Carbon::parse($poStartDate)->startOfDay();
        $poEndDate = Carbon::parse($poEndDate)->endOfDay();

        // Purchase Order date range display
        $poDateRangeDisplay = $this->formatDateRange($poStartDate, $poEndDate, 'purchase order');
        
        // Get purchase orders
        $purchaseOrders = PurchaseOrder::with('supplier', 'department')
            ->whereBetween('po_date', [$poStartDate, $poEndDate])
            ->orderBy('po_date', 'desc')
            ->orderBy('created_at', 'desc')
            ->get()
            ->groupBy('group_id_for_items_purchased_at_the_same_time')
            ->map(function ($records) {
                return $records->first();
            });

        $purchaseOrders = new LengthAwarePaginator(
            $purchaseOrders->forPage($request->input('po_page', 1), 10),
            $purchaseOrders->count(),
            10,
            $request->input('po_page', 1),
            ['path' => $request->url(), 'query' => array_merge($request->query(), ['po_page' => $request->input('po_page', 1)])]
        );

        // Get approved requests for the purchase order section using the same date range
        $fullyApprovedGroupsForPO = SupplyRequest::select('request_group_id')
            ->groupBy('request_group_id')
            ->havingRaw('COUNT(*) = SUM(CASE WHEN status = "approved" THEN 1 ELSE 0 END)')
            ->pluck('request_group_id');
        
        $approvedRequestsForPO = SupplyRequest::with('department')
            ->select(
                'request_group_id',
                'department_id',
                'request_date',
                'requester',
                DB::raw('COUNT(*) as total_items')
            )
            ->whereIn('request_group_id', $fullyApprovedGroupsForPO)
            ->whereBetween('request_date', [$poStartDate, $poEndDate])
            ->groupBy('request_group_id', 'department_id', 'request_date', 'requester')
            ->orderBy('request_date', 'desc')
            ->paginate(10, ['*'], 'po_request_page');

        // For supply requests section (separate filtering)
        $supplyRequestStartDate = $request->input('supply_request_start_date', now()->startOfMonth()->toDateString());
        $supplyRequestEndDate = $request->input('supply_request_end_date', now()->endOfMonth()->toDateString());

        $supplyRequestStartDate = Carbon::parse($supplyRequestStartDate)->startOfDay();
        $supplyRequestEndDate = Carbon::parse($supplyRequestEndDate)->endOfDay();

        // First, get all request groups where ALL items are approved
        $fullyApprovedGroups = SupplyRequest::select('request_group_id')
            ->groupBy('request_group_id')
            ->havingRaw('COUNT(*) = SUM(CASE WHEN status = "approved" THEN 1 ELSE 0 END)')
            ->pluck('request_group_id');
        
        // Then use these groups to get the request details
        $approvedRequests = SupplyRequest::with('department')
            ->select(
                'request_group_id',
                'department_id',
                'request_date',
                'requester',
                DB::raw('COUNT(*) as total_items')
            )
            ->whereIn('request_group_id', $fullyApprovedGroups)
            ->whereBetween('request_date', [$supplyRequestStartDate, $supplyRequestEndDate])
            ->groupBy('request_group_id', 'department_id', 'request_date', 'requester')
            ->orderBy('request_date', 'desc')
            ->paginate(10, ['*'], 'supply_request_page');

        $supplyRequestDateRangeDisplay = $supplyRequestStartDate->format('M d, Y') . ' - ' . $supplyRequestEndDate->format('M d, Y');

        return view('fcu-ams/reports/reports', array_merge(
            compact('stockOutRecords', 'assets', 'purchaseOrders', 'inventoriesForPrint',
                'assetsDateRangeDisplay', 'poDateRangeDisplay', 'stockOutDateRangeDisplay',
                'assignedAssets', 'assigneeQuery', 'chartLabels', 'chartData',
                'departmentChartLabels', 'departmentChartData', 'trendLabels', 'trendData', 
                'approvedRequests', 'approvedRequestsForPO', 'supplyRequestDateRangeDisplay'),
            [
                'inventories' => $inventories,
                'startDate' => $startDate->toDateString(),
                'endDate' => $endDate->toDateString(),
                'dateRangeDisplay' => $dateRangeDisplay,
                'purchaseOrders' => $purchaseOrders,
                'poStartDate' => $poStartDate->toDateString(),
                'poEndDate' => $poEndDate->toDateString(),
                'poDateRangeDisplay' => $poDateRangeDisplay,
                'stockOutStartDate' => $stockOutStartDate->toDateString(),
                'stockOutEndDate' => $stockOutEndDate->toDateString(),
                'stockOutDateRangeDisplay' => $stockOutDateRangeDisplay,
                'supplyRequestStartDate' => $supplyRequestStartDate->toDateString(),
                'supplyRequestEndDate' => $supplyRequestEndDate->toDateString(),
                'supplyRequestDateRangeDisplay' => $supplyRequestDateRangeDisplay
            ]
        ));
    }

    private function formatDateRange(Carbon $startDate, Carbon $endDate, $type = 'supplies'): string {
        // Same month scenario
        if ($startDate->month == $endDate->month && $startDate->year == $endDate->year) {
            return sprintf(
                "%s from %s %d %d to %s %d %d",
                ucfirst($type),
                $startDate->translatedFormat('F'),
                $startDate->day,
                $startDate->year,
                $endDate->translatedFormat('F'),
                $endDate->day,
                $endDate->year
            );
        }


        // Different months scenario
        return sprintf(
            "%s from %s %d %d to %s %d %d",
            ucfirst($type),
            $startDate->translatedFormat('F'), 
            $startDate->day, 
            $startDate->year,
            $endDate->translatedFormat('F'), 
            $endDate->day, 
            $endDate->year
        );
    }

    public function stockOutDetails($id)
    {
        $record = StockOut::with('inventory', 'department')->findOrFail($id);
        $stockOutDetails = [];
        $totalPrice = 0;

        $stockOutRecords = StockOut::where('stock_out_id', $record->stock_out_id)->get();

        foreach ($stockOutRecords as $stockOutRecord) {
            $inventory = $stockOutRecord->inventory;
            $stockOutDetails[] = [
                'item' => $inventory->brand->brand . ' ' . $inventory->items_specs,
                'quantity' => $stockOutRecord->quantity,
                'price' => $inventory->unit_price,
            ];
            $totalPrice += $stockOutRecord->quantity * $inventory->unit_price;
        }

        return view('fcu-ams/reports/stock-out-details', compact('stockOutDetails', 'totalPrice', 'record'));
    }

    public function purchaseOrderDetails($id)
    {
        $record = PurchaseOrder::with('department', 'supplier')->findOrFail($id);
        $purchaseOrderDetails = [];
        $totalPrice = 0;

        $purchaseOrderRecords = PurchaseOrder::where('group_id_for_items_purchased_at_the_same_time', $record->group_id_for_items_purchased_at_the_same_time)->get();

        foreach ($purchaseOrderRecords as $purchaseOrderRecord) {
            $purchaseOrderDetails[] = [
                'items_specs' => $purchaseOrderRecord->items_specs,
                'quantity' => $purchaseOrderRecord->quantity,
                'unit_price' => $purchaseOrderRecord->unit_price,
            ];
            $totalPrice += $purchaseOrderRecord->quantity * $purchaseOrderRecord->unit_price;
        }

        return view('fcu-ams/reports/purchase-order-details', compact('purchaseOrderDetails', 'totalPrice', 'record'));
    }

    public function printReport(Request $request, ReportPrintService $printService)
    {
        $startDate = $request->input('start_date', now()->startOfMonth()->toDateString());
        $endDate = $request->input('end_date', now()->endOfMonth()->toDateString());
        
        $startDate = Carbon::parse($startDate)->startOfDay();
        $endDate = Carbon::parse($endDate)->endOfDay();

        $inventories = Inventory::with('supplier')
            ->whereBetween('created_at', [$startDate, $endDate])
            ->orderBy('unique_tag', 'asc')
            ->get();
        
        return $printService->printMonthlySupplierReport($inventories, $startDate, $endDate);
    }

    public function printAssetsReport(Request $request, ReportPrintService $printService)
    {
        $startDate = $request->input('assets_start_date', now()->startOfMonth()->toDateString());
        $endDate = $request->input('assets_end_date', now()->endOfMonth()->toDateString());
        
        $startDate = Carbon::parse($startDate)->startOfDay();
        $endDate = Carbon::parse($endDate)->endOfDay();

        $assets = Asset::with('supplier', 'brand')
            ->whereBetween('purchase_date', [$startDate, $endDate])
            ->orderBy('asset_tag_id', 'asc')
            ->get();
        
        return $printService->printMonthlyAssetsReport($assets, $startDate, $endDate);
    }

    public function printAssignedAssets(Request $request, ReportPrintService $printService)
    {
        $assignee = $request->input('assignee');
        if (!$assignee) {
            return redirect()->back()->with('error', 'No assignee specified for printing.');
        }

        $assets = Asset::with(['supplier', 'brand', 'site', 'location', 'category', 'department', 'condition', 'status'])
            ->where('assigned_to', 'like', '%' . $assignee . '%')
            ->orderBy('asset_tag_id', 'asc')
            ->get();

        if ($assets->isEmpty()) {
            return redirect()->back()->with('error', 'No assets found for the specified assignee.');
        }

        return $printService->printAssignedAssetsReport($assets, $assignee);
    }

    private function getMonthlyInventories($month, $year)
    {
        $startDate = Carbon::createFromDate($year, $month, 1)->startOfMonth();
        $endDate = Carbon::createFromDate($year, $month, 1)->endOfMonth();

        return Inventory::with(['supplier', 'brand', 'unit'])
            ->whereBetween('created_at', [$startDate, $endDate])
            ->where('quantity', '>', 0)
            ->orderBy('unique_tag')
            ->paginate(10);
    }

    public function printApprovedRequest($request_group_id)
    {
        $requests = SupplyRequest::with(['department', 'inventory'])
            ->where('request_group_id', $request_group_id)
            ->where('status', 'approved')
            ->get();
    
        if ($requests->isEmpty()) {
            return redirect()->back()->with('error', 'No approved requests found.');
        }
    
        $totalPrice = $requests->sum(function ($request) {
            return ($request->inventory_id ? 
                ($request->inventory->unit_price ?? 0) : 
                ($request->estimated_unit_price ?? 0)) * $request->quantity;
        });
    
        return view('fcu-ams.reports.print-approved-request', compact('requests', 'totalPrice'));
    }

    public function exportInventory(Request $request)
    {
        $startDate = $request->input('start_date', now()->startOfMonth()->toDateString());
        $endDate = $request->input('end_date', now()->endOfMonth()->toDateString());
    
        return Excel::download(
            new InventoryExportReport($startDate, $endDate),
            'inventory_report_' . Carbon::now()->format('Y-m-d_His') . '.csv'
        );
    }

    public function exportAssets(Request $request)
    {
        $startDate = $request->input('assets_start_date', now()->startOfMonth()->toDateString());
        $endDate = $request->input('assets_end_date', now()->endOfMonth()->toDateString());
    
        return Excel::download(
            new AssetExportReport($startDate, $endDate),
            'assets_report_' . Carbon::now()->format('Y-m-d_His') . '.csv'
        );
    }
}
</file>

<file path="database/migrations/2024_08_09_144816_create_assets_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::create('disposed_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('status');
            $table->timestamps();
        });

        Schema::create('conditions', function (Blueprint $table) {
            $table->id();
            $table->string('condition');
            $table->timestamps();
        });

        Schema::create('statuses', function (Blueprint $table) {
            $table->id();
            $table->string('status');
            $table->timestamps();
        });

        Schema::create('assets', function (Blueprint $table) {
            $table->id();
            $table->string('asset_image')->nullable();
            $table->string('asset_tag_id');
            $table->unsignedBigInteger('brand_id');
            $table->foreign('brand_id')->references('id')->on('brands');
            $table->string('model');
            $table->text('specs')->nullable();
            $table->string('serial_number');
            $table->decimal('cost', 10, 2);
            $table->unsignedBigInteger('supplier_id');
            $table->foreign('supplier_id')->references('id')->on('suppliers');
            $table->unsignedBigInteger('disposed_status_id')->nullable();
            $table->foreign('disposed_status_id')->references('id')->on('disposed_statuses');
            $table->unsignedBigInteger('site_id');
            $table->foreign('site_id')->references('id')->on('sites');
            $table->unsignedBigInteger('location_id');
            $table->foreign('location_id')->references('id')->on('locations');
            $table->unsignedBigInteger('category_id');
            $table->foreign('category_id')->references('id')->on('categories');
            $table->unsignedBigInteger('department_id');
            $table->foreign('department_id')->references('id')->on('departments');
            $table->date('purchase_date');
            $table->unsignedBigInteger('status_id')->nullable();
            $table->foreign('status_id')->references('id')->on('statuses');
            $table->unsignedBigInteger('condition_id')->nullable();
            $table->foreign('condition_id')->references('id')->on('conditions');
            $table->decimal('disposed_amount', 10, 2)->nullable();
            $table->date('maintenance_start_date')->nullable();
            $table->date('maintenance_end_date')->nullable();
            $table->string('assigned_to')->nullable();
            $table->date('issued_date')->nullable();
            $table->date('return_date')->nullable();
            $table->timestamp('returned_at')->nullable();
            $table->text('notes')->nullable();
            $table->timestamps();
            $table->softDeletes();
            $table->unsignedBigInteger('created_by')->nullable();
            $table->unsignedBigInteger('deleted_by')->nullable();
            $table->foreign('created_by')->references('id')->on('users');
            $table->foreign('deleted_by')->references('id')->on('users');
        });
    }

    public function down()
    {
        Schema::dropIfExists('conditions');
        Schema::dropIfExists('statuses');
        Schema::dropIfExists('assets');
    }
};
</file>

<file path="resources/views/fcu-ams/asset/qrCode.blade.php">
@extends('layouts.layout')
@section('content')
<style>
    body {
        --tw-bg-opacity: 1;
        background-color: rgb(241 245 249 / var(--tw-bg-opacity));
    }

    .fcu-icon {
        transition: all 0.3s ease;
    }

    @media print {
        body {
            background-color: white;
            margin: 0;
            padding: 0;
        }

        .no-print {
            display: none;
        }

        @page {
            size: auto;
            margin: 0;
        }

        .min-h-screen {
            min-height: auto !important;
            padding: 0 !important;
        }

        .qr-code-container {
            border: 1px solid black;
            margin-top: 10px !important;
            padding: 8px !important;
            max-width: 180px !important;
            width: 180px !important;
            box-shadow: none !important;
            margin: 10px auto !important;
            transform: scale(0.7);
            transform-origin: center;
        }

        .text-center {
            text-align: center !important;
        }

        .flex.justify-center {
            justify-content: center !important;
            padding: 0 !important;
        }

        .space-y-6 > * {
            margin-top: 0.25rem !important;
            margin-bottom: 0.25rem !important;
        }

        .space-y-2 > * {
            margin-top: 0.15rem !important;
            margin-bottom: 0.15rem !important;
        }

        .text-2xl {
            font-size: 1rem !important;
            line-height: 1.2 !important;
        }

        .text-sm {
            font-size: 0.7rem !important;
        }

        .text-xs {
            font-size: 0.65rem !important;
        }

        .text-xl {
            font-size: 0.9rem !important;
        }

        .text-lg {
            font-size: 0.8rem !important;
        }
    }
</style>

<div class="min-h-screen flex items-center justify-center bg-slate-100 p-4">
    <div class="qr-code-container bg-white rounded-xl p-8 max-w-lg w-full shadow-none transform transition-all duration-300 hover:shadow-none">
        <div class="text-center space-y-6">
            <div class="space-y-2">
                <h2 class="text-2xl font-bold text-gray-800 tracking-tight">FILAMER CHRISTIAN UNIVERSITY, INC.</h2>
                <p class="text-sm text-gray-500">Asset Management System</p>
            </div>
            
            <div class="flex justify-center p-0 qr-code bg-white rounded-lg">
                {{ $qrCode }}
            </div>

            <div class="space-y-2">
                <h2 class="text-xl font-semibold text-gray-700">Asset Tag ID:</h2>
                <p class="text-xs font-mono bg-gray-50 py-2 px-4 rounded-lg inline-block">{{ $asset->asset_tag_id }}</p>
            </div>
        </div>

        <div class="flex justify-between mt-8 gap-4 no-print">
            <button onclick="window.history.back()"
                class="flex items-center gap-2 bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-200 transform hover:-translate-y-0.5">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
                </svg>
                Back
            </button>
            
            <button onclick="window.print()"
                class="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg transition-all duration-200 transform hover:-translate-y-0.5">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                    stroke="currentColor" class="w-5 h-5">
                    <path stroke-linecap="round" stroke-linejoin="round"
                        d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
                </svg>
                Print
            </button>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/asset/updateAsset.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <!-- Header -->
        <div class="bg-white m-3 shadow-md rounded-md 2xl:max-w-7xl 2xl:mx-auto">
            <div class="px-4 sm:px-6 lg:px-8 py-6">
                <div class="flex justify-between">
                    <a href="{{ route('asset.list') }}"
                        class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                    </a>
                    <h1 class="text-2xl font-semibold text-gray-900">Update Asset</h1>
                    <a href="{{ route('asset.list') }}"
                        class="mr-4 invisible hover:bg-gray-100 my-auto p-2 rounded-full transition">
                        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                            xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                    </a>
                </div>
            </div>
        </div>

        <!-- Main content -->
        <div class="m-3 2xl:max-w-7xl 2xl:mx-auto mb-6">
            <div class="mb-3">
                @include('layouts.messageWithoutTimerForError')
            </div>

            <!-- Form -->
            <div class="bg-white shadow rounded-lg">
                <form method="POST" enctype="multipart/form-data"
                    action="{{ route('asset.update', ['id' => $asset->id]) }}"
                    class="space-y-6 p-6">
                    @csrf
                    <input type="hidden" name="id" value="{{ $asset->id }}">
                    <!-- Add hidden inputs for disposed amount and status -->
                    <input type="hidden" name="disposed_amount" id="hidden_disposed_amount" value="{{ $asset->disposed_amount }}">
                    <input type="hidden" name="disposed_status_id" id="hidden_disposed_status_id" value="{{ $asset->disposed_status_id }}">

                    <!-- Asset Image -->
                    <div class="space-y-1">
                        <label for="asset_image" class="block text-sm font-medium text-gray-700">Asset Image</label>
                        <div class="mt-1 flex items-center">
                            <div class="flex-shrink-0 h-32 w-32 border rounded-lg overflow-hidden bg-gray-100">
                                @if($asset->asset_image)
                                    <img src="{{ asset($asset->asset_image) }}" alt="Asset image"
                                        class="h-32 w-32 object-cover">
                                @else
                                    <div class="h-32 w-32 flex items-center justify-center text-gray-400">
                                        <svg class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                @endif
                            </div>
                            <div class="ml-2">
                                <div class="relative">
                                    <input type="file" id="asset_image" name="asset_image" class="hidden"
                                        accept="image/*">
                                    <label for="asset_image"
                                        class="cursor-pointer bg-white py-2 px-3 border border-2 bg-slate-50 border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                        Change Image
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                        <!-- Asset Tag ID -->
                        <div>
                            <label for="asset_tag_id" class="block text-sm font-medium text-gray-700">Asset Tag
                                ID</label>
                            <div class="mt-1">
                                <input type="text" id="asset_tag_id" name="asset_tag_id"
                                    value="{{ $asset->asset_tag_id }}" required
                                    class="shadow-sm p-2 border  focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">
                            </div>
                        </div>

                        <!-- Model -->
                        <div>
                            <label for="model" class="block text-sm font-medium text-gray-700">Model</label>
                            <div class="mt-1">
                                <input type="text" id="model" name="model" value="{{ $asset->model }}" required
                                    class="shadow-sm p-2 border  focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">
                            </div>
                        </div>

                        <!-- Specification -->
                        <div>
                            <label for="specs" class="block text-sm font-medium text-gray-700">Specification</label>
                            <div class="mt-1">
                                <textarea id="specs" name="specs" rows="4"
                                    class="shadow-sm p-2 border focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">{{ $asset->specs }}</textarea>
                            </div>
                        </div>

                        <!-- Serial Number -->
                        <div>
                            <label for="serial_number" class="block text-sm font-medium text-gray-700">Serial
                                Number</label>
                            <div class="mt-1">
                                <input type="text" id="serial_number" name="serial_number"
                                    value="{{ $asset->serial_number }}" required
                                    class="shadow-sm p-2 border  focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">
                            </div>
                        </div>

                        <!-- Cost -->
                        <div>
                            <label for="cost" class="block text-sm font-medium text-gray-700">Cost</label>
                            <div class="mt-1 relative rounded-md shadow-sm">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500 sm:text-sm">₱</span>
                                </div>
                                <input type="number" id="cost" name="cost" value="{{ $asset->cost }}" min="0" required
                                    class="focus:ring-indigo-500 p-2 border  focus:border-indigo-500 block w-full pl-7 sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">
                            </div>
                        </div>

                        <!-- Purchase Date -->
                        <div>
                            <label for="purchase_date" class="block text-sm font-medium text-gray-700">Purchase
                                Date</label>
                            <div class="mt-1">
                                <input type="date" id="purchase_date" name="purchase_date"
                                    value="{{ $asset->purchase_date }}" required
                                    class="shadow-sm  p-2 border  focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">
                            </div>
                        </div>

                        <!-- Assigned To -->
                        <div>
                            <label for="assigned_to" class="block text-sm font-medium text-gray-700">Assigned To</label>
                            <div class="mt-1">
                                <button type="button" id="show-assignment-modal"
                                    class="w-full text-left p-2 border border-2 bg-slate-50 border-gray-300 rounded-md shadow-sm text-sm focus:ring-indigo-500 focus:border-indigo-500 hover:bg-gray-50">
                                    {{ $asset->assigned_to ? $asset->assigned_to : 'Click to assign' }}
                                </button>
                                <input type="hidden" name="assigned_to" id="assigned_to"
                                    value="{{ old('assigned_to', $asset->assigned_to) }}">
                                <input type="hidden" name="issued_date" id="issued_date"
                                    value="{{ old('issued_date', $asset->issued_date) }}">
                                <input type="hidden" name="notes" id="notes"
                                    value="{{ old('notes', $asset->notes) }}">
                            </div>
                        </div>

                        <!-- Supplier -->
                        <div>
                            <label for="supplier_id" class="block text-sm font-medium text-gray-700">Supplier</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="supplier_id" name="supplier_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($suppliers as $supplier)
                                        <option value="{{ $supplier->id }}"
                                            {{ $supplier->id == $asset->supplier_id ? 'selected' : '' }}>
                                            {{ $supplier->supplier }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-supplier-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Site -->
                        <div>
                            <label for="site_id" class="block text-sm font-medium text-gray-700">Site</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="site_id" name="site_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($sites as $site)
                                        <option value="{{ $site->id }}"
                                            {{ $site->id == $asset->site_id ? 'selected' : '' }}>
                                            {{ $site->site }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-site-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Location -->
                        <div>
                            <label for="location_id" class="block text-sm font-medium text-gray-700">Location</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="location_id" name="location_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($locations as $location)
                                        <option value="{{ $location->id }}"
                                            {{ $location->id == $asset->location_id ? 'selected' : '' }}>
                                            {{ $location->location }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-location-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Category -->
                        <div>
                            <label for="category_id" class="block text-sm font-medium text-gray-700">Category</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="category_id" name="category_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($categories as $category)
                                        <option value="{{ $category->id }}"
                                            {{ $category->id == $asset->category_id ? 'selected' : '' }}>
                                            {{ $category->category }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-category-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Department -->
                        <div>
                            <label for="department_id" class="block text-sm font-medium text-gray-700">Department</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="department_id" name="department_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($departments as $department)
                                        <option value="{{ $department->id }}"
                                            {{ $department->id == $asset->department_id ? 'selected' : '' }}>
                                            {{ $department->department }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-department-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Brand -->
                        <div>
                            <label for="brand_id" class="block text-sm font-medium text-gray-700">Brand</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="brand_id" name="brand_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($brands as $brand)
                                        <option value="{{ $brand->id }}"
                                            {{ $brand->id == $asset->brand_id ? 'selected' : '' }}>
                                            {{ $brand->brand }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-brand-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Status -->
                        <div>
                            <label for="status_id" class="block text-sm font-medium text-gray-700">Status</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="status_id" name="status_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($statuses as $status)
                                        <option value="{{ $status->id }}"
                                            {{ $status->id == $asset->status_id ? 'selected' : '' }}>
                                            {{ $status->status }}
                                        </option>
                                    @endforeach
                                </select>
                                <button type="button"
                                    onclick="document.getElementById('add-status-modal').classList.remove('hidden')"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <!-- Condition -->
                        <div>
                            <label for="condition_id" class="block text-sm font-medium text-gray-700">Condition</label>
                            <div class="mt-1 flex space-x-2">
                                <select id="condition_id" name="condition_id" required
                                    class="block w-full pl-3 pr-10 py-2 text-base border-2 bg-slate-50 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    @foreach($conditions as $condition)
                                        <option value="{{ $condition->id }}"
                                            {{ $condition->id == $asset->condition_id ? 'selected' : '' }}>
                                            {{ $condition->condition }}
                                        </option>
                                    @endforeach
                                </select>
                            </div>
                            @if($asset->disposed_amount)
                                <div class="mt-2">
                                    <span class="text-sm text-gray-500">Disposed Amount: ₱{{ number_format($asset->disposed_amount, 2) }}</span>
                                </div>
                            @endif
                        </div>

                        <!-- Maintenance Modal -->
                        <div class="modal-container">
                            <div id="maintenance-modal" tabindex="-1" aria-hidden="true"
                                class="modalBg fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 backdrop-blur-sm hidden">
                                <div class="flex min-h-screen items-center justify-center p-4">
                                    <div class="relative w-full max-w-xl transform overflow-hidden rounded-2xl bg-white shadow-2xl transition-all">
                                        <!-- Header -->
                                        <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
                                            <div class="flex items-center justify-between">
                                                <h3 class="text-lg font-medium text-gray-900">Set Maintenance Period</h3>
                                                <button type="button" class="text-gray-400 hover:text-gray-500" onclick="document.getElementById('maintenance-modal').classList.toggle('hidden')">
                                                    <span class="sr-only">Close</span>
                                                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Modal Body -->
                                        <div class="px-6 py-4">
                                            <div class="space-y-4">
                                                <!-- Start Date -->
                                                <div>
                                                    <label for="maintenance_start_date" class="block text-sm font-medium text-gray-700">
                                                        Maintenance Start Date
                                                    </label>
                                                    <div class="mt-1">
                                                        <input type="date" id="maintenance_start_date" name="maintenance_start_date"
                                                            value="{{ $asset->maintenance_start_date }}"
                                                            class="block w-full rounded-md border-2 px-5 py-2 bg-slate-50 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                                                    </div>
                                                </div>

                                                <!-- End Date -->
                                                <div>
                                                    <label for="maintenance_end_date" class="block text-sm font-medium text-gray-700">
                                                        Maintenance End Date
                                                    </label>
                                                    <div class="mt-1">
                                                        <input type="date" id="maintenance_end_date" name="maintenance_end_date"
                                                            value="{{ $asset->maintenance_end_date }}"
                                                            class="block w-full rounded-md border-2 px-5 py-2 bg-slate-50 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Footer -->
                                        <div class="bg-gray-50 px-6 py-4 flex justify-end space-x-3">
                                            <button type="button"
                                                class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                                onclick="document.getElementById('maintenance-modal').classList.toggle('hidden')">
                                                Cancel
                                            </button>
                                            <button type="button"
                                                class="inline-flex items-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                                onclick="document.getElementById('maintenance-modal').classList.toggle('hidden')">
                                                Set Maintenance Period
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Disposed Amount Modal -->
                        <div class="modal-container">
                            <div id="disposed-modal" tabindex="-1" aria-hidden="true"
                                class="modalBg fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 backdrop-blur-sm hidden">
                                <div class="flex min-h-screen items-center justify-center p-4">
                                    <div class="relative w-full max-w-xl transform overflow-hidden rounded-2xl bg-white shadow-2xl transition-all">
                                        <!-- Header -->
                                        <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
                                            <div class="flex items-center justify-between">
                                                <h3 class="text-lg font-medium text-gray-900">Enter Disposed Amount</h3>
                                                <button type="button" class="text-gray-400 hover:text-gray-500" onclick="document.getElementById('disposed-modal').classList.toggle('hidden')">
                                                    <span class="sr-only">Close</span>
                                                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Content -->
                                        <div class="px-6 py-4">
                                            <div class="space-y-4">
                                                <div>
                                                    <label for="disposed_amount" class="block text-sm font-medium text-gray-700">Disposed Amount (₱)</label>
                                                    <div class="mt-1">
                                                        <input type="number" id="disposed_amount" name="disposed_amount" step="0.01" min="0" 
                                                            value="{{ $asset->disposed_amount }}" {{ $asset->disposed_amount ? 'disabled' : '' }}
                                                            class="shadow-sm p-2 border focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md {{ $asset->disposed_amount ? 'bg-gray-100' : '' }}">
                                                    </div>
                                                </div>
                                                <div>
                                                    <label for="disposed_status_id" class="block text-sm font-medium text-gray-700">Disposal Status</label>
                                                    <div class="mt-1">
                                                        <select id="disposed_status_id" name="disposed_status_id" 
                                                            class="shadow-sm p-2 border focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-2 bg-slate-50 border-gray-300 rounded-md">
                                                            @foreach($disposedStatuses as $disposedStatus)
                                                                <option value="{{ $disposedStatus->id }}" 
                                                                    {{ $asset->disposed_status_id == $disposedStatus->id ? 'selected' : '' }}>
                                                                    {{ $disposedStatus->status }}
                                                                </option>
                                                            @endforeach
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Footer -->
                                        <div class="bg-gray-50 px-6 py-4 flex justify-end space-x-3">
                                            <button type="button"
                                                class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                                onclick="document.getElementById('disposed-modal').classList.toggle('hidden')">
                                                Cancel
                                            </button>
                                            <button type="button"
                                                class="inline-flex items-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                                onclick="saveDisposedAmount()">
                                                Save
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Assignment Modal -->
                        <div class="modal-container">
                            <div id="assignment-modal" tabindex="-1" aria-hidden="true"
                                class="modalBg fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 backdrop-blur-sm hidden">
                                <div class="flex min-h-screen items-center justify-center p-4">
                                    <div
                                        class="relative w-full max-w-xl transform overflow-hidden rounded-2xl bg-white shadow-2xl transition-all">
                                        <!-- Header -->
                                        <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
                                            <div class="flex items-center justify-between">
                                                <h2 class="text-xl font-semibold text-gray-800">Asset Assignment</h2>
                                                <button type="button"
                                                    class="rounded-md p-2 text-gray-400 hover:bg-gray-100 hover:text-gray-500 focus:outline-none"
                                                    onclick="document.getElementById('assignment-modal').classList.toggle('hidden')">
                                                    <svg class="h-5 w-5" fill="none" stroke="currentColor"
                                                        viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round"
                                                            stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Body -->
                                        <div class="px-6 py-4">
                                            <div class="space-y-4">
                                                <!-- Assigned To Field -->
                                                <div>
                                                    <label for="modal_assigned_to"
                                                        class="block text-sm font-medium text-gray-700">Assigned
                                                        To</label>
                                                    <div class="mt-1">
                                                        <input type="text" id="modal_assigned_to"
                                                            class="block w-full px-4 py-2 border-2 border-gray-200 hover:shadow-inner rounded-md border-2 bg-slate-50 border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                                            value="{{ old('assigned_to') ?? $asset->assigned_to }}"
                                                            placeholder="Enter assignee name">
                                                    </div>
                                                </div>

                                                <!-- Date Issued Field -->
                                                <div>
                                                    <label for="modal_issued_date"
                                                        class="block text-sm font-medium text-gray-700">Date
                                                        Issued</label>
                                                    <div class="mt-1">
                                                        <input type="date" id="modal_issued_date"
                                                            class="block w-full px-4 py-2 border-2 border-gray-200 hover:shadow-inner rounded-md border-2 bg-slate-50 border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                                            value="{{ old('issued_date') ?? $asset->issued_date }}">
                                                    </div>
                                                </div>

                                                <!-- Notes Field -->
                                                <div>
                                                    <label for="modal_notes"
                                                        class="block text-sm font-medium text-gray-700">Notes</label>
                                                    <div class="mt-1">
                                                        <textarea id="modal_notes"
                                                            class="block w-full px-4 py-2 border-2 border-gray-200 hover:shadow-inner rounded-md border-2 bg-slate-50 border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                                                            rows="3"
                                                            placeholder="Add any additional notes here">{{ old('notes') ?? $asset->notes }}</textarea>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Footer -->
                                        <div class="bg-gray-50 px-6 py-4">
                                            <div class="flex items-center justify-end space-x-3">
                                                <button type="button"
                                                    class="rounded-md border border-2 bg-slate-50 border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                                    onclick="document.getElementById('assignment-modal').classList.toggle('hidden')">
                                                    Cancel
                                                </button>
                                                <button type="button" id="save-assignment-btn"
                                                    class="rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                                    Save Changes
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Form Actions -->
                    <div class="flex justify-end space-x-3 pt-6 border-t">
                        <a href="{{ route('asset.list') }}"
                            class="inline-flex justify-center py-2 px-4 border border-2 bg-slate-50 border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Cancel
                        </a>
                        <button type="submit"
                            class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                            Update Asset
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<x-add-item-modal 
    title="Add New Supplier"
    id="add-supplier-modal"
    route="{{ route('supplier.add') }}"
    field="supplier"
/>

<x-add-item-modal 
    title="Add New Site"
    id="add-site-modal"
    route="{{ route('site.add') }}"
    field="site"
/>

<x-add-item-modal 
    title="Add New Location"
    id="add-location-modal"
    route="{{ route('location.add') }}"
    field="location"
/>

<x-add-item-modal 
    title="Add New Category"
    id="add-category-modal"
    route="{{ route('category.add') }}"
    field="category"
/>

<x-add-item-modal 
    title="Add New Department"
    id="add-department-modal"
    route="{{ route('department.add') }}"
    field="department"
/>

<x-add-item-modal 
    title="Add New Brand"
    id="add-brand-modal"
    route="{{ route('brand.add') }}"
    field="brand"
/>

<x-add-item-modal 
    title="Add New Status"
    id="add-status-modal"
    route="{{ route('status.add') }}"
    field="status"
/>

<x-add-item-modal 
    title="Add New Condition"
    id="add-condition-modal"
    route="{{ route('condition.add') }}"
    field="condition"
/>



<script>
    // Preview image before upload
    document.getElementById('asset_image').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const preview = document.querySelector('.h-32.w-32 img, .h-32.w-32 div');
                if (preview.tagName === 'IMG') {
                    preview.src = e.target.result;
                } else {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'h-32 w-32 object-cover';
                    preview.parentNode.replaceChild(img, preview);
                }
            }
            reader.readAsDataURL(file);
        }
    });

    // Show maintenance modal when maintenance condition is selected
    document.getElementById('condition_id').addEventListener('change', function (e) {
        const selectedOption = e.target.options[e.target.selectedIndex];
        const conditionText = selectedOption.textContent.trim();
        if (conditionText === 'Maintenance') {
            document.getElementById('maintenance-modal').classList.remove('hidden');
        }
    });

    // Show assignment modal when button is clicked
    document.addEventListener('DOMContentLoaded', function() {
        const showAssignmentButton = document.getElementById('show-assignment-modal');
        const assignmentModal = document.getElementById('assignment-modal');
        const saveAssignmentButton = document.getElementById('save-assignment-btn');

        if (showAssignmentButton && assignmentModal) {
            showAssignmentButton.addEventListener('click', function(e) {
                e.preventDefault();
                assignmentModal.classList.remove('hidden');
            });
        }

        if (saveAssignmentButton) {
            saveAssignmentButton.addEventListener('click', function() {
                const assignedTo = document.getElementById('modal_assigned_to').value;
                const issuedDate = document.getElementById('modal_issued_date').value;
                const notes = document.getElementById('modal_notes').value;

                // Update hidden inputs
                document.getElementById('assigned_to').value = assignedTo;
                document.getElementById('issued_date').value = issuedDate;
                document.getElementById('notes').value = notes;

                // Update button text
                document.getElementById('show-assignment-modal').textContent = assignedTo || 'Click to assign';

                // Hide modal
                assignmentModal.classList.add('hidden');
            });
        }
    });

    // Function to refresh select options after adding new item
    function refreshSelectOptions(selectId, route) {
        fetch(route)
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById(selectId);
                const currentValue = select.value;
                select.innerHTML = '<option value="">Select an option</option>';
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.id;
                    option.textContent = item[selectId.replace('_id', '')];
                    if (item.id == currentValue) {
                        option.selected = true;
                    }
                    select.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    // Add event listeners for form submissions
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', function(e) {
            if (this.getAttribute('action').includes('add') && this.closest('[id]')?.id.includes('modal')) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Refresh the corresponding select options
                        const modalId = this.closest('[id]').id;
                        const selectId = modalId.replace('add-', '').replace('-modal', '_id');
                        refreshSelectOptions(selectId, `/${selectId.replace('_id', '')}/list`);
                        
                        // Clear the form
                        this.reset();
                        
                        // Hide the modal
                        document.getElementById(modalId).classList.add('hidden');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        const conditionSelect = document.getElementById('condition_id');
        const disposedModal = document.getElementById('disposed-modal');
    
        conditionSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption.textContent.trim() === 'Disposed') {
                disposedModal.classList.remove('hidden');
            }
        });
    });
    
    function saveDisposedAmount() {
        const disposedAmount = document.getElementById('disposed_amount').value;
        const disposedStatusId = document.getElementById('disposed_status_id').value;
        const conditionDiv = document.getElementById('condition_id').closest('div').parentElement;
        
        // Remove existing disposed amount display if any
        const existingDisplay = conditionDiv.querySelector('.mt-2');
        if (existingDisplay) {
            existingDisplay.remove();
        }

        // Update hidden inputs with the new values
        document.getElementById('hidden_disposed_amount').value = disposedAmount;
        document.getElementById('hidden_disposed_status_id').value = disposedStatusId;

        // Add new disposed amount display if amount exists
        if (disposedAmount) {
            const displayDiv = document.createElement('div');
            displayDiv.className = 'mt-2';
            displayDiv.innerHTML = `<span class="text-sm text-gray-500">Disposed Amount: ₱${parseFloat(disposedAmount).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</span>`;
            conditionDiv.appendChild(displayDiv);
            
            // Disable the input
            document.getElementById('disposed_amount').disabled = true;
            document.getElementById('disposed_amount').classList.add('bg-gray-100');
        }

        // Close the modal
        document.getElementById('disposed-modal').classList.add('hidden');
    }

    // Add event listener for condition change
    document.addEventListener('DOMContentLoaded', function() {
        const conditionSelect = document.getElementById('condition_id');
        const disposedModal = document.getElementById('disposed-modal');
    
        conditionSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption.textContent.trim() === 'Disposed') {
                // Reset the disposed amount input when showing the modal
                document.getElementById('disposed_amount').disabled = false;
                document.getElementById('disposed_amount').classList.remove('bg-gray-100');
                document.getElementById('disposed_amount').value = '';
                // Show the modal
                disposedModal.classList.remove('hidden');
            } else {
                // Clear disposed values when condition is not disposed
                document.getElementById('hidden_disposed_amount').value = '';
                document.getElementById('hidden_disposed_status_id').value = '';
                // Remove the display if it exists
                const existingDisplay = conditionSelect.closest('div').parentElement.querySelector('.mt-2');
                if (existingDisplay) {
                    existingDisplay.remove();
                }
            }
        });
    });
</script>

@endsection
</file>

<file path="resources/views/layouts/sidebar-links.blade.php">
<!-- SIDEBAR LINK/S FOR Department -->
@if(Auth::user()->role->role == 'Department')
<a href="{{ route('asset.list') }}"
    class="block px-4 flex gap-1 py-2 text-gray-700  hover:bg-slate-100
            {{ Request::is('asset/list') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd"
            d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
            clip-rule="evenodd" />
    </svg>
    Asset List
</a>
<a href="{{ route('inventory.list') }}"
    class="block px-4 flex gap-1 py-2 text-gray-700  hover:bg-slate-100
            {{ Request::is('inventory/list') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path
            d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
    </svg>
    Inventory List
</a>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v7h-2l-1 2H8l-1-2H5V5z" clip-rule="evenodd" />
        </svg>
        Request
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('inventory.supply.request') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/supply-request') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Request Supplies</a>
        <a href="{{ route('inventory.my.requests') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/my-requests') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clip-rule="evenodd" />
            </svg>
            My Requests</a>
    </div>
</div>
<a href="{{ route('request.notifications') }}"
    class="block px-4 flex gap-1 py-2 text-gray-700 hover:bg-slate-100
            {{ Request::is('request/notifications') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
    </svg>
    Notifications
    @if(!Request::is('request/notifications'))
        @if($unreadNotificationsCount > 0)
            <span class="ml-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                {{ $unreadNotificationsCount }}
            </span>
        @endif
    @endif
</a>
<a href="{{ route('department.reports') }}"
    class="block px-4 flex gap-1 py-2 text-gray-700 hover:bg-slate-100
            {{ Request::is('department/reports') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd"
            d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm2 10a1 1 0 10-2 0v3a1 1 0 102 0v-3zm2-3a1 1 0 011 1v5a1 1 0 11-2 0v-5a1 1 0 011-1zm4-1a1 1 0 10-2 0v7a1 1 0 102 0V8z"
            clip-rule="evenodd" />
    </svg>
    Reports
</a>
@endif



<!-- SIDEBAR LINK/S FOR MANAGER -->
@if(Auth::user()->role->role == 'Manager')
<a href="{{ route('dashboard') }}"
    class="flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('dashboard') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path
            d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
    </svg>
    Dashboard
</a>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                clip-rule="evenodd" />
        </svg>
        Asset
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('asset.list') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('asset/list') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clip-rule="evenodd" />
            </svg>
            Asset List</a>
        <a href="{{ route('asset.add') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('asset/add') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Add Asset</a>
        <a href="{{ route('lease.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('lease') ? 'bg-slate-200 hover:bg-slate-200' : '' }}"
            onclick="window.location.reload()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M8 5a1 1 0 100 2h5.586l-1.293 1.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L13.586 5H8zM12 15a1 1 0 100-2H6.414l1.293-1.293a1 1 0 10-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L6.414 15H12z" />
            </svg>
            Lease</a>
        <a href="{{ route('maintenance') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('maintenance') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.027 1.028a4 4 0 00-2.171.102l-.47.156a4 4 0 01-2.53 0l-.563-.187a1.993 1.993 0 00-.114-.035l1.063-1.063A3 3 0 009 8.172z" clip-rule="evenodd" />
            </svg>
            Maintenance</a>
        <a href="{{ route('asset.disposed') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('disposed') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            Disposed Assets</a>
    </div>
</div>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path
                d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
        </svg>
        Inventory
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('inventory.list') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/list') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                <path fill-rule="evenodd"
                    d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z"
                    clip-rule="evenodd" />
            </svg>
            Inventory List</a>
        <a href="{{ route('purchase.order.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('purchase/order/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
            </svg>
            Purchase Order</a>
        <a href="{{ route('inventory.stock.in') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/stock/in') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            Stock In</a>
        <a href="{{ route('inventory.stock.out') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/stock/out') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 10.293a1 1 0 010 1.414l-6 6a1 1 0 01-1.414 0l-6-6a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l4.293-4.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
            Stock Out</a>
    </div>
</div>
<a href="{{ route('alerts.index') }}"
    class="border-top flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100 {{ Request::is('alerts') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
    </svg>
    Alerts
    @if(!Request::is('alerts'))
        @php
            $totalAlerts = $totalPastDueAssets->count() + $pendingRequestsCount + $expiringLeasesCount;
        @endphp
        @if($totalAlerts > 0)
            <span class="ml-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                {{ $totalAlerts }}
            </span>
        @endif
    @endif
</a>
<a href="{{ route('requests.index') }}"
    class="flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('requests') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M5 3a2 2 0 012-2h8a2 2 0 012 2v14a2 2 0 01-2 2H7a2 2 0 01-2-2V3zm2 0v14h8V3H7zm3 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1zm0 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1zm0 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z" clip-rule="evenodd" />
    </svg>
    Requests
</a>
<a href="{{ route('reports.index') }}"
    class="border-top flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('reports') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd"
            d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm2 10a1 1 0 10-2 0v3a1 1 0 102 0v-3zm2-3a1 1 0 011 1v5a1 1 0 11-2 0v-5a1 1 0 011-1zm4-1a1 1 0 10-2 0v7a1 1 0 102 0V8z"
            clip-rule="evenodd" />
    </svg>
    Reports
</a>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
                clip-rule="evenodd" />
        </svg>
        Setup
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('category.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('category/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
            </svg>
            Categories</a>
        <a href="{{ route('condition.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('condition/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>
            Conditions</a>
        <a href="{{ route('department.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('department/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z" />
            </svg>
            Departments</a>
        <a href="{{ route('location.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('location/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
            </svg>
            Locations</a>
        <a href="{{ route('site.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('site/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z" clip-rule="evenodd" />
            </svg>
            Sites</a>
        <a href="{{ route('status.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('status/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
            </svg>
            Statuses</a>
        <a href="{{ route('supplier.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('supplier/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707l-2-2A1 1 0 0015 7h-1z" />
            </svg>
            Suppliers</a>
    </div>
</div>
@endif



<!-- SIDEBAR LINKS FOR ADMINISTRATOR -->
@if(Auth::user()->role->role == 'Administrator')
<a href="{{ route('dashboard') }}"
    class="flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('dashboard') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path
            d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
    </svg>
    Dashboard
</a>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                clip-rule="evenodd" />
        </svg>
        Asset
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('asset.list') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('asset/list') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clip-rule="evenodd" />
            </svg>
            Asset List</a>
        <a href="{{ route('asset.add') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('asset/add') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Add Asset</a>
        <a href="{{ route('lease.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('lease') ? 'bg-slate-200 hover:bg-slate-200' : '' }}"
            onclick="window.location.reload()">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M8 5a1 1 0 100 2h5.586l-1.293 1.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L13.586 5H8zM12 15a1 1 0 100-2H6.414l1.293-1.293a1 1 0 10-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L6.414 15H12z" />
            </svg>
            Lease</a>
        <a href="{{ route('maintenance') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('maintenance') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.027 1.028a4 4 0 00-2.171.102l-.47.156a4 4 0 01-2.53 0l-.563-.187a1.993 1.993 0 00-.114-.035l1.063-1.063A3 3 0 009 8.172z" clip-rule="evenodd" />
            </svg>
            Maintenance</a>
        <a href="{{ route('asset.disposed') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('disposed') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
            Disposed Assets</a>
    </div>
</div>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path
                d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
        </svg>
        Inventory
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('inventory.list') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/list') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                <path fill-rule="evenodd"
                    d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z"
                    clip-rule="evenodd" />
            </svg>
            Inventory List</a>
        <a href="{{ route('purchase.order.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('purchase/order/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z" />
            </svg>
            Purchase Order</a>
        <a href="{{ route('inventory.stock.in') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/stock/in') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
            Stock In</a>
        <a href="{{ route('inventory.stock.out') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('inventory/stock/out') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 10.293a1 1 0 010 1.414l-6 6a1 1 0 01-1.414 0l-6-6a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l4.293-4.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
            Stock Out</a>
    </div>
</div>
<a href="{{ route('alerts.index') }}"
    class="border-top flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100 {{ Request::is('alerts') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z" />
    </svg>
    Alerts
    @if(!Request::is('alerts'))
        @php
            $totalAlerts = $totalPastDueAssets->count() + $pendingRequestsCount + $expiringLeasesCount;
        @endphp
        @if($totalAlerts > 0)
            <span class="ml-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                {{ $totalAlerts }}
            </span>
        @endif
    @endif
</a>
<a href="{{ route('requests.index') }}"
    class="flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('requests') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M5 3a2 2 0 012-2h8a2 2 0 012 2v14a2 2 0 01-2 2H7a2 2 0 01-2-2V3zm2 0v14h8V3H7zm3 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1zm0 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1zm0 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z" clip-rule="evenodd" />
    </svg>
    Requests
</a>
<a href="{{ route('reports.index') }}"
    class="border-top flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('reports') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd"
            d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm2 10a1 1 0 10-2 0v3a1 1 0 102 0v-3zm2-3a1 1 0 011 1v5a1 1 0 11-2 0v-5a1 1 0 011-1zm4-1a1 1 0 10-2 0v7a1 1 0 102 0V8z"
            clip-rule="evenodd" />
    </svg>
    Reports
</a>
<div class="relative" x-data="{ open: false }">
    <button @click="open = !open" class="border-top flex items-center w-full px-4 py-2 text-gray-700  hover:bg-slate-100">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
                clip-rule="evenodd" />
        </svg>
        Setup
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-auto" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd" />
        </svg>
    </button>
    <div x-show="open" class="pl-9">
        <a href="{{ route('category.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('category/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
            </svg>
            Categories</a>
        <a href="{{ route('condition.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('condition/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd"
                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                    clip-rule="evenodd" />
            </svg>
            Conditions</a>
        <a href="{{ route('department.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('department/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z" />
            </svg>
            Departments</a>
        <a href="{{ route('location.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('location/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
            </svg>
            Locations</a>
        <a href="{{ route('site.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('site/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z" clip-rule="evenodd" />
            </svg>
            Sites</a>
        <a href="{{ route('status.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('status/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
            </svg>
            Statuses</a>
        <a href="{{ route('supplier.index') }}"
            class="block px-4 py-2 text-gray-700  hover:bg-slate-100 flex items-center
            {{ Request::is('supplier/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707l-2-2A1 1 0 0015 7h-1z" />
            </svg>
            Suppliers</a>
    </div>
</div>
<a href="{{ route('user.index') }}"
    class="flex items-center px-4 py-2 text-gray-700  hover:bg-slate-100
    {{ Request::is('user/index') ? 'bg-slate-200 hover:bg-slate-200' : '' }}">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path
            d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z" />
    </svg>
    Users
</a>
@endif
</file>

<file path="app/Http/Controllers/RequestController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\SupplyRequest;
use App\Models\Department;
use App\Models\RequestedItem;
use App\Models\Brand;
use App\Models\Unit;
use App\Models\Supplier;
use Illuminate\Support\Facades\DB;

class RequestController extends Controller
{
    public function index()
    {
        $departments = Department::all();
        $brands = Brand::all();
        $units = Unit::all();
        $suppliers = Supplier::all();
        
        $query = SupplyRequest::with('department')
            ->select(
                'request_group_id', 
                'department_id', 
                'requester',
                DB::raw('MIN(created_at) as request_date'), // Use MIN of created_at
                DB::raw('COUNT(*) as total_items'),
                DB::raw('MAX(status) as group_status'),
                DB::raw('CASE 
                    WHEN MAX(status) = "pending" THEN 1
                    WHEN MAX(status) = "partially_approved" THEN 2
                    WHEN MAX(status) = "approved" THEN 3
                    WHEN MAX(status) = "rejected" THEN 4
                    ELSE 5 END as status_priority')
            );

        // Only show cancelled requests to departments
        if (auth()->user()->role->role !== 'Department') {
            $query->where('status', '!=', 'cancelled');
        }

        $requests = $query->groupBy('request_group_id', 'department_id', 'requester') // Remove request_date from groupBy
            ->orderBy('status_priority', 'asc')
            ->orderBy('request_date', 'desc')
            ->paginate(10);

        // Get all departments for the filter
        $allDepartments = Department::all();
        $selectedDepartments = [];

        return view('fcu-ams.request.index', compact(
            'requests', 
            'departments', 
            'brands', 
            'units', 
            'suppliers', 
            'allDepartments',
            'selectedDepartments'
        ));
    }

    public function destroy($request_group_id)
    {
        try {
            DB::beginTransaction();
            
            $requests = SupplyRequest::where('request_group_id', $request_group_id)->get();
            
            if ($requests->isEmpty()) {
                return redirect()->back()->with('error', 'Supply request not found.');
            }

            foreach ($requests as $request) {
                $request->delete(); // This will perform soft delete
            }

            DB::commit();
            return redirect()->back()->with('success', 'Supply request deleted successfully.');
        } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->with('error', 'Failed to delete supply request. Please try again.');
        }
    }

    public function storeRequestedItem(Request $request)
    {
        $request->validate([
            'brand_id' => 'required|exists:brands,id',
            'items_specs' => 'required|string',
            'unit_id' => 'required|exists:units,id',
            'quantity' => 'required|integer|min:1',
            'unit_price' => 'required|numeric|min:0',
            'supplier_id' => 'required|exists:suppliers,id',
        ]);

        $requestedItem = RequestedItem::create($request->all());

        return response()->json([
            'success' => true,
            'message' => 'Item request submitted successfully',
            'data' => $requestedItem
        ]);
    }

    public function getBrands()
    {
        $brands = Brand::all();
        return response()->json($brands);
    }

    public function getUnits()
    {
        $units = Unit::all();
        return response()->json($units);
    }

    public function getSuppliers()
    {
        $suppliers = Supplier::all();
        return response()->json($suppliers);
    }
}
</file>

<file path="resources/views/fcu-ams/inventory/myRequests.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">My Supply Requests</h1>
            <div class="w-10"></div>
        </nav>

        <div class="m-3 rounded-md 2xl:max-w-7xl 2xl:mx-auto">
            @include('layouts.messageWithoutTimerForError')
        </div>

        <!-- Requests List -->
        <div class="bg-white m-3 shadow-md rounded-md p-6 2xl:max-w-7xl 2xl:mx-auto">
            <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Request Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Department</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Items</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @forelse($requests as $request)
                            <tr class="hover:bg-gray-50 cursor-pointer" onclick="window.location.href='{{ route('inventory.supply-request.details', ['request_group_id' => $request->request_group_id]) }}'">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ \Carbon\Carbon::parse($request->request_date)->format('M d, Y') }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ $request->department->department }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ $request->items_count }} {{ Str::plural('item', $request->items_count) }}
                                </td>
                                <td class="px-6 py-4">
                                    <span class="px-3 py-1 text-xs font-medium rounded-full
                                        {{ $request->group_status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                           ($request->group_status === 'approved' ? 'bg-green-100 text-green-800' : 
                                           ($request->group_status === 'partially_approved' ? 'bg-blue-100 text-blue-800' :
                                           ($request->group_status === 'cancelled' ? 'bg-gray-100 text-gray-800' :
                                           'bg-red-100 text-red-800'))) }}">
                                        {{ ucfirst(str_replace('_', ' ', $request->group_status)) }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <div class="flex justify-center space-x-2">
                                        <a href="{{ route('inventory.supply-request.details', ['request_group_id' => $request->request_group_id]) }}" 
                                           class="text-green-600 hover:text-blue-900"
                                           onclick="event.stopPropagation()">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                            </svg>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        @empty
                            <tr>
                                <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                                    No requests found
                                </td>
                            </tr>
                        @endforelse
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/request/index.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
            <h1 class="my-auto text-3xl">Supply Request</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Filter Modal -->
        <div id="filterModal" class="fixed inset-0 flex items-center justify-center z-50 hidden backdrop-blur-sm">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity duration-300"></div>
            <div class="bg-white rounded-xl shadow-2xl p-8 w-11/12 md:w-2/3 lg:w-1/2 max-h-[85vh] overflow-y-auto relative z-50 transform transition-all duration-300">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">Filter Requests</h2>
                    <button type="button" onclick="document.getElementById('filterModal').classList.add('hidden')" 
                        class="text-gray-400 hover:text-gray-500 transition-colors duration-200">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <form id="filterForm" action="{{ route('requests.index') }}" method="GET" class="space-y-6">
                    <!-- Departments Filter -->
                    <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Departments</h3>
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                            @foreach($allDepartments as $dept)
                                <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                    <input type="checkbox" name="departments[]" value="{{ $dept->id }}"
                                        class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                        {{ in_array($dept->id, $selectedDepartments) ? 'checked' : '' }}>
                                    <span class="ml-3 text-gray-700">{{ $dept->department }}</span>
                                </label>
                            @endforeach
                        </div>
                    </div>

                    <!-- Modal Actions -->
                    <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
                        <button type="button" 
                            onclick="document.getElementById('filterModal').classList.add('hidden')"
                            class="px-6 py-2.5 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200">
                            Cancel
                        </button>
                        <button type="submit"
                            class="px-6 py-2.5 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                            Apply Filters
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <div class="m-3 rounded-md">
            @include('layouts.messageWithoutTimerForError')
        </div>

        <!-- Requests List -->
        <div class="bg-white m-3 shadow-md rounded-md p-6 ">
            <div class="flex gap-2 justify-between mb-3">
                <h2 class="text-2xl font-semibold text-gray-900">Item Requests</h2>
                <div class="flex gap-2">
                    <button type="button" onclick="document.getElementById('filterModal').classList.remove('hidden')"
                        class="flex gap-1 items-center bg-blue-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />
                        </svg>
                        Filter
                    </button>
                    <button type="button"
                        onclick="window.location.href='{{ route('requests.index') }}'"
                        class="flex gap-1 items-center bg-red-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                        Clear
                    </button>
                </div>
            </div>
            <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Requester</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Department</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Items</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @forelse($requests as $request)
                            <tr class="hover:bg-gray-50 cursor-pointer" onclick="window.location.href='{{ route('inventory.supply-request.details', ['request_group_id' => $request->request_group_id]) }}'" style="cursor: pointer;">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ $request->requester }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ $request->department->department }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ $request->total_items }} {{ Str::plural('item', $request->total_items) }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    {{ \Carbon\Carbon::parse($request->request_date)->format('M d, Y') }}
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm">
                                    <span class="px-3 py-1 text-xs font-medium rounded-full
                                        {{ $request->group_status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                           ($request->group_status === 'approved' ? 'bg-green-100 text-green-800' : 
                                           ($request->group_status === 'partially_approved' ? 'bg-blue-100 text-blue-800' :
                                           ($request->group_status === 'cancelled' ? 'bg-gray-100 text-gray-800' :
                                           'bg-red-100 text-red-800'))) }}">
                                        {{ ucfirst(str_replace('_', ' ', $request->group_status)) }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    <div class="flex justify-center space-x-2">
                                        <a href="{{ route('inventory.supply-request.details', ['request_group_id' => $request->request_group_id]) }}" 
                                           class="text-green-600 hover:text-blue-900">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                            </svg>
                                        </a>
                                        @if(Auth::user()->role->role !== 'Department')
                                            <button onclick="event.stopPropagation(); document.getElementById('delete-request-modal{{ $request->request_group_id }}').classList.remove('hidden')"
                                                class="text-red-600 hover:text-red-900">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                            </button>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                            <!-- Delete Confirmation Modal -->
                            <div id="delete-request-modal{{ $request->request_group_id }}" class="fixed inset-0 flex items-center justify-center z-50 hidden backdrop-blur-sm">
                                <div class="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity duration-300"></div>
                                <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 overflow-hidden">
                                    <!-- Modal Header -->
                                    <div class="bg-white px-6 pt-6 pb-4">
                                        <div class="flex items-center justify-between mb-4">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 bg-red-100 rounded-full p-3 mr-3">
                                                    <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                                    </svg>
                                                </div>
                                                <h3 class="text-lg font-medium text-gray-900">Delete Request</h3>
                                            </div>
                                            <button type="button" onclick="document.getElementById('delete-request-modal{{ $request->request_group_id }}').classList.add('hidden')" 
                                                class="text-gray-400 hover:text-gray-500 focus:outline-none">
                                                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="mt-3">
                                            <p class="text-sm text-gray-500">
                                                Are you sure you want to delete this request? This action cannot be undone and will permanently remove the request from the system.
                                            </p>
                                        </div>
                                    </div>
                                    <!-- Modal Footer -->
                                    <div class="bg-gray-50 px-6 py-4 flex justify-end space-x-3">
                                        <button type="button" 
                                            onclick="document.getElementById('delete-request-modal{{ $request->request_group_id }}').classList.add('hidden')"
                                            class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                                            Cancel
                                        </button>
                                        <form action="{{ route('requests.destroy', $request->request_group_id) }}" method="POST" class="inline-flex">
                                            @csrf
                                            @method('DELETE')
                                            <button type="submit"
                                                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200">
                                                Delete Request
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        @empty
                            <tr>
                                <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                                    No requests found
                                </td>
                            </tr>
                        @endforelse
                    </tbody>
                </table>
            </div>
            @if($requests->hasPages())
            <div class="mt-4 flex items-center justify-between px-4 mb-3">
                <div class="flex items-center gap-2">
                    <a href="{{ $requests->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            <path fill-rule="evenodd" d="M8.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L4.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                        </svg>
                    </a>
                    <a href="{{ $requests->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                        </svg>
                    </a>
                </div>
            
                <span class="text-sm text-gray-700">
                    Page {{ $requests->currentPage() }} of {{ $requests->lastPage() }}
                </span>
            
                <div class="flex items-center gap-2">
                    <a href="{{ $requests->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M7.293 4.293a1 1 0 011.414 0l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414-1.414L11.586 10 7.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </a>
                    <a href="{{ $requests->url($requests->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            <path fill-rule="evenodd" d="M11.293 4.293a1 1 0 011.414 0l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414-1.414L15.586 10l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </a>
                </div>
            </div>
            @endif
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Reset filters on page load/reload
        if (performance.navigation.type === 1) { // Check if it's a page reload
            window.location.href = "{{ route('requests.index') }}";
        }
    });

    window.onclick = function (event) {
        const filterModal = document.getElementById('filterModal');
        if (event.target == filterModal) {
            filterModal.classList.add('hidden');
        }

        // Close delete modals when clicking outside
        document.querySelectorAll('[id^="delete-request-modal"]').forEach(modal => {
            if (event.target == modal) {
                modal.classList.add('hidden');
            }
        });
    }
</script>

@endsection
</file>

<file path="sample_assets_import.csv">
asset_tag_id,model,specs,serial_number,cost,supplier,brand,site,location,category,department,purchase_date,assigned_to,issued_date,notes,,status,condition
_leli,Latitude 5420,Intel i5 11th Gen 8GB RAM 256GB SSD,XYZ123456,45000,Dell Philippines,Dell,Main Campus,IT Office,Laptop,Information Technology,03/03/2024,Gimelle Jen A. Galera,21/03/2024,New IT equipment,,Available,New
_lelii,Latitude 5420,Intel i5 11th Gen 8GB RAM 256GB SSD,XYZ123457,45000,Dell Philippines,Dell,Main Campus,IT Office,Laptop,Information Technology,03/03/2024,Gimelle Jen A. Galera,,Spare unit,,Available,New
_leliii,ProBook 450,Intel i7 12th Gen 16GB RAM 512GB SSD,ABC789012,55000,HP Philippines,HP,Main Campus,HR Department,Laptop,Human Resources,03/03/2024,Gimelle Jen A. Galera,21/03/2024,HR Manager laptop ,,Available,New
_test,_test,_test,_test,55000,_test,_test,_test,_test,_test,_test,03/03/2024,_test,03/03/2024,_test,,Available,New
</file>

<file path="app/Http/Controllers/DashboardController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Role;
use App\Models\User;
use App\Models\Asset;
use App\Models\Inventory;
use App\Models\Supplier;
use App\Models\Category;
use App\Models\AssetEditHistory;
use App\Models\InventoryEditHistory;
use App\Models\SupplyRequest;
use Illuminate\Support\Facades\DB;

class DashboardController extends Controller
{
    public function dashboard(Request $request)
    {
        $totalAssets = Asset::count();
        $totalAssetValue = Asset::sum('cost');
        $totalInventoryStocks = Inventory::count();
        $totalInventoryValue = Inventory::sum(DB::raw('unit_price * quantity'));

        // Get recent supply requests
        $recentRequests = SupplyRequest::select(
                'request_group_id', 
                'requester', 
                'department_id',
                DB::raw('MIN(created_at) as request_date'),
                DB::raw('COUNT(*) as items_count'),
                DB::raw('MAX(status) as group_status'),
                DB::raw('CASE 
                    WHEN MAX(status) = "pending" THEN 1
                    WHEN MAX(status) = "partially_approved" THEN 2
                    WHEN MAX(status) = "approved" THEN 3
                    WHEN MAX(status) = "rejected" THEN 4
                    ELSE 5 END as status_priority')
            )
            ->groupBy('request_group_id', 'requester', 'department_id')
            ->with('department')
            ->orderBy('status_priority', 'asc')
            ->orderBy('request_date', 'desc')
            ->take(5)
            ->get();

        $mostAcquiredCategory = Asset::select('category_id', DB::raw('COUNT(*) as count'))
            ->groupBy('category_id')
            ->orderBy('count', 'desc')
            ->first();

        if ($mostAcquiredCategory) {
            $mostAcquiredCategoryName = Category::find($mostAcquiredCategory->category_id)->category ?? 'No Data Available';
        } else {
            $mostAcquiredCategoryName = 'No Data Available';
        }

        $mostValuedCategory = Asset::select('category_id', DB::raw('SUM(cost) as cost_sum'))
            ->groupBy('category_id')
            ->orderBy('cost_sum', 'desc')
            ->first();

        if ($mostValuedCategory) {
            $mostValuedCategoryName = Category::find($mostValuedCategory->category_id)->category ?? 'No Data Available';
        } else {
            $mostValuedCategoryName = 'No Data Available';
        }

        $mostAcquiredSupplier = Asset::select('supplier_id', DB::raw('COUNT(*) as count'))
            ->groupBy('supplier_id')
            ->orderBy('count', 'desc')
            ->first();

        if ($mostAcquiredSupplier) {
            $mostAcquiredSupplierName = Supplier::find($mostAcquiredSupplier->supplier_id)->supplier ?? 'No Data Available';
        } else {
            $mostAcquiredSupplierName = 'No Data Available';
        }

        $mostValuedSupplier = Asset::select('supplier_id', DB::raw('SUM(cost) as cost_sum'))
            ->groupBy('supplier_id')
            ->orderBy('cost_sum', 'desc')
            ->first();

        if ($mostValuedSupplier) {
            $mostValuedSupplierName = Supplier::find($mostValuedSupplier->supplier_id)->supplier ?? 'No Data Available';
        } else {
            $mostValuedSupplierName = 'No Data Available';
        }

        $assetDistribution = Category::withCount('assets')->get()->map(function ($category) {
            return [
                'label' => $category->category,
                'value' => $category->assets_count,
            ];
        });

        $selectedYear = $request->input('year', now()->year);

        $assetAcquisition = Asset::select(DB::raw('MONTH(purchase_date) as month'), DB::raw('COUNT(*) as count'))
            ->whereYear('purchase_date', $selectedYear)  // Filter by selected year
            ->groupBy('month')
            ->orderBy('month')
            ->get();

        $assetAcquisition->transform(function ($item) {
            $item->month = date('F', mktime(0, 0, 0, $item->month, 1));
            $item->asset_tags = Asset::whereMonth('purchase_date', $item->month)
                ->whereYear('purchase_date', $item->year)  // Add year filter to asset tags
                ->pluck('asset_tag_id')
                ->implode(', ');
            return $item;
        });

        $availableYears = Asset::select(DB::raw('DISTINCT YEAR(purchase_date) as year'))
            ->orderBy('year', 'desc')
            ->pluck('year');

            $mostAcquiredInventorySupplier = Inventory::select('supplier_id', DB::raw('COUNT(*) as count'))
                ->groupBy('supplier_id')
                ->orderBy('count', 'desc')
                ->first();

            if ($mostAcquiredInventorySupplier) {
                $mostAcquiredInventorySupplierName = Supplier::find($mostAcquiredInventorySupplier->supplier_id)->supplier ?? 'No Data Available';
            } else {
                $mostAcquiredInventorySupplierName = 'No Data Available';
            }

            $mostValuedInventorySupplier = Inventory::select('supplier_id', DB::raw('SUM(unit_price * quantity) as value_sum'))
                ->groupBy('supplier_id')
                ->orderBy('value_sum', 'desc')
                ->first();

            if ($mostValuedInventorySupplier) {
                $mostValuedInventorySupplierName = Supplier::find($mostValuedInventorySupplier->supplier_id)->supplier ?? 'No Data Available';
            } else {
                $mostValuedInventorySupplierName = 'No Data Available';
            }

        $recentActions = $this->getRecentActions();

        $analyticsData = [
            [
                'label' => 'Total Assets',
                'value' => $totalAssets,
            ],
            [
                'label' => 'Total Asset Value',
                'value' => $totalAssetValue,
            ],
            [
                'label' => 'Total Inventory Stocks',
                'value' => $totalInventoryStocks,
            ],
            [
                'label' => 'Total Inventory Value',
                'value' => $totalInventoryValue,
            ],
        ];

        $distributionData = [
            [
                'label' => 'Most Acquired Inventory Supplier',
                'value' => $mostAcquiredInventorySupplierName,
            ],
            [
                'label' => 'Most Valued Inventory Supplier',
                'value' => $mostValuedInventorySupplierName,
            ],
        ];

        $depreciationTrends = $this->getDepreciationTrends();
        $assetValueDistribution = $this->getAssetValueDistribution();
        $inventoryValueDistribution = $this->getInventoryValueDistribution();

        return view('fcu-ams/dashboard', compact(
            'totalAssets',
            'totalAssetValue',
            'totalInventoryStocks',
            'totalInventoryValue',
            'assetDistribution',
            'assetAcquisition',
            'recentActions',
            'mostAcquiredCategoryName',
            'mostValuedCategoryName',
            'mostAcquiredSupplierName',
            'mostValuedSupplierName',
            'mostAcquiredInventorySupplierName',
            'mostValuedInventorySupplierName',
            'analyticsData',
            'distributionData',
            'depreciationTrends',
            'assetValueDistribution',
            'inventoryValueDistribution',
            'assetAcquisition', 
            'availableYears', 
            'selectedYear',
            'recentRequests'
        ));
    }

    private function getRecentActions($limit = 6)
    {
        // Recent actions for asset additions
        $assetAdditions = Asset::withTrashed()->select(
            'assets.id', 
            'assets.asset_tag_id as name',
            'assets.created_at',
            DB::raw("'Asset' as type"),
            DB::raw("'added' as action"),
            'createdByUser.id as user_id',
            DB::raw("COALESCE(CONCAT(createdByUser.first_name, ' ', createdByUser.last_name), 'System') as user_name")
        )
        ->leftJoin('users as createdByUser', 'assets.created_by', '=', 'createdByUser.id');

        // Recent actions for asset deletions
        $assetDeletions = Asset::withTrashed()
            ->select(
                'assets.id',
                'assets.asset_tag_id as name',
                'assets.deleted_at as created_at',
                DB::raw("'Asset' as type"),
                DB::raw("'removed' as action"),
                'deletedByUser.id as user_id',
                DB::raw("COALESCE(CONCAT(deletedByUser.first_name, ' ', deletedByUser.last_name), 'System') as user_name")
            )
            ->leftJoin('users as deletedByUser', 'assets.deleted_by', '=', 'deletedByUser.id')
            ->whereNotNull('deleted_at');

        // Recent actions for inventory additions
        $inventoryAdditions = Inventory::withTrashed()->select(
            'inventories.id',
            'inventories.items_specs as name',
            'inventories.created_at',
            DB::raw("'Inventory' as type"),
            DB::raw("'added' as action"),
            'createdByUser.id as user_id',
            DB::raw("COALESCE(CONCAT(createdByUser.first_name, ' ', createdByUser.last_name), 'System') as user_name")
        )
        ->leftJoin('users as createdByUser', 'inventories.created_by', '=', 'createdByUser.id');

        // Recent actions for inventory deletions
        $inventoryDeletions = Inventory::withTrashed()
            ->select(
                'inventories.id',
                'inventories.items_specs as name',
                'inventories.deleted_at as created_at',
                DB::raw("'Inventory' as type"),
                DB::raw("'removed' as action"),
                'deletedByUser.id as user_id',
                DB::raw("COALESCE(CONCAT(deletedByUser.first_name, ' ', deletedByUser.last_name), 'System') as user_name")
            )
            ->leftJoin('users as deletedByUser', 'inventories.deleted_by', '=', 'deletedByUser.id')
            ->whereNotNull('deleted_at');

        // Get edit history for assets
        $assetEditHistory = AssetEditHistory::select(
            'asset_edit_histories.asset_id as id',
            DB::raw("(SELECT asset_tag_id FROM assets WHERE id = asset_edit_histories.asset_id) as name"),
            'asset_edit_histories.created_at',
            DB::raw("'Asset' as type"),
            DB::raw("'edited' as action"),
            'editUser.id as user_id',
            DB::raw("CONCAT(editUser.first_name, ' ', editUser.last_name) as user_name")
        )
        ->join('users as editUser', 'asset_edit_histories.user_id', '=', 'editUser.id');

        // Get edit history for inventories
        $inventoryEditHistory = InventoryEditHistory::select(
            'inventory_edit_histories.inventory_id as id',
            DB::raw("(SELECT items_specs FROM inventories WHERE id = inventory_edit_histories.inventory_id) as name"),
            'inventory_edit_histories.created_at',
            DB::raw("'Inventory' as type"),
            DB::raw("'edited' as action"),
            'editUser.id as user_id',
            DB::raw("CONCAT(editUser.first_name, ' ', editUser.last_name) as user_name")
        )
        ->join('users as editUser', 'inventory_edit_histories.user_id', '=', 'editUser.id');

        // Combine and sort actions
        $recentActions = $assetAdditions
            ->union($assetDeletions)
            ->union($inventoryAdditions)
            ->union($inventoryDeletions)
            ->union($assetEditHistory)
            ->union($inventoryEditHistory)
            ->orderBy('created_at', 'desc')
            ->limit($limit)
            ->get()
            ->map(function ($action) {
                return [
                    'id' => $action->id,
                    'type' => $action->type,
                    'name' => $action->name,
                    'action' => $action->action,
                    'date' => $action->created_at->diffForHumans(),
                    'user' => $action->user_name,
                ];
            });

        return $recentActions;
    }

    private function getDepreciationTrends()
    {
        $depreciationRate = 0.2;

        $depreciationTrends = Asset::select(
            DB::raw('YEAR(purchase_date) as year'),
            DB::raw('SUM(cost) as total_cost')
        )
        ->groupBy('year')
        ->orderBy('year')
        ->get()
        ->map(function ($item) use ($depreciationRate) {
            $yearsSincePurchase = now()->diffInYears($item->year . '-01-01');
            
            $currentValue = $item->total_cost * pow((1 - $depreciationRate), $yearsSincePurchase);
            
            return [
                'year' => $item->year,
                'total_cost' => round($item->total_cost, 2),
                'current_value' => round(max(0, $currentValue), 2),
                'depreciation' => round($item->total_cost - max(0, $currentValue), 2)
            ];
        });

        return $depreciationTrends;
    }

    private function getAssetValueDistribution()
    {
        $assetValueDistribution = Asset::join('categories', 'assets.category_id', '=', 'categories.id')
            ->select(
                'categories.category',
                DB::raw('SUM(assets.cost) as total_value'),
                DB::raw('COUNT(*) as asset_count')
            )
            ->groupBy('categories.category')
            ->orderBy('total_value', 'desc')
            ->get()
            ->map(function ($item) {
                return [
                    'category' => $item->category,
                    'total_value' => round($item->total_value, 2),
                    'asset_count' => $item->asset_count,
                    'percentage' => round(($item->total_value / Asset::sum('cost')) * 100, 2)
                ];
            });

        return $assetValueDistribution;
    }

    private function getInventoryValueDistribution()
    {
        $inventoryValueDistribution = Inventory::join('brands', 'inventories.brand_id', '=', 'brands.id')
            ->select(
                'brands.brand',
                DB::raw('SUM(inventories.unit_price * inventories.quantity) as total_value'),
                DB::raw('COUNT(*) as inventory_count')
            )
            ->groupBy('brands.brand')
            ->orderBy('total_value', 'desc')
            ->get()
            ->map(function ($item) {
                $totalInventoryValue = Inventory::sum(DB::raw('unit_price * quantity'));
                return [
                    'brand' => $item->brand,
                    'total_value' => round($item->total_value, 2),
                    'inventory_count' => $item->inventory_count,
                    'percentage' => round(($item->total_value / $totalInventoryValue) * 100, 2)
                ];
            });

        return $inventoryValueDistribution;
    }
}
</file>

<file path="app/Http/Middleware/CheckUserRole.php">
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;

class CheckUserRole
{
    public function handle($request, Closure $next)
    {
        $allowedRoutesForDepartment = [
            'asset.list',
            'inventory.list',
            'profile.index',
            'profile.update',
            'profile.updatePersonalInformation',
            'asset.view',
            'inventory.view',
            'logout',
            'inventory.supply.request',
            'inventory.supply.request.store',
            'inventory.low.stock',
            'inventory.out.of.stock',
            'inventory.my.requests',
            'inventory.supply-request.details',
            'inventory.search.items',
            'request.notifications',
            'inventory.request.item.store',
            'inventory.supply-request.cancel',
            'brand.add',
            'unit.add',
            'supplier.add',
            'inventory.supply-request.update',
            'department.reports',
        ];

        $deniedRoutesForManager = [
            'user.index',
            'user.add',
            'user.update',
            'user.destroy',
        ];

        if (Auth::check() && Auth::user()->role->role == 'Department' && !in_array(Route::currentRouteName(),
        $allowedRoutesForDepartment)) {
            return redirect()->route('asset.list');
        }

        if (Auth::check() && Auth::user()->role->role == 'Manager' && in_array(Route::currentRouteName(),
        $deniedRoutesForManager)) {
            return redirect()->back()->with('error', 'You do not have permission to access this route.');
        }

        return $next($request);
    }
}
</file>

<file path="resources/views/fcu-ams/inventory/supplyRequest.blade.php">
@extends('layouts.layout')

@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">
<meta name="csrf-token" content="{{ csrf_token() }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
        <!-- Header -->
        <nav class="bg-white flex justify-between py-3 px-4 m-3 2xl:max-w-7xl 2xl:mx-auto shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Request Supplies</h1>
            <div class="w-10"></div>
        </nav>
        <div class="mb-3 2xl:max-w-7xl 2xl:mx-auto">
            @include('layouts.messageWithoutTimerForError')
        </div>
        <div class="request-form bg-white m-3 shadow-md rounded-md p-5 2xl:max-w-7xl 2xl:mx-auto">
            <form id="supply-request-form" method="POST" action="{{ route('inventory.supply.request.store') }}">
                @csrf
                <input type="hidden" id="selected_items" name="selected_items" />
                <div class="">
                    <h3 class="text-lg font-semibold mb-3">Request Details</h3>
                    <div class="mb-4">
                        <label for="item_id" class="block text-gray-700 font-bold mb-2">Items:</label>
                        <button type="button" class="ml-auto rounded-md border-2 border-slate-300 text-left px-3 py-2 bg-slate-50 text-black w-full"
                            onclick="document.getElementById('defaultModal').classList.toggle('hidden')">
                            Add Items to Request
                        </button>
                        <div class="overflow-y-auto max-h-64 hidden mt-3" id="selected-items-container">
                            <div class="max-w-4xl mx-auto overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                                <table class="min-w-full divide-y divide-gray-200 border">
                                    <thead>
                                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Item</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit Price</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Price</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200" id="selected-items">
                                    </tbody>
                                    <tfoot>
                                        <tr class="bg-gray-50">
                                            <td colspan="4" class="px-6 py-4 text-right font-semibold text-gray-900">Overall Total:</td>
                                            <td id="main-overall-total" class="px-6 py-4 text-left font-semibold text-gray-900">₱0.00</td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Modal -->
                    <div id="defaultModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
                        class="modalBg flex overflow-y-auto fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
                        <div class="relative my-auto mx-auto p-4 w-full max-w-4xl h-full md:h-auto">
                            <!-- Modal content -->
                            <div class="relative bg-white rounded-lg shadow-xl dark:bg-white border-0">
                                <!-- Modal header -->
                                <div class="flex items-center justify-between p-4 border-b rounded-t">
                                    <h3 class="text-xl font-semibold text-gray-900">
                                        Add Items to Request
                                    </h3>
                                    <button type="button"
                                        class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center close-modal-button">
                                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                                        </svg>
                                        <span class="sr-only">Close modal</span>
                                    </button>
                                </div>
                                <!-- Modal body -->
                                <div class="p-6">
                                    <div class="sm:flex sm:items-center sm:justify-between mb-6">
                                        <h3 class="text-lg font-medium text-gray-900">Add New Item</h3>
                                    </div>
                                    <div class="flex gap-4 mb-6">
                                        <div class="flex-1 relative">
                                            <input type="text" id="new_item_name" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" placeholder="Item Name" required>
                                            <div id="suggestions-container" class="absolute w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-y-auto hidden">
                                                <!-- Add loading spinner -->
                                                <div id="suggestions-loading" class="hidden">
                                                    <div class="flex items-center justify-center p-4">
                                                        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
                                                        <span class="ml-2 text-gray-600">Searching...</span>
                                                    </div>
                                                </div>
                                                <ul id="suggestions-list" class="py-1">
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="flex-1">
                                            <input type="number" id="new_item_quantity" class="block w-full rounded-md border-0 py-1.5 pl-3 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6" placeholder="Quantity" min="1" required>
                                        </div>
                                        <button type="button" id="add-item-button" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out">
                                            Add Item
                                        </button>
                                        {{-- DO NOT REMOVE THIS BUTTON, IT WILL AFFECT THE FUNCTIONALITY OF THE ITEM NOT FOUND MODAL --}}
                                        <button type="button" id="request-new-item-button" class="hidden px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out">
                                            Request New Item
                                        </button>
                                    </div>
                                    
                                    <!-- Added Items Table -->
                                    <div class="max-w-5xl mx-auto overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                                        <div class="max-h-[400px] overflow-y-auto">
                                            <table class="min-w-full divide-y divide-gray-200" id="added-items-table">
                                                <thead class="sticky top-0 bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                                    <tr>
                                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Item Name</th>
                                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit</th>
                                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit Price</th>
                                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Price</th>
                                                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="added-items-table-body" class="bg-white divide-y divide-gray-200">
                                                </tbody>
                                                <tfoot>
                                                    <tr class="bg-gray-50">
                                                        <td colspan="4" class="px-6 py-4 text-right font-semibold text-gray-900">Overall Total:</td>
                                                        <td id="modal-overall-total" class="px-6 py-4 text-left font-semibold text-gray-900">₱0.00</td>
                                                        <td></td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                                <!-- Modal footer -->
                                <div class="flex items-center justify-end p-4 border-t border-gray-200">
                                    <button type="button"
                                        class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 close-modal-button">
                                        Cancel
                                    </button>
                                    <button type="button"
                                        class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center done-button">
                                        Done
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if(isset($departments))
                        <div class="mb-4">
                            <label for="department_id" class="block text-gray-700 font-bold mb-2">Department:</label>
                            <select id="department_id" name="department_id" class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50" required>
                                <option value="">Select a department</option>
                                @foreach($departments as $department)
                                    <option value="{{ $department->id }}" 
                                        {{ isset($userDepartment) && $userDepartment && $userDepartment->id == $department->id ? 'selected' : '' }}>
                                        {{ $department->department }}
                                    </option>
                                @endforeach
                            </select>
                        </div>
                    @else
                        <div class="alert alert-warning">No departments available</div>
                    @endif

                    <div class="mb-4">
                        <label for="request_date" class="block text-gray-700 font-bold mb-2">Request Date:</label>
                        <input type="datetime-local" id="request_date" name="request_date" class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50" required>
                    </div>

                    <div class="mb-4">
                        <label for="requester" class="block text-gray-700 font-bold mb-2">Requested By:</label>
                        <input type="text" id="requester" name="requester" 
                            value="{{ $user->first_name }} {{ $user->middle_name }} {{ $user->last_name }}" 
                            class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50" required>
                    </div>

                    <div class="mb-4">
                        <label for="notes" class="block text-gray-700 font-bold mb-2">Notes (Optional):</label>
                        <textarea id="notes" name="notes" rows="3" class="w-full p-2 border-2 border-slate-300 rounded-md bg-slate-50"></textarea>
                    </div>
                </div>

                <div class="space-x-2 flex">
                    <button type="button" id="submit-request-button" class="ml-auto rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500
                        transition-all duration-200 hover:scale-105 ease-in hover:shadow-inner text-white">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
    <!-- Empty Field Validation Modal -->
    <div id="validationModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
            <div class="relative bg-white rounded-lg shadow-xl dark:bg-white border-0">
                <div class="flex items-center justify-between p-4 border-b rounded-t">
                    <h3 class="text-xl font-semibold text-gray-900">
                        Validation Error
                    </h3>
                    <button type="button" class="close-validation-modal text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>
                <div class="p-6">
                    <p class="text-gray-700">Please enter both item name and a valid quantity.</p>
                </div>
                <div class="flex items-center justify-end p-4 border-t border-gray-200">
                    <button type="button" class="close-validation-modal text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- Quantity Validation Modal -->
    <div id="quantityValidationModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
            <div class="relative bg-white rounded-lg shadow-xl dark:bg-white border-0">
                <div class="flex items-center justify-between p-4 border-b rounded-t">
                    <h3 class="text-xl font-semibold text-red-600">
                        Quantity Validation Error
                    </h3>
                    <button type="button"
                        class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                    </button>
                </div>
                <div class="p-6">
                    <p class="text-gray-700">The requested quantity exceeds the available stock. Maximum available quantity is <span id="maxQuantitySpan" class="font-semibold"></span>.</p>
                </div>
                <div class="flex items-center justify-end p-4 border-t border-gray-200">
                    <button type="button"
                        class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5">
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- Insufficient Stock Warning Modal -->
    <div id="insufficientStockModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow">
                <!-- Modal header -->
                <div class="flex items-center justify-between p-4 border-b rounded-t">
                    <h3 class="text-xl font-semibold text-yellow-600">
                        ⚠️ Insufficient Stock Warning
                    </h3>
                    <button type="button" onclick="closeInsufficientStockModal()"
                        class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                    </button>
                </div>
                <!-- Modal body -->
                <div class="p-6">
                    <p id="insufficientStockMessage" class="text-gray-700"></p>
                    <p class="mt-4 text-sm text-gray-600">Your request will be forwarded to the admin for approval.</p>
                </div>
                <!-- Modal footer -->
                <div class="flex items-center justify-end p-4 border-t border-gray-200">
                    <button type="button" onclick="closeInsufficientStockModal()"
                        class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5">
                        Continue
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!-- Item Not Found Modal -->
    <div id="itemNotFoundModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
        class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
        <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow">
                <!-- Modal header -->
                <div class="flex items-center justify-between p-4 border-b rounded-t bg-red-500">
                    <h3 class="text-xl font-semibold text-white">
                        Item Not Found in Inventory
                    </h3>
                    <button type="button" class="text-white bg-transparent hover:bg-red-600 hover:text-gray-100 rounded-lg text-sm w-8 h-8 flex items-center justify-center item-not-found-close-button">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                        </svg>
                    </button>
                </div>
                <!-- Modal body -->
                <div class="p-6">
                    <div class="flex items-center space-x-3 mb-4">
                        <div class="flex-shrink-0">
                            <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                        </div>
                        <div>
                            <p id="itemNotFoundMessage" class="text-gray-700 font-medium"></p>
                            <p class="text-sm text-gray-500 mt-1">Please try searching with a different keyword or check if the item name is correct.</p>
                        </div>
                    </div>
                </div>
                <!-- Modal footer -->
                <div class="flex items-center justify-end p-4 border-t border-gray-200">
                    <button type="button" class="text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg text-sm font-medium px-5 py-2.5 hover:scale-105 transition-all duration-200 item-not-found-close-button">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Brand Modal -->
    <x-add-item-modal 
        title="Add New Brand"
        id="add-brand-modal"
        route="{{ route('brand.add') }}"
        field="brand"
    />
    
    <!-- Add Unit Modal -->
    <x-add-item-modal 
        title="Add New Unit"
        id="add-unit-modal"
        route="{{ route('unit.add') }}"
        field="unit"
    />

    <!-- Add Supplier Modal -->
    <x-add-item-modal 
        title="Add New Supplier"
        id="add-supplier-modal"
        route="{{ route('supplier.add') }}"
        field="supplier"
    />
</div>

<script>
    function showQuantityValidationModal(maxQuantity) {
        document.getElementById('maxQuantitySpan').textContent = maxQuantity;
        document.getElementById('quantityValidationModal').classList.remove('hidden');
    }
    
    function closeQuantityValidationModal() {
        document.getElementById('quantityValidationModal').classList.add('hidden');
    }

    function showValidationModal() {
        const modal = document.getElementById('validationModal');
        modal.classList.remove('hidden');
    }
    
    document.querySelectorAll('.close-validation-modal').forEach(button => {
        button.addEventListener('click', function() {
            document.getElementById('validationModal').classList.add('hidden');
        });
    });

    function submitForm() {
        const form = document.getElementById('supply-request-form');
        form.submit();
    }

    function formatPrice(price) {
        if (!price || isNaN(price)) return 'N/A';
        return new Intl.NumberFormat('en-PH', {
            style: 'currency',
            currency: 'PHP'
        }).format(price);
    }

    function calculateTotalPrice(quantity, unitPrice) {
        if (!unitPrice || isNaN(unitPrice)) return 'N/A';
        return quantity * unitPrice;
    }

    function calculateOverallTotal(tableBody) {
        let total = 0;
        const rows = tableBody.querySelectorAll('tr');
        
        rows.forEach(row => {
            const unitPrice = row.getAttribute('data-unit-price');
            const quantity = row.getAttribute('data-quantity');
            
            if (unitPrice && unitPrice !== 'N/A' && !isNaN(unitPrice)) {
                total += parseFloat(unitPrice) * parseFloat(quantity);
            }
        });
        
        return total;
    }

    function updateOverallTotals() {
        // Update modal total
        const modalTableBody = document.getElementById('added-items-table-body');
        const modalTotal = calculateOverallTotal(modalTableBody);
        document.getElementById('modal-overall-total').textContent = formatPrice(modalTotal);

        // Update main view total
        const mainTableBody = document.getElementById('selected-items');
        const mainTotal = calculateOverallTotal(mainTableBody);
        document.getElementById('main-overall-total').textContent = formatPrice(mainTotal);
    }

    function updateSelectedItems() {
        const rows = document.querySelectorAll('#added-items-table tbody tr');
        const items = [];

        rows.forEach(row => {
            const isNewItem = row.getAttribute('data-is-new-item') === 'true';
            const item = {
                name: row.getAttribute('data-name'),
                quantity: row.getAttribute('data-quantity'),
                is_new_item: isNewItem
            };

            if (isNewItem) {
                item.brand_id = row.getAttribute('data-brand-id');
                item.unit_id = row.getAttribute('data-unit-id');
                item.supplier_id = row.getAttribute('data-supplier-id');
                item.unit_price = row.getAttribute('data-unit-price');
            }

            items.push(item);
        });

        document.querySelector('#selected_items').value = JSON.stringify({ items: items });
    }

    function showInsufficientStockModal(itemName, currentStock, requestedQuantity, unit) {
        const message = `Insufficient stock for ${itemName}. Current stock: ${currentStock}. Your request: ${requestedQuantity}.`;
        document.getElementById('insufficientStockMessage').textContent = message;
        document.getElementById('insufficientStockModal').classList.remove('hidden');
    }

    function closeInsufficientStockModal() {
        document.getElementById('insufficientStockModal').classList.add('hidden');
    }

    let searchTimeout = null;
    let selectedItemData = null;

    function updateQuantityField(selectedItem) {
        const quantityInput = document.getElementById('new_item_quantity');
        quantityInput.value = 1;
    }

    function searchItems(query) {
        if (searchTimeout) {
            clearTimeout(searchTimeout);
        }

        const suggestionsContainer = document.getElementById('suggestions-container');
        const loadingSpinner = document.getElementById('suggestions-loading');
        const suggestionsList = document.getElementById('suggestions-list');

        if (!query.trim()) {
            suggestionsContainer.classList.add('hidden');
            return;
        }

        // Show loading spinner and container
        suggestionsContainer.classList.remove('hidden');
        loadingSpinner.classList.remove('hidden');
        suggestionsList.classList.add('hidden');

        searchTimeout = setTimeout(() => {
            console.log('Searching for:', query);
            const url = '{{ url("/inventory/search-items") }}?query=' + encodeURIComponent(query);
            console.log('Fetching from:', url);
            
            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    return response.text().then(text => {
                        try {
                            console.log('Raw response:', text);
                            return JSON.parse(text);
                        } catch (e) {
                            console.error('JSON parse error:', e);
                            throw new Error('Invalid JSON response');
                        }
                    });
                })
                .then(items => {
                    console.log('Parsed items:', items);
                    
                    // Hide loading spinner and show suggestions list
                    loadingSpinner.classList.add('hidden');
                    suggestionsList.classList.remove('hidden');
                    
                    if (!items || items.length === 0) {
                        suggestionsList.innerHTML = '<li class="px-4 py-2 text-gray-500">No items found</li>';
                        return;
                    }

                    suggestionsList.innerHTML = '';
                    items.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'px-4 py-2 hover:bg-blue-50 cursor-pointer';
                        const displayName = `${item.brand} - ${item.items_specs}`;
                        li.innerHTML = `
                            <div class="flex justify-between items-center">
                                <div>
                                    <span class="font-medium">${displayName}</span>
                                    <span class="text-gray-500">(${item.unit})</span>
                                </div>
                                <div class="text-right">
                                    <span class="text-blue-600">${formatPrice(item.price)}</span>
                                    <span class="text-gray-500 ml-2">${item.quantity} left${item.quantity == 0 ? ' <span class="text-red-500 font-medium">(Pre-Order)</span>' : ''}</span>
                                </div>
                            </div>
                        `;
                        li.addEventListener('click', () => {
                            document.getElementById('new_item_name').value = displayName;
                            selectedItemData = {
                                name: displayName,
                                unit: item.unit,
                                price: item.price,
                                quantity: item.quantity
                            };
                            updateQuantityField(selectedItemData);
                            suggestionsContainer.classList.add('hidden');
                            document.getElementById('new_item_quantity').focus();
                        });
                        suggestionsList.appendChild(li);
                    });
                })
                .catch(error => {
                    console.error('Error fetching items:', error);
                    loadingSpinner.classList.add('hidden');
                    suggestionsList.classList.remove('hidden');
                    suggestionsList.innerHTML = '<li class="px-4 py-2 text-red-500">Error loading items</li>';
                });
        }, 300);
    }

    function showItemNotFoundModal(itemName) {
        document.getElementById('itemNotFoundMessage').textContent = `The item "${itemName}" was not found in the inventory.`;
        document.getElementById('itemNotFoundModal').classList.remove('hidden');
    }

    function populateDropdowns() {
        // Populate brands dropdown
        fetch('{{ route("inventory.brands") }}')
            .then(response => response.json())
            .then(brands => {
                const brandSelect = document.getElementById('brand_id_not_found');
                brands.forEach(brand => {
                    const option = new Option(brand.brand, brand.id);
                    brandSelect.add(option);
                });
            });

        // Populate units dropdown
        fetch('{{ route("inventory.units") }}')
            .then(response => response.json())
            .then(units => {
                const unitSelect = document.getElementById('unit_id_not_found');
                units.forEach(unit => {
                    const option = new Option(unit.unit, unit.id);
                    unitSelect.add(option);
                });
            });

        // Populate suppliers dropdown
        fetch('{{ route("inventory.suppliers") }}')
            .then(response => response.json())
            .then(suppliers => {
                const supplierSelect = document.getElementById('supplier_id_not_found');
                suppliers.forEach(supplier => {
                    const option = new Option(supplier.supplier, supplier.id);
                    supplierSelect.add(option);
                });
            });
    }

    function submitRequestedItem(event) {
        event.preventDefault();
        
        const formData = {
            brand_id: document.getElementById('brand_id_not_found').value,
            items_specs: document.getElementById('items_specs_not_found').value,
            unit_id: document.getElementById('unit_id_not_found').value,
            quantity: document.getElementById('quantity_not_found').value,
            unit_price: document.getElementById('unit_price_not_found').value,
            supplier_id: document.getElementById('supplier_id_not_found').value,
        };

        fetch('{{ route("inventory.request.item.store") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('itemNotFoundModal').classList.add('hidden');
                // You might want to show a success message here
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // You might want to show an error message here
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        console.log('DOM Content Loaded');
        // Set default request date to current date and time
        var now = new Date();
        var year = now.getFullYear();
        var month = String(now.getMonth() + 1).padStart(2, '0');
        var day = String(now.getDate()).padStart(2, '0');
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');
        var datetime = `${year}-${month}-${day}T${hours}:${minutes}`;
        document.getElementById('request_date').value = datetime;

        let rowCounter = 0;
        const addItemButton = document.getElementById('add-item-button');
        const addedItemsTableBody = document.getElementById('added-items-table-body');
        const modal = document.getElementById('defaultModal');
        const form = document.getElementById('supply-request-form');

        // Prevent form submission on enter key in the modal
        modal.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (document.activeElement === document.getElementById('new_item_name') ||
                    document.activeElement === document.getElementById('new_item_quantity')) {
                    addItemButton.click();
                }
                return false;
            }
        });

        // Handle form submission
        const supplyRequestForm = document.getElementById('supply-request-form');
        const submitButton = document.getElementById('submit-request-button');

        submitButton.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Get all items from the table
            const rows = document.querySelectorAll('#added-items-table tbody tr');
            if (rows.length === 0) {
                document.getElementById('validationModal').classList.remove('hidden');
                return;
            }

            const items = [];
            rows.forEach(row => {
                const isNewItem = row.getAttribute('data-is-new-item') === 'true';
                const item = {
                    name: row.getAttribute('data-name'),
                    quantity: row.getAttribute('data-quantity'),
                    is_new_item: isNewItem
                };

                if (isNewItem) {
                    item.brand_id = row.getAttribute('data-brand-id');
                    item.unit_id = row.getAttribute('data-unit-id');
                    item.supplier_id = row.getAttribute('data-supplier-id');
                    item.unit_price = row.getAttribute('data-unit-price');
                }

                items.push(item);
            });

            // Set the items data in the hidden input
            document.getElementById('selected_items').value = JSON.stringify({ items: items });
            
            // Submit the form
            supplyRequestForm.submit();
        });

        // Close modal buttons
        document.querySelectorAll('.close-modal-button').forEach(button => {
            button.addEventListener('click', function() {
                modal.classList.add('hidden');
            });
        });

        // Done button
        document.querySelector('.done-button').addEventListener('click', function() {
            updateSelectedItems();
            modal.classList.add('hidden');
        });

        addItemButton.addEventListener('click', function(e) {
            e.preventDefault();
            const itemName = document.getElementById('new_item_name').value.trim();
            const itemQuantity = parseInt(document.getElementById('new_item_quantity').value);

            if (!itemName || !itemQuantity || itemQuantity < 1) {
                showValidationModal();
                return;
            }

            // Check if we have selected item data
            if (!selectedItemData) {
                showItemNotFoundModal(itemName);
                return;
            }

            // Show warning if quantity exceeds available stock
            if (selectedItemData.quantity < itemQuantity) {
                showInsufficientStockModal(itemName, selectedItemData.quantity, itemQuantity, selectedItemData.unit);
            }

            const totalPrice = calculateTotalPrice(itemQuantity, selectedItemData.price);

            const newRow = document.createElement('tr');
            newRow.setAttribute('data-name', itemName);
            newRow.setAttribute('data-quantity', itemQuantity);
            newRow.setAttribute('data-unit', selectedItemData.unit);
            newRow.setAttribute('data-unit-price', selectedItemData.price);
            
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${itemName}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${selectedItemData.unit}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(selectedItemData.price)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${itemQuantity}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(totalPrice)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                    <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </td>
            `;

            // Add delete functionality to the new row
            const deleteButton = newRow.querySelector('.delete-row-button');
            deleteButton.addEventListener('click', function() {
                newRow.remove();
                updateSelectedItems();
                updateOverallTotals();
            });

            addedItemsTableBody.appendChild(newRow);
            updateSelectedItems();
            updateOverallTotals();

            // Clear input fields and selected item data
            document.getElementById('new_item_name').value = '';
            document.getElementById('new_item_quantity').value = '';
            selectedItemData = null;
            document.getElementById('new_item_name').focus();
            
            rowCounter++;
        });

        const requestNewItemButton = document.getElementById('request-new-item-button');
        requestNewItemButton.addEventListener('click', function(e) {
            e.preventDefault();
            const itemName = document.getElementById('new_item_name').value.trim();
            const itemQuantity = document.getElementById('new_item_quantity').value;
        
            // Set default values if empty
            if (itemName) {
                document.getElementById('item_name_not_found').value = itemName;
            }
            if (itemQuantity) {
                document.getElementById('quantity_not_found').value = itemQuantity;
            }
        
            // Show the modal directly
            document.getElementById('itemNotFoundModal').classList.remove('hidden');
            document.getElementById('itemNotFoundMessage').textContent = 'Please provide the details for the new item you want to request.';
        });

        // Add event listener for opening the modal
        document.querySelector('button[onclick*="defaultModal"]').addEventListener('click', function(e) {
            e.preventDefault();
            modal.classList.remove('hidden');
            setTimeout(() => {
                document.getElementById('new_item_name').focus();
            }, 100);
        });

        // Add submit button handler
        document.getElementById('submit-request-button').addEventListener('click', function(e) {
            e.preventDefault();
            submitForm();
        });

        const itemNameInput = document.getElementById('new_item_name');
        const suggestionsContainer = document.getElementById('suggestions-container');

        if (!itemNameInput) {
            console.error('Item name input not found!');
            return;
        }

        // Add input event listener for search
        itemNameInput.addEventListener('input', function() {
            const query = this.value.trim();
            console.log('Input event triggered:', query);
            searchItems(query);
        });

        // Close suggestions when clicking outside
        document.addEventListener('click', function(e) {
            if (!itemNameInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                suggestionsContainer.classList.add('hidden');
            }
        });

        // Add event listeners for the new modal's close buttons
        document.getElementById('itemNotFoundModal').querySelectorAll('.item-not-found-close-button').forEach(button => {
            button.addEventListener('click', function() {
                document.getElementById('itemNotFoundModal').classList.add('hidden');
            });
        });

        // Add form submit handler
        const requestedItemForm = document.querySelector('#itemNotFoundModal form');
        requestedItemForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form data
            const brandSelect = document.getElementById('brand_id_not_found');
            const unitSelect = document.getElementById('unit_id_not_found');
            const brandText = brandSelect.options[brandSelect.selectedIndex].text;
            const itemSpecs = document.getElementById('items_specs_not_found').value;
            const unitText = unitSelect.options[unitSelect.selectedIndex].text;
            const quantity = document.getElementById('quantity_not_found').value;
            const unitPrice = document.getElementById('unit_price_not_found').value;
            const totalPrice = calculateTotalPrice(quantity, unitPrice);

            // Create new row
            const newRow = document.createElement('tr');
            const displayName = `${brandText} - ${itemSpecs}`;
            newRow.setAttribute('data-name', displayName);
            newRow.setAttribute('data-quantity', quantity);
            newRow.setAttribute('data-unit', unitText);
            newRow.setAttribute('data-unit-price', unitPrice);
            newRow.setAttribute('data-is-new-item', 'true');
            newRow.setAttribute('data-brand-id', brandSelect.value);
            newRow.setAttribute('data-unit-id', unitSelect.value);
            newRow.setAttribute('data-supplier-id', document.getElementById('supplier_id_not_found').value);
            
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${displayName}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${unitText}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(unitPrice)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${quantity}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(totalPrice)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                    <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </td>
            `;

            // Add delete functionality to the new row
            const deleteButton = newRow.querySelector('.delete-row-button');
            deleteButton.addEventListener('click', function() {
                newRow.remove();
                updateSelectedItems();
                updateOverallTotals();
            });

            addedItemsTableBody.appendChild(newRow);
            updateSelectedItems();
            updateOverallTotals();

            // Clear form and close modal
            requestedItemForm.reset();
            document.getElementById('itemNotFoundModal').classList.add('hidden');
        });
    });

    // Function to update select options
    function updateSelectOptions(selectId, items) {
        const select = document.getElementById(selectId);
        const currentValue = select.value;
        
        // Clear existing options
        select.innerHTML = '<option value="">Select an option</option>';
        
        // Add new options
        items.forEach(item => {
            const option = document.createElement('option');
            option.value = item.id;
            option.textContent = selectId.includes('brand') ? item.brand : item.unit;
            select.appendChild(option);
        });
        
        // Restore selected value if it still exists
        if (currentValue) {
            select.value = currentValue;
        }
    }
    
    // Event listeners for modal form submissions
    document.querySelectorAll('.modal form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const url = this.getAttribute('action');
            
            fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            })
            .then(response => response.json())
            .then(data => {
            if (data.success) {
                // Update the corresponding select options
                if (url.includes('brand')) {
                    updateSelectOptions('brand_id_not_found', data.brands);
                } else if (url.includes('unit')) {
                    updateSelectOptions('unit_id_not_found', data.units);
                } else if (url.includes('supplier')) {  // Add this condition
                    updateSelectOptions('supplier_id_not_found', data.suppliers);
                }
                    
                    // Close the modal
                    const modal = this.closest('.modal');
                    if (modal) {
                        modal.classList.add('hidden');
                    }
                    
                    // Clear the form
                    this.reset();
                }
            })
            .catch(error => console.error('Error:', error));
        });
    });
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/request/notifications.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
            <h1 class="my-auto text-3xl">Notifications</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                        @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd"
                                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <div class="bg-white m-3 shadow-md rounded-md p-6">
            <div class="space-y-4">
                @forelse($notifications as $notification)
                    <div class="p-4 rounded-lg border-l-4 flex items-start gap-4 {{ 
                        $notification->group_status === 'approved' ? 'border-green-500 bg-green-50' : 
                        ($notification->group_status === 'rejected' ? 'border-red-500 bg-red-50' : 
                        ($notification->group_status === 'cancelled' ? 'border-gray-500 bg-gray-50' : 
                        ($notification->group_status === 'partially_approved' ? 'border-blue-500 bg-blue-50' :
                        'border-yellow-500 bg-yellow-50'))) 
                    }}">
                        <!-- Status Icon -->
                        <div class="flex-shrink-0">
                            @if($notification->group_status === 'approved')
                                <svg class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                            @elseif($notification->group_status === 'rejected')
                                <svg class="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            @elseif($notification->group_status === 'cancelled')
                                <svg class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            @elseif($notification->group_status === 'partially_approved')
                                <svg class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                                </svg>
                            @else
                                <svg class="h-6 w-6 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            @endif
                        </div>
        
                        <!-- Content -->
                        <div class="flex-1">
                            <div class="flex justify-between items-start">
                                <div>
                                    <p class="text-sm font-medium">
                                        Your request #{{ $notification->request_group_id }} {{ 
                                            $notification->group_status === 'approved' ? 'has been approved' : 
                                            ($notification->group_status === 'rejected' ? 'has been rejected' : 
                                            ($notification->group_status === 'cancelled' ? 'has been cancelled' : 
                                            ($notification->group_status === 'partially_approved' ? 'has been partially approved' :
                                            'is pending approval'))) 
                                        }}
                                    </p>
                                    <div class="mt-1">
                                        <span class="text-sm text-gray-600">{{ $notification->items_count }} {{ Str::plural('item', $notification->items_count) }}</span>
                                        <span class="text-gray-400 mx-2">•</span>
                                        <span class="text-sm text-gray-600">{{ $notification->department->department }}</span>
                                    </div>
                                </div>
                                <p class="text-sm text-gray-500">{{ date('M d, Y h:i A', strtotime($notification->first()->updated_at ?? $notification->first()->created_at)) }}</p>
                                
                            </div>
                            <a href="{{ route('inventory.supply-request.details', $notification->request_group_id) }}" 
                                class="inline-flex items-center mt-2 text-sm text-blue-600 hover:text-blue-800">
                                <span>View Details</span>
                                <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                            </a>
                        </div>
                    </div>
                @empty
                    <div class="text-center py-8">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                        </svg>
                        <p class="mt-4 text-lg font-medium text-gray-900">No notifications</p>
                        <p class="mt-1 text-sm text-gray-500">You don't have any notifications at the moment.</p>
                    </div>
                @endforelse
            </div>
        </div>
    </div>
</div>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/inventoryList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/inventory.css') }}">

<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
    
            <h1 class="my-auto text-3xl">Inventory</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="m-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex align-items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 my-auto" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M6 6.878V6a2.25 2.25 0 0 1 2.25-2.25h7.5A2.25 2.25 0 0 1 18 6v.878m-12 0c.235-.083.487-.128.75-.128h10.5c.263 0 .515.045.75.128m-12 0A2.25 2.25 0 0 0 4.5 9v.878m13.5-3A2.25 2.25 0 0 1 19.5 9v.878m0 0a2.246 2.246 0 0 0-.75-.128H5.25c-.263 0-.515.045-.75.128m15 0A2.25 2.25 0 0 1 21 12v6a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 18v-6c0-.98.626-1.813 1.5-2.122" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">Total Items</h3>
                </div>
                <p class="text-3xl font-bold">{{ $totalItems }}</p>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex align-items-center mb-2">
                    <svg class="h-10 w-10 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">Total Value</h3>
                </div>
                <p class="text-3xl font-bold">₱{{ number_format($totalValue, 2) }}</p>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex align-items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" class="h-10 w-10 mr-2" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M15.75 17.25 12 21m0 0-3.75-3.75M12 21V3" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">Low Stocks</h3>
                </div>
                <p class="text-3xl mb-2 font-bold">{{ $lowStock }}</p>
                <a href="{{ route('inventory.low.stock') }}"
                    class="whitespace-nowrap text-orange-600 hover:text-orange-900 flex gap-1">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                    </svg>
                    View 
                </a>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex align-items-center mb-2">
                    <svg class="h-10 w-10 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M18.364 18.364A9 9 0 0 0 5.636 5.636m12.728 12.728A9 9 0 0 1 5.636 5.636m12.728 12.728L5.636 5.636" />
                    </svg>

                    <h3 class="text-lg font-semibold my-auto">Out of Stocks</h3>
                </div>
                <p class="mb-2 text-3xl font-bold">{{ $outOfStock }}</p>
                <a href="{{ route('inventory.out.of.stock') }}"
                    class="text-red-600 hover:text-red-900 flex gap-1 whitespace-nowrap">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                    </svg>
                    View 
                </a>
            </div>
        </div>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="gap-2 flex">
                <div class="import-list my-auto">
                    <button type="button" onclick="document.getElementById('importModal').classList.remove('hidden')"
                        class="flex gap-2 items-center bg-green-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5m-13.5-9L12 3m0 0 4.5 4.5M12 3v13.5" />
                        </svg>
                        Import Excel
                    </button>
                </div>

                <!-- Import Modal -->
                <div id="importModal" class="fixed inset-0 flex items-center justify-center z-50 hidden backdrop-blur-sm">
                    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity duration-300"></div>
                    <div class="bg-white rounded-xl shadow-2xl p-8 w-11/12 md:w-2/3 lg:w-1/2 max-h-[85vh] overflow-y-auto relative z-50 transform transition-all duration-300">
                        <div class="flex justify-between items-center mb-6">
                            <h2 class="text-2xl font-bold text-gray-800">Import Inventory Data</h2>
                            <button type="button" onclick="document.getElementById('importModal').classList.add('hidden')" 
                                class="text-gray-400 hover:text-gray-500 transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>

                        <form action="{{ route('inventory.import') }}" method="POST" enctype="multipart/form-data" class="space-y-6">
                            @csrf
                            <div class="space-y-4">
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                    <h3 class="text-lg font-semibold text-blue-800 mb-2">Import Instructions</h3>
                                    <ul class="list-disc list-inside space-y-2 text-blue-700">
                                        <li>File must be in Excel format (CSV, XLSX, XLS)</li>
                                        <li>Maximum file size is 2MB</li>
                                        <li>Required columns: items_specs, quantity, unit, brand, unit_price, supplier</li>
                                        <li>Optional columns: department, stock_out_date</li>
                                    </ul>
                                </div>

                                <div class="relative border-2 border-gray-300 border-dashed rounded-lg p-6 text-center">
                                    <input type="file" name="file" id="file" accept=".csv,.xlsx,.xls" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer">
                                    <div class="space-y-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                        </svg>
                                        <div class="text-sm text-gray-600">
                                            <label for="file" class="relative cursor-pointer rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                                                <span>Upload a file</span>
                                            </label>
                                            <p class="pl-1">or drag and drop</p>
                                        </div>
                                        <p class="text-xs text-gray-500">CSV, XLSX, XLS up to 2MB</p>
                                    </div>
                                    <div id="file-name" class="mt-2 text-sm text-gray-600"></div>
                                </div>
                            </div>

                            <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
                                <button type="button" 
                                    onclick="document.getElementById('importModal').classList.add('hidden')"
                                    class="px-6 py-2.5 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200">
                                    Cancel
                                </button>
                                <button type="submit"
                                    class="px-6 py-2.5 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                                    Import Data
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="export-list my-auto">
                    <button type="button" onclick="window.location.href='{{ route('inventories.export') }}'"
                        class="flex gap-2 items-center bg-indigo-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 my-auto" viewBox="0 0 384 512">
                            <path fill="#FFFFFF" d="M48 448L48 64c0-8.8 7.2-16 16-16l160 0 0 80c0 17.7 14.3 32 32 32l80 0 0 288c0 8.8-7.2 16-16 16L64 464c-8.8 0-16-7.2-16-16zM64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64
                                64l256 0c35.3 0 64-28.7 64-64l0-293.5c0-17-6.7-33.3-18.7-45.3L274.7 18.7C262.7 6.7 246.5
                                0 229.5 0L64 0zm90.9 233.3c-8.1-10.5-23.2-12.3-33.7-4.2s-12.3 23.2-4.2 33.7L161.6
                                320l-44.5 57.3c-8.1 10.5-6.3 25.5 4.2 33.7s25.5 6.3 33.7-4.2L192 359.1l37.1 47.6c8.1
                                10.5 23.2 12.3 33.7 4.2s12.3-23.2 4.2-33.7L222.4 320l44.5-57.3c8.1-10.5
                                6.3-25.5-4.2-33.7s-25.5-6.3-33.7 4.2L192 280.9l-37.1-47.6z" />
                        </svg>
                        Export to Excel
                    </button>
                </div>
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $inventories->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $inventories->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $inventories->firstItem() }} to {{ $inventories->lastItem() }} of
                    {{ $inventories->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $inventories->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $inventories->url($inventories->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391 24.389 26.5582 24.7842L20.9792 28.5904V24.9184C20.9792 24.3661 20.5315 23.9184 19.9792 23.9184C19.4269 23.9184 18.9792 24.3661 18.9792 24.9184V29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithoutTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md">
            <div class="flex justify-between mb-6">
                <h2 class="text-2xl font-bold my-auto">Inventory List</h2>
                <div class="searchBox flex gap-2">
                    <button type="button" onclick="document.getElementById('filterModal').classList.remove('hidden')"
                        class="flex gap-1 items-center bg-blue-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />
                        </svg>
                        Filter
                    </button>

                    <!-- Filter Modal -->
                    <div id="filterModal" class="fixed inset-0 flex items-center justify-center z-50 hidden backdrop-blur-sm">
                        <div class="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity duration-300"></div>
                        <div class="bg-white rounded-xl shadow-2xl p-8 w-11/12 md:w-2/3 lg:w-1/2 max-h-[85vh] overflow-y-auto relative z-50 transform transition-all duration-300">
                            <div class="flex justify-between items-center mb-6">
                                <h2 class="text-2xl font-bold text-gray-800">Filter Inventory</h2>
                                <button type="button" onclick="document.getElementById('filterModal').classList.add('hidden')" 
                                    class="text-gray-400 hover:text-gray-500 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <form id="filterForm" action="{{ route('inventory.list') }}" method="GET" class="space-y-6">
                                <!-- Brands Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Brands</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($brands as $brand)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="brands[]" value="{{ $brand->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ isset($selectedBrands) && in_array($brand->id, $selectedBrands) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $brand->brand }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Modal Actions -->
                                <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
                                    <button type="button" 
                                        onclick="document.getElementById('filterModal').classList.add('hidden')"
                                        class="px-6 py-2.5 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200">
                                        Cancel
                                    </button>
                                    <button type="submit"
                                        class="px-6 py-2.5 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                                        Apply Filters
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="flex gap-2">
                        <div class="relative flex-1">
                            <input type="text" name="search" value="{{ request('search') }}"
                                class="w-full rounded-md border-0 py-2 pl-2 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                                placeholder="Search for supplies..." id="searchInput">
                            <div class="absolute inset-y-0 right-0 flex items-center pr-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" 
                                    class="w-5 h-5 text-gray-400">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607z" />
                                </svg>
                            </div>
                        </div>
                        <button type="button" onclick="window.location.href='{{ route('inventory.list') }}'"
                            class="flex gap-1 items-center bg-red-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Clear
                        </button>
                    </div>
                </div>
            </div>
            <div class="overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Unique Tag</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'unique_tag', 'direction' => ($direction == 'asc' && $sort == 'unique_tag') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Items & Specs</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'items_specs', 'direction' => ($direction == 'asc' && $sort == 'items_specs') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Brand</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'brand_name', 'direction' => ($direction == 'asc' && $sort == 'brand_name') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Quantity</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'quantity', 'direction' => ($direction == 'asc' && $sort == 'quantity') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Unit</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'unit', 'direction' => ($direction == 'asc' && $sort == 'unit') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Unit Price</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'unit_price', 'direction' => ($direction == 'asc' && $sort == 'unit_price') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Total Item Price</span>
                                    <a class="ml-2" href="{{ route('inventory.list', ['sort' => 'total_item_price', 'direction' => ($direction == 'asc' && $sort == 'total_item_price') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-center text-xs font-medium uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @if($inventories->isEmpty())
                            <tr>
                                <td colspan="8" class="px-6 py-8 whitespace-nowrap text-center">
                                    <div class="flex flex-col items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 text-gray-400 mb-4">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5m8.25 3v6.75m0 0l-3-3m3 3l3-3M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" />
                                        </svg>
                                        <p class="text-gray-500 text-xl font-medium mb-1">No items found</p>
                                        <p class="text-gray-400">No inventory items are available at the moment.</p>
                                    </div>
                                </td>
                            </tr>
                        @else
                            @foreach($inventories as $inventory)
                                <tr class="hover:bg-gray-50 transition-colors duration-200"
                                    onclick="handleRowClick(event, '{{ route('inventory.view', $inventory->id) }}')">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $inventory->unique_tag }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $inventory->items_specs }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $inventory->brand->brand }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $inventory->quantity }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $inventory->unit->unit }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱{{ number_format($inventory->unit_price, 2) }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱{{ number_format($inventory->quantity * $inventory->unit_price, 2) }}</td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex justify-center space-x-2">
                                            <a href="{{ route('inventory.view', ['id' => $inventory->id]) }}"
                                                class="text-green-600 hover:text-green-900" onclick="event.stopPropagation();">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                        d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                        d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                                                </svg>
                                            </a>
                                            @if(auth()->user()->role->role !== 'Department')
                                            <a href="{{ route('inventory.stock.in.edit', ['id' => $inventory->id]) }}"
                                                class="text-blue-600 hover:text-blue-900" onclick="event.stopPropagation();">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                        d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                                </svg>
                                            </a>
                                            <button type="button" class="text-red-600 hover:text-red-900"
                                                onclick="event.stopPropagation(); document.getElementById('delete-inventory-modal{{ $inventory->id }}').classList.toggle('hidden')">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                                    stroke-width="1.5" stroke="currentColor" class="size-6">
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                        d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                                </svg>
                                            </button>
                                            @endif
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        @endif
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@include('layouts.modals.inventory.deleteInventory')
<script src="{{ asset('js/chart.js') }}"></script>
<script>
    function clearSearch() {
        document.querySelector('input[name="search"]').value = '';
        document.querySelector('form').submit();
    }

</script>
<script>
    function clearSearch() {
        document.querySelector('input[name="search"]').value = '';
        document.querySelector('form').submit();
    }
</script>
<script>
    window.onload = function () {
        const urlParams = new URLSearchParams(window.location.search);
        if (window.performance.navigation.type === 1 && urlParams.has('search')) {
            window.location.href = "{{ route('inventory.list') }}";
        }
    };
</script>
<script>
    document.querySelector('select[name="brand"]').addEventListener('change', function () {
    document.getElementById('searchboxForm').submit();
});

</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Reset filters on page load/reload
        if (window.performance && window.performance.navigation.type === window.performance.navigation.TYPE_RELOAD) {
            window.location.href = "{{ route('inventory.list') }}";
            return;
        }

        const searchInput = document.getElementById('searchInput');
        const tableBody = document.querySelector('table tbody');
        let typingTimer;
        const doneTypingInterval = 300;

        searchInput.addEventListener('input', function() {
            clearTimeout(typingTimer);

            // If the search input is empty, reload the page
            if (this.value.trim() === '') {
                window.location.href = "{{ route('inventory.list') }}";
                return;
            }

            typingTimer = setTimeout(performSearch, doneTypingInterval);
        });

        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
            }
        });

        function performSearch() {
            const searchQuery = searchInput.value;
            
            fetch('/inventory/search?search=' + encodeURIComponent(searchQuery), {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                updateTable(data.inventories);
            })
            .catch(error => console.error('Error:', error));
        }

        function updateTable(inventories) {
            tableBody.innerHTML = '';
            
            inventories.forEach(inventory => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors duration-200';
                row.onclick = () => window.location.href = `/inventory/${inventory.id}/view`;
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${inventory.unique_tag}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${inventory.items_specs}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${inventory.brand_name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${inventory.quantity}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${inventory.unit_name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱${Number(inventory.unit_price).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱${Number(inventory.quantity * inventory.unit_price).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex justify-center space-x-2">
                            <a href="/inventory/${inventory.id}/view" class="text-green-600 hover:text-green-900" onclick="event.stopPropagation();">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                                </svg>
                            </a>
                            @if(auth()->user()->role->role !== 'Department')
                            <a href="/inventory/stock/in/${inventory.id}/edit" class="text-blue-600 hover:text-blue-900" onclick="event.stopPropagation();">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                </svg>
                            </a>
                            <button type="button" class="text-red-600 hover:text-red-900" onclick="event.stopPropagation(); document.getElementById('delete-inventory-modal${inventory.id}').classList.toggle('hidden')">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                </svg>
                            </button>
                            @endif
                        </div>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
        }
    });
</script>

<script>
    window.onclick = function (event) {
        const modal = document.getElementById('filterModal');
        if (event.target == modal) {
            modal.classList.add('hidden');
        }
    }
</script>

<script>
    // File upload handling
    document.addEventListener('DOMContentLoaded', function() {
        const fileInput = document.getElementById('file');
        const fileNameDisplay = document.getElementById('file-name');
        const importModal = document.getElementById('importModal');

        fileInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const fileName = this.files[0].name;
                fileNameDisplay.textContent = `Selected file: ${fileName}`;
                
                // Validate file size (2MB = 2 * 1024 * 1024 bytes)
                if (this.files[0].size > 2 * 1024 * 1024) {
                    alert('File size exceeds 2MB limit. Please choose a smaller file.');
                    this.value = '';
                    fileNameDisplay.textContent = '';
                }
            } else {
                fileNameDisplay.textContent = '';
            }
        });

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target == importModal) {
                importModal.classList.add('hidden');
                fileInput.value = '';
                fileNameDisplay.textContent = '';
            }
        }
    });
</script>

<script>
    function handleRowClick(event, url) {
        // Check if the click is on or inside an action button
        if (!event.target.closest('button') && !event.target.closest('a')) {
            window.location.href = url;
        }
    }
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/asset/assetList.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
            <h1 class="my-auto text-3xl">Asset</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="m-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg shadow-md p-6 col-span-2">
                <div class="flex align-items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mr-2" viewBox="0 0 20 20"
                        fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                            clip-rule="evenodd" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">Total Asset</h3>
                </div>
                <p class="text-3xl font-bold">{{ $totalAssets }}</p>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6 col-span-2">
                <div class="flex align-items-center mb-2">
                    <svg class="h-10 w-10 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">Total Cost</h3>
                </div>
                <p class="text-3xl font-bold">₱{{ number_format($totalCost, 2) }}</p>
            </div>
            <!-- <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex align-items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" class="h-10 w-10 mr-2" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M15.75 17.25 12 21m0 0-3.75-3.75M12 21V3" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">Low Asset Value</h3>
                </div>
                <p class="text-3xl font-bold">{{ $lowValueAssets }}</p>
            </div>
            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex align-items-center mb-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mr-2" fill="none" viewBox="0 0 24 24"
                        stroke-width="1.5" stroke="currentColor" class="size-6">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M8.25 6.75 12 3m0 0 3.75 3.75M12 3v18" />
                    </svg>
                    <h3 class="text-lg font-semibold my-auto">High Asset Value</h3>
                </div>
                <p class="text-3xl font-bold">{{ $highValueAssets }}</p>
            </div> -->
        </div>
        <div class="mb-1 flex justify-between m-3 rounded-md">
            <div class="space-x-2 flex">
                <div class="import-list my-auto">
                    <button type="button" onclick="document.getElementById('importModal').classList.remove('hidden')"
                        class="flex gap-2 items-center bg-green-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5m-13.5-9L12 3m0 0 4.5 4.5M12 3v13.5" />
                        </svg>
                        Import Excel
                    </button>
                </div>

                <!-- Import Modal -->
                <div id="importModal"
                    class="fixed inset-0 flex items-center justify-center z-50 hidden backdrop-blur-sm">
                    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity duration-300"></div>
                    <div
                        class="bg-white rounded-xl shadow-2xl p-8 w-11/12 md:w-2/3 lg:w-1/2 max-h-[85vh] overflow-y-auto relative z-50 transform transition-all duration-300">
                        <div class="flex justify-between items-center mb-6">
                            <h2 class="text-2xl font-bold text-gray-800">Import Asset Data</h2>
                            <button type="button"
                                onclick="document.getElementById('importModal').classList.add('hidden')"
                                class="text-gray-400 hover:text-gray-500 transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>

                        <form action="{{ route('inventory.asset.import') }}" method="POST"
                            enctype="multipart/form-data" class="space-y-6">
                            @csrf
                            <div class="space-y-4">
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                    <h3 class="text-lg font-semibold text-blue-800 mb-2">Import Instructions</h3>
                                    <ul class="list-disc list-inside space-y-2 text-blue-700">
                                        <li>File must be in Excel format (CSV, XLSX, XLS)</li>
                                        <li>Maximum file size is 2MB</li>
                                        <li>
                                            Required columns: `asset_tag_id`, `model`, `serial_number`, `cost`, `supplier`, `brand`, `site`, `location`, `category`, `department`, `purchase_date`
                                        </li>
                                        <li>
                                            Optional columns: `specs`, `assigned_to`, `issued_date`, `notes`, `condition`, `status`
                                        </li>
                                        <li>Ensure column headers in your file match these names exactly.</li>
                                        <li>Date format: YYYY-MM-DD or MM/DD/YYYY.</li>
                                    </ul>
                                </div>

                                <div class="relative border-2 border-gray-300 border-dashed rounded-lg p-6 text-center">
                                    <input type="file" name="file" id="file" accept=".csv,.xlsx,.xls"
                                        class="absolute inset-0 w-full h-full opacity-0 cursor-pointer">
                                    <div class="space-y-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400"
                                            fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                                        </svg>
                                        <div class="text-sm text-gray-600">
                                            <label for="file"
                                                class="relative cursor-pointer rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                                                <span>Upload a file</span>
                                            </label>
                                            <p class="pl-1">or drag and drop</p>
                                        </div>
                                        <p class="text-xs text-gray-500">CSV, XLSX, XLS up to 2MB</p>
                                    </div>
                                    <div id="file-name" class="mt-2 text-sm text-gray-600"></div>
                                </div>
                            </div>

                            <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
                                <button type="button"
                                    onclick="document.getElementById('importModal').classList.add('hidden')"
                                    class="px-6 py-2.5 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200">
                                    Cancel
                                </button>
                                <button type="submit"
                                    class="px-6 py-2.5 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                                    Import Data
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                @if(Auth::user()->role->role != 'Department')
                <div class="export-list my-auto">
                    <button type="button" onclick="window.location.href='{{ route('asset.export') }}'"
                        class="flex gap-2 items-center bg-indigo-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 my-auto" viewBox="0 0 384 512">
                            <path fill="#FFFFFF" d="M48 448L48 64c0-8.8 7.2-16 16-16l160 0 0 80c0 17.7 14.3 32 32 32l80 0 0 288c0 8.8-7.2 16-16 16L64 464c-8.8 0-16-7.2-16-16zM64 0C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64
                                64l256 0c35.3 0 64-28.7 64-64l0-293.5c0-17-6.7-33.3-18.7-45.3L274.7 18.7C262.7 6.7 246.5
                                0 229.5 0L64 0zm90.9 233.3c-8.1-10.5-23.2-12.3-33.7-4.2s-12.3 23.2-4.2 33.7L161.6
                                320l-44.5 57.3c-8.1 10.5-6.3 25.5 4.2 33.7s25.5 6.3 33.7-4.2L192 359.1l37.1 47.6c8.1
                                10.5 23.2 12.3 33.7 4.2s12.3-23.2 4.2-33.7L222.4 320l44.5-57.3c8.1-10.5
                                6.3-25.5-4.2-33.7s-25.5-6.3-33.7 4.2L192 280.9l-37.1-47.6z"/>
                        </svg>
                        Export to Excel
                    </button>
                </div>
                @endif
            </div>
            <div class="pagination-here flex justify-between align-items-center">
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $assets->url(1) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="previous">
                                        <g id="previous_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M28.9682 15.5438L39.257 8.52571C41.2485 7.16707 43.9486 8.59383 43.9486 11.0038V36.9158C43.9486 39.3272 41.249 40.7548 39.257 39.3958L20.2635 26.4382C18.5169 25.2492 18.5171 22.6726 20.2631 21.4817L26.9682 16.908V11.0064C26.9682 10.2023 26.0683 9.7271 25.4042 10.1802L6.43638 23.134C5.85532 23.5311 5.85532 24.3887 6.43618 24.7866L25.4038 37.7403C26.0683 38.1936 26.9682 37.7185 26.9682 36.9144V35.9744C26.9682 35.4221 27.4159 34.9744 27.9682 34.9744C28.5205 34.9744 28.9682 35.4221 28.9682 35.9744V36.9144C28.9682 39.3259 26.2685 40.7513 24.2762 39.3922L5.30706 26.4374C3.56509 25.2441 3.56509 22.6737 5.30824 21.4826L24.2766 8.52831C26.2685 7.16942 28.9682 8.59489 28.9682 11.0064V15.5438ZM26.9682 19.329V23.0024C26.9682 23.5547 27.4159 24.0024 27.9682 24.0024C28.5205 24.0024 28.9682 23.5547 28.9682 23.0024V17.9648L40.3841 10.1779C41.048 9.72496 41.9486 10.2009 41.9486 11.0038V36.9158C41.9486 37.7205 41.0482 38.1967 40.3842 37.7437L21.3892 24.785C20.8083 24.3898 20.8083 23.5308 21.3901 23.1339L26.9682 19.329Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link my-auto" href="{{ $assets->previousPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="previous"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,3V21L5,12Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="text-center my-auto pr-4 pl-4 font_bold">
                    Showing {{ $assets->firstItem() }} to {{ $assets->lastItem() }} of
                    {{ $assets->total() }} items
                </div>
                <div class="flex align-items-center">
                    <ul class="pagination my-auto flex">
                        <li class="page-item p-1">
                            <a class="page-link" href="{{ $assets->nextPageUrl() }}">
                                <svg fill="#000000" class="w-5 h-5 my-auto" viewBox="0 0 24 24" id="next"
                                    data-name="Line Color" xmlns="http://www.w3.org/2000/svg" class="icon line-color">
                                    <path id="primary" d="M17,12,5,21V3Z"
                                        style="fill: none; stroke: rgb(0, 0, 0); stroke-linecap: round; stroke-linejoin: round; stroke-width: 2;">
                                    </path>
                                </svg>
                            </a>
                        </li>
                        <li class="page-item p-1 my-auto">
                            <a class="page-link" href="{{ $assets->url($assets->lastPage()) }}">
                                <svg class="w-5 h-5 my-auto" viewBox="0 0 48 48" fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <g id="next">
                                        <g id="next_2">
                                            <path id="Combined Shape" fill-rule="evenodd" clip-rule="evenodd"
                                                d="M18.9792 32.3759L8.69035 39.3951C6.69889 40.7537 3.99878 39.3269 3.99878 36.917V11.005C3.99878 8.59361 6.69843 7.166 8.69028 8.52489L27.6843 21.4809C29.4304 22.672 29.4304 25.249 27.6843 26.4371L20.9792 31.0114V36.9144C20.9792 37.7185 21.8791 38.1937 22.5432 37.7406L41.5107 24.787C42.0938 24.3882 42.0938 23.5316 41.5112 23.1342L22.5436 10.1805C21.8791 9.72714 20.9792 10.2023 20.9792 11.0064V11.9464C20.9792 12.4987 20.5315 12.9464 19.9792 12.9464C19.4269 12.9464 18.9792 12.4987 18.9792 11.9464V11.0064C18.9792 8.59492 21.6789 7.16945 23.6711 8.52861L42.6387 21.4823C44.3845 22.6732 44.3845 25.2446 42.6391 26.4382L23.6707 39.3925C21.6789 40.7514 18.9792 39.3259 18.9792 36.9144V32.3759ZM18.9792 29.9548L7.56322 37.7429C6.89939 38.1958 5.99878 37.7199 5.99878 36.917V11.005C5.99878 10.2003 6.89924 9.72409 7.56321 10.1771L26.5573 23.1331C27.1391 23.53 27.1391  24.389 26.5573 24.785L18.9792 29.9548Z"
                                                fill="#000000" />
                                        </g>
                                    </g>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="m-3">
            @include('layouts.messageWithoutTimerForError')
        </div>
        <div class="bg-white p-5 shadow-md m-3 rounded-md">
            <div class="flex justify-between mb-6">
                <h2 class="text-2xl font-bold my-auto">Asset List</h2>
                <div class="searchBox flex gap-2">
                    <button type="button" onclick="document.getElementById('filterModal').classList.remove('hidden')"
                        class="flex gap-1 items-center bg-blue-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />
                        </svg>
                        Filter
                    </button>
                    
                    <!-- Filter Modal -->
                    <div id="filterModal" class="fixed inset-0 flex items-center justify-center z-50 hidden backdrop-blur-sm">
                        <div class="fixed inset-0 bg-gray-500 bg-opacity-50 transition-opacity duration-300"></div>
                        <div class="bg-white rounded-xl shadow-2xl p-8 w-11/12 md:w-2/3 lg:w-1/2 max-h-[85vh] overflow-y-auto relative z-50 transform transition-all duration-300">
                            <div class="flex justify-between items-center mb-6">
                                <h2 class="text-2xl font-bold text-gray-800">Filter Assets</h2>
                                <button type="button" onclick="document.getElementById('filterModal').classList.add('hidden')" 
                                    class="text-gray-400 hover:text-gray-500 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <form id="filterForm" action="{{ route('asset.list') }}" method="GET" class="space-y-6">
                                <!-- Condition Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Conditions</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allConditions as $condition)
                                            <label
                                                class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="conditions[]"
                                                    value="{{ $condition->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($condition->id, $selectedConditions) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $condition->condition }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Status Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Statuses</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allStatuses as $status)
                                            <label
                                                class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="statuses[]" value="{{ $status->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($status->id, $selectedStatuses) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $status->status }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>
                            
                                <!-- Categories Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Categories</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allCategories as $cat)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="categories[]" value="{{ $cat->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($cat->id, $selectedCategories) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $cat->category }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Departments Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Departments</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allDepartments as $dept)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="departments[]" value="{{ $dept->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($dept->id, $selectedDepartments) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $dept->department }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Locations Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Locations</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allLocations as $loc)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="locations[]" value="{{ $loc->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($loc->id, $selectedLocations) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $loc->location }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Sites Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Sites</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allSites as $site_item)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="sites[]" value="{{ $site_item->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($site_item->id, $selectedSites) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $site_item->site }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Suppliers Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Suppliers</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allSuppliers as $sup)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="suppliers[]" value="{{ $sup->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($sup->id, $selectedSuppliers) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $sup->supplier }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Brands Filter -->
                                <div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Brands</h3>
                                    <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                        @foreach($allBrands as $brand)
                                            <label class="inline-flex items-center hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200">
                                                <input type="checkbox" name="brands[]" value="{{ $brand->id }}"
                                                    class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                                                    {{ in_array($brand->id, $selectedBrands) ? 'checked' : '' }}>
                                                <span class="ml-3 text-gray-700">{{ $brand->brand }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>

                                <!-- Modal Actions -->
                                <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
                                    <button type="button" 
                                        onclick="document.getElementById('filterModal').classList.add('hidden')"
                                        class="px-6 py-2.5 text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300 transition-all duration-200">
                                        Cancel
                                    </button>
                                    <button type="submit"
                                        class="px-6 py-2.5 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200">
                                        Apply Filters
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <div class="relative flex-1">
                            <input type="text" name="search" value="{{ request('search') }}"
                                class="w-full rounded-md border-0 py-2 pl-2 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                                placeholder="Search for assets..." id="searchInput">
                            <div class="absolute inset-y-0 right-0 flex items-center pr-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" 
                                    class="w-5 h-5 text-gray-400">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                                </svg>
                            </div>
                        </div>
                        <button type="button" onclick="window.location.href='{{ route('asset.list') }}'"
                            class="flex gap-1 items-center bg-red-600 text-white hover:scale-105 transition-all duration-200 ease-in rounded-md px-4 p-2">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                            </svg>
                            Clear
                        </button>
                    </div>
                </div>
            </div>
            <div class="overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Asset Tag ID</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'asset_tag_id', 'direction' => ($direction == 'asc' && $sort == 'asset_tag_id') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Assigned To</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'assigned_to', 'direction' => ($direction == 'asc' && $sort == 'assigned_to') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Cost</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'cost', 'direction' => ($direction == 'asc' && $sort == 'cost') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Supplier</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'supplier_name', 'direction' => ($direction == 'asc' && $sort == 'supplier_name') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Category</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'category_name', 'direction' => ($direction == 'asc' && $sort == 'category_name') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Status</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'status_name', 'direction' => ($direction == 'asc' && $sort == 'status_name') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <span>Condition</span>
                                    <a class="ml-2" href="{{ route('asset.list', ['sort' => 'condition_name', 'direction' => ($direction == 'asc' && $sort == 'condition_name') ? 'desc' : 'asc']) }}">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                        </svg>
                                    </a>
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3 bg-gradient-to-r from-blue-400 to-blue-400 text-white text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach($assets as $asset)
                            <tr class="hover:bg-gray-50 transition-colors duration-200 cursor-pointer" onclick="window.location.href='{{ route('asset.view', $asset->id) }}'">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->asset_tag_id }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->assigned_to ?: 'Not currently assigned' }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱{{ number_format($asset->cost, 2) }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->supplier_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $asset->category_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-6 py-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                        @if($asset->status_name == 'Available') bg-green-100 text-green-800 
                                        @elseif($asset->status_name == 'Leased') bg-blue-100 text-blue-800
                                        @else bg-red-100 text-red-800 
                                        @endif">
                                        {{ $asset->status_name }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 inline-flex text-sm leading-5 font-semibold rounded-full">
                                        {{ $asset->condition_name }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center" onclick="event.stopPropagation();">
                                    <div class="flex justify-center space-x-2">
                                        <a href="{{ route('asset.view', $asset->id) }}" 
                                           class="text-green-600 hover:text-blue-900 hover:scale-110 transition-transform duration-200">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                            </svg>
                                        </a>
                                        @if(Auth::user()->role->role != 'Department')
                                        <a href="{{ route('asset.edit', $asset->id) }}" 
                                           class="text-indigo-600 hover:text-indigo-900">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                        </a>
                                        <button onclick="document.getElementById('delete-asset-modal{{ $asset->id }}').classList.remove('hidden')"
                                                class="text-red-600 hover:text-red-900">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                        </button>
                                        @endif
                                    </div>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@include('layouts.modals.asset.deleteAsset')
<script src="{{ asset('js/chart.js') }}"></script>
<script>
    document.querySelectorAll(
            'select[name="category"], select[name="department"], select[name="location"], select[name="site"], select[name="supplier"], select[name="brand"]'
        )
        .forEach(function (select) {
            var old_element = select;
            var new_element = old_element.cloneNode(true);
            old_element.parentNode.replaceChild(new_element, old_element);
        });

    window.onclick = function (event) {
        const modal = document.getElementById('filterModal');
        if (event.target == modal) {
            modal.classList.add('hidden');
        }
    }
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Reset filters on page load/reload
        if (performance.navigation.type === 1) { // Check if it's a page reload
            window.location.href = "{{ route('asset.list') }}";
        }

        const searchInput = document.getElementById('searchInput');
        const tableBody = document.querySelector('tbody');
        let typingTimer;
        const doneTypingInterval = 300;

        searchInput.addEventListener('input', function() {
            clearTimeout(typingTimer);
            
            // If the search input is empty, reload the page
            if (this.value.trim() === '') {
                window.location.href = "{{ route('asset.list') }}";
                return;
            }
            
            typingTimer = setTimeout(performSearch, doneTypingInterval);
        });

        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
            }
        });

        function performSearch() {
            const searchQuery = searchInput.value;
            
            // Get all active filters
            const conditions = Array.from(document.querySelectorAll('input[name="conditions[]"]:checked')).map(el => el.value);
            const categories = Array.from(document.querySelectorAll('input[name="categories[]"]:checked')).map(el => el.value);
            const statuses = Array.from(document.querySelectorAll('input[name="statuses[]"]:checked')).map(el => el.value);
            const departments = Array.from(document.querySelectorAll('input[name="departments[]"]:checked')).map(el => el.value);
            const brands = Array.from(document.querySelectorAll('input[name="brands[]"]:checked')).map(el => el.value);

            // Create FormData to properly handle array parameters
            const params = new URLSearchParams();
            params.append('search', searchQuery);
            
            conditions.forEach(value => params.append('conditions[]', value));
            categories.forEach(value => params.append('categories[]', value));
            statuses.forEach(value => params.append('statuses[]', value));
            departments.forEach(value => params.append('departments[]', value));
            brands.forEach(value => params.append('brands[]', value));
            
            fetch(`{{ route('asset.search') }}?${params.toString()}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                updateTable(data.assets);
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        function updateTable(assets) {
            tableBody.innerHTML = '';
            
            assets.forEach(asset => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 transition-colors duration-200 cursor-pointer';
                row.onclick = () => window.location.href = `/asset/${asset.id}/view`;
                
                const statusClass = getStatusClass(asset.status_name);
                const userRole = '{{ Auth::user()->role->role }}';
                const actionButtons = userRole !== 'Department' ? `
                    <a href="/asset/${asset.id}/edit" class="text-indigo-600 hover:text-indigo-900">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                    </a>
                    <button onclick="event.stopPropagation(); document.getElementById('delete-asset-modal${asset.id}').classList.remove('hidden')" class="text-red-600 hover:text-red-900">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                    </button>
                ` : '';

                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${asset.asset_tag_id}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${asset.assigned_to || 'Not currently assigned'}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱${Number(asset.cost).toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${asset.supplier_name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${asset.category_name}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-6 py-2 inline-flex text-xs leading-5 font-semibold ${statusClass}">
                            ${asset.status_name}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-sm leading-5 font-semibold rounded-full">
                            ${asset.condition_name}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center" onclick="event.stopPropagation();">
                        <div class="flex justify-center space-x-2">
                            <a href="/asset/${asset.id}/view" class="text-green-600 hover:text-blue-900 hover:scale-110 transition-transform duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                </svg>
                            </a>
                            ${actionButtons}
                        </div>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
        }

        function getStatusClass(status) {
            switch(status) {
                case 'Available':
                    return 'bg-green-100 text-green-800';
                case 'Leased':
                    return 'bg-blue-100 text-blue-800';
                default:
                    return 'bg-red-100 text-red-800';
            }
        }
    });
</script>
<script>
    // File upload handling
    document.addEventListener('DOMContentLoaded', function () {
        const fileInput = document.getElementById('file');
        const fileNameDisplay = document.getElementById('file-name');
        const importModal = document.getElementById('importModal');

        fileInput.addEventListener('change', function () {
            if (this.files && this.files[0]) {
                const fileName = this.files[0].name;
                fileNameDisplay.textContent = `Selected file: ${fileName}`;

                // Validate file size (2MB = 2 * 1024 * 1024 bytes)
                if (this.files[0].size > 2 * 1024 * 1024) {
                    alert('File size exceeds 2MB limit. Please choose a smaller file.');
                    this.value = '';
                    fileNameDisplay.textContent = '';
                }
            } else {
                fileNameDisplay.textContent = '';
            }
        });

        // Close modal when clicking outside
        window.onclick = function (event) {
            if (event.target == importModal) {
                importModal.classList.add('hidden');
                fileInput.value = '';
                fileNameDisplay.textContent = '';
            }
        }
    });
</script>

@endsection
</file>

<file path="resources/views/fcu-ams/asset/viewAsset.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/viewAsset.css') }}">
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <a href="{{ url()->previous() }}" class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
            </a>
            <h1 class="my-auto text-3xl">Asset</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                     
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="bg-white p-5 shadow-md m-3 rounded-md">
                <div class="p-3">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-bold text-gray-800">Asset Details</h2>
                        <!-- Asset Image -->
                        <div class="space-y-1 inline-block border-2 border-gray-300 shadow-md rounded-lg bg-slate-50">
                            <div class="w-16 h-16 rounded-lg overflow-hidden bg-gray-100">
                                @if($asset->asset_image)
                                    <img src="{{ asset($asset->asset_image) }}" alt="Asset Image" 
                                        class="w-full h-full object-cover">
                                @else
                                    <div class="w-full h-full flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                                            stroke-width="1.5" stroke="currentColor" class="w-12 h-12 text-gray-400">
                                            <path stroke-linecap="round" stroke-linejoin="round" 
                                                d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                        </svg>
                                    </div>
                                @endif
                            </div>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <!-- Asset Basic Info -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Basic Information</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Asset Tag ID</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->asset_tag_id }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Model</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->model }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Serial Number</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->serial_number }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Specifications</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->specs }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Cost</label>
                                    <p class="text-sm font-medium text-gray-900">₱{{ number_format($asset->cost, 2) }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Category</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->category->category }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Brand</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->brand->brand }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Supplier</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->supplier->supplier }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Purchase Date</label>
                                    <p class="text-sm font-medium text-gray-900">{{ date('F j, Y', strtotime($asset->purchase_date)) }}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Depreciation Information -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Depreciation Details</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Current Value</label>
                                    <p class="text-sm font-medium text-gray-900">₱{{ number_format($asset->current_value, 2) }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Depreciated Amount</label>
                                    <p class="text-sm font-medium text-gray-900">₱{{ number_format($asset->cost - $asset->current_value, 2) }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Depreciation Rate</label>
                                    <p class="text-sm font-medium text-gray-900">20% per year (5-year straight-line)</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Time Elapsed</label>
                                    <p class="text-sm font-medium text-gray-900">
                                        {{ $asset->months_elapsed }} months
                                        @if($asset->months_elapsed < 60)
                                            ({{ 60 - $asset->months_elapsed }} months left)
                                        @else
                                            (Fully depreciated)
                                        @endif
                                    </p>
                                </div>
                                <div class="relative pt-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Depreciation Progress</label>
                                    <div class="overflow-hidden h-2 mt-2 text-xs flex rounded bg-gray-200">
                                        <div style="width:{{ min(($asset->months_elapsed / 60) * 100, 100) }}%" 
                                            class="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Asset Location -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Location Details</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Site</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->site->site }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Location</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->location->location }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Department</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->department->department }}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Assignment Details -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Assignment Details</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Assigned To</label>
                                    <div class="flex items-center justify-between">
                                        <p class="text-sm font-medium text-gray-900">{{ $asset->assigned_to ?? 'Not Assigned' }}</p>
                                    </div>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Date Issued</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->issued_date ? date('F j, Y', strtotime($asset->issued_date)) : 'Not Set' }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Date Returned</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->return_date ? date('F j, Y', strtotime($asset->return_date)) : 'Not Set' }}</p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Notes</label>
                                    <p class="text-sm font-medium text-gray-900">{{ $asset->notes ?? 'No notes available' }}</p>
                                </div>
                            </div>
                        </div>

                        <!-- Asset Status -->
                        <div class="space-y-4">
                            <div class="flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-blue-600">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z" />
                                </svg>
                                <h3 class="text-lg font-semibold text-gray-800">Status Information</h3>
                            </div>
                            <div class="grid gap-4">
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Status</label>
                                    <p class="text-sm font-medium">
                                        <span class="px-4 py-2 rounded-full text-xs font-semibold
                                            @if($asset->status_id == 1) bg-green-100 text-green-800
                                            @elseif($asset->status_id == 2) bg-yellow-100 text-yellow-800
                                            @else bg-red-100 text-red-800
                                            @endif">
                                            {{ $asset->status->status }}
                                        </span>
                                    </p>
                                </div>
                                <div class="space-y-1">
                                    <label class="text-xs font-medium text-gray-500 uppercase">Condition</label>
                                    <p class="text-sm font-medium">
                                        <span class="px-4 py-2 rounded-full text-xs font-semibold
                                            @if($asset->condition_id == 1) bg-green-100 text-green-800
                                            @elseif($asset->condition_id == 2) bg-yellow-100 text-yellow-800
                                            @else bg-red-100 text-red-800
                                            @endif">
                                            {{ $asset->condition->condition }}
                                        </span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="flex gap-3 justify-end">
                            @if(Auth::user()->role->role != 'Department')
                            <a href="{{ route('asset.qrCode', $asset->id) }}" class="rounded-md shadow-md px-5 py-2 bg-blue-600 hover:shadow-md hover:bg-blue-500 transition-all
                                duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                    stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 4.875c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5A1.125 1.125 0 0 1 3.75 9.375v-4.5ZM3.75 14.625c0-.621.504-1.125 1.125-1.125h4.5c.621 0 1.125.504 1.125 1.125v4.5c0 .621-.504 1.125-1.125 1.125h-4.5a1.125 1.125 0 0 1-1.125-1.125v-4.5ZM13.5 4.875h.008v.008H12v-.008z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 6.75h.75v.75h-.75v-.75ZM6.75 16.5h.75v.75h-.75v-.75ZM16.5 6.75h.75v.75h-.75v-.75ZM13.5 13.5h.75v.75h-.75v-.75ZM13.5 19.5h.75v.75h-.75v-.75ZM19.5 13.5h.75v.75h-.75v-.75ZM19.5 19.5h.75v.75h-.75v-.75ZM16.5 16.5h.75v.75h-.75v-.75Z" />
                                </svg>
                                Generate Asset Tag
                            </a>
                            @if($asset->assigned_to)
                                <form action="{{ route('asset.return', $asset->id) }}" method="POST">
                                    @csrf
                                    @method('PUT')
                                    <button type="submit" class="rounded-md shadow-md px-5 py-2 bg-red-600 hover:shadow-md hover:bg-red-500 transition-all
                                        duration-200 hover:scale-105 ease-in hover:shadow-inner text-white flex gap-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75" />
                                        </svg>
                                        Return Asset
                                    </button>
                                </form>
                            @endif
                            @endif
                        </div>
            </div>
            
        @if($editHistory->isNotEmpty())
            <div class="bg-white p-6 shadow-lg m-3 rounded-lg">
                <div class="flex justify-between items-center mb-6">
                    <div class="flex items-center gap-3">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" 
                            stroke="currentColor" class="w-6 h-6 text-blue-600">
                            <path stroke-linecap="round" stroke-linejoin="round" 
                                d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        <h2 class="text-2xl font-bold text-gray-800">Edit History</h2>
                    </div>
                    <span class="text-sm text-gray-500">Showing latest change</span>
                </div>
                <div class="overflow-hidden rounded-lg border border-gray-200">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Date & Time
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Modified by
                                </th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Changes Made
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($editHistory as $history)
                                <tr class="hover:bg-gray-50 transition-colors duration-200">
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                                        <div class="flex items-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                                                stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-gray-400">
                                                <path stroke-linecap="round" stroke-linejoin="round" 
                                                    d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5" />
                                            </svg>
                                            {{ $history->created_at->format('Y-m-d H:i:s') }}
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-8 w-8">
                                                @if($history->user->profile_picture)
                                                    <img class="h-8 w-8 rounded-full object-cover" 
                                                        src="{{ asset($history->user->profile_picture) }}" alt="">
                                                @else
                                                    <div class="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center">
                                                        <span class="text-white text-sm font-medium">
                                                            {{ substr($history->user->first_name, 0, 1) }}{{ substr($history->user->last_name, 0, 1) }}
                                                        </span>
                                                    </div>
                                                @endif
                                            </div>
                                            <div class="ml-3">
                                                <p class="text-sm font-medium text-gray-900">
                                                    {{ $history->user->first_name }} {{ $history->user->last_name }}
                                                </p>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 text-sm text-gray-600">
                                        <div class="">
                                            {!! nl2br($history->changes) !!}
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                <div class="mt-4 flex items-center justify-between px-4 mb-3">
                    <div class="flex items-center gap-2">
                        <a href="{{ $editHistory->url(1) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $editHistory->previousPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M12.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L8.414 10l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                    
                    <div class="text-sm text-gray-700">
                        <span>Showing</span>
                        <span class="font-medium">{{ $editHistory->firstItem() ?? 0 }}</span>
                        <span>to</span>
                        <span class="font-medium">{{ $editHistory->lastItem() ?? 0 }}</span>
                        <span>of</span>
                        <span class="font-medium">{{ $editHistory->total() }}</span>
                        <span>results</span>
                    </div>

                    <div class="flex items-center gap-2">
                        <a href="{{ $editHistory->nextPageUrl() }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M7.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L10.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                        <a href="{{ $editHistory->url($editHistory->lastPage()) }}" class="p-2 inline-flex items-center justify-center rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L8.586 10l-4.293 4.293a1 1 0 000 1.414zm6 0a1 1 0 001.414 0l5-5a1 1 0 000-1.414l-5-5a1 1 0 00-1.414 1.414L14.586 10l-4.293 4.293a1 1 0 000 1.414z" clip-rule="evenodd" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        @endif
    </div>
</div>

<script src="{{ asset('js/chart.js') }}"></script>
 
<script>
    document.addEventListener('DOMContentLoaded', function () {
                // Get the current URL
                var currentUrl = window.location.href;
                // Get all dropdown buttons
                var dropdownButtons = document.querySelectorAll('.relative button');
                            // Loop through each dropdown link
            dropdownLinks.forEach(function (link) {
                // Check if the current URL matches the link's href
                if (currentUrl === link.href) {
                    // Open the dropdown
                    button.click();
                }
            });
        });
    });

</script>

@endsection
</file>

<file path="resources/views/fcu-ams/reports/reports.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/asset.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<style>
    .pagination-container nav > div:first-child {
        display: none !important;
    }
    .pagination-container nav > div:last-child {
        margin: 0 !important;
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
    }
    .pagination-container nav > div:last-child > div:first-child {
        margin-right: 1rem !important;
    }
    .pagination-container nav > div:last-child > div:last-child {
        margin-left: auto !important;
    }
    .pagination-container .pagination-previous,
    .pagination-container .pagination-next {
        display: invisible !important;
    }

    /* Add spacing between pagination elements */
    .pagination-container nav > div:last-child > div > span,
    .pagination-container nav > div:last-child > div > a {
        margin: 0 0.5rem !important;
    }

    .pagination-container nav > div:last-child > div > span:first-child,
    .pagination-container nav > div:last-child > div > a:first-child {
        margin-left: 0 !important;
    }

    .pagination-container nav > div:last-child > div > span:last-child,
    .pagination-container nav > div:last-child > div > a:last-child {
        margin-right: 0 !important;
    }
</style>

<div x-data="{ sidebarOpen: true }" class="grid grid-cols-6">
    <div x-show="sidebarOpen" class="col-span-1">
        @include('layouts.sidebar')
    </div>
    <div :class="{ 'col-span-5': sidebarOpen, 'col-span-6': !sidebarOpen }" class="bg-slate-200 content min-h-screen">
    <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
    <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
    </button>
                <h1 class="text-3xl font-semibold text-gray-800 my-auto">Reports</h1>
            
            <!-- Profile section (right-aligned) -->
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                </button>
                <!-- Profile dropdown menu -->
                <div x-show="open" @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <div class="content-area mx-3">
            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                <!-- Total Inventory Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Total Inventory Items</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $inventories->total() }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Total Assets Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-green-100 text-green-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Total Assets</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $assets->total() }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Stock Out Records Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-yellow-100 text-yellow-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Stock Out Records</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $stockOutRecords->total() }}</h3>
                        </div>
                    </div>
                </div>

                <!-- Purchase Orders Card -->
                <div class="bg-white rounded-lg shadow-md p-6 flex-1">
                    <div class="flex items-center justify-between">
                        <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>
                        </div>
                        <div class="ml-4 flex-1">
                            <p class="text-gray-500 text-sm">Purchase Orders</p>
                            <h3 class="text-2xl font-semibold text-gray-800 mt-1">{{ $purchaseOrders->total() }}</h3>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chart Section -->
            <!-- <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700 mb-4">Inventory Distribution by Supplier</h2>
                    <div class="w-full h-[300px] flex items-center justify-center">
                        <canvas id="inventoryChart"></canvas>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700 mb-4">Asset Distribution by Department</h2>
                    <div class="w-full h-[300px] flex items-center justify-center">
                        <canvas id="departmentChart"></canvas>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700 mb-4">Stock-Out Trends (Last 6 Months)</h2>
                    <div class="w-full h-[300px] flex items-center justify-center">
                        <canvas id="trendChart"></canvas>
                    </div>
                </div>
            </div> -->
            <!-- Assigned Assets Section -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700">Assigned Assets</h2>
                    <div class="flex items-center gap-4">
                        <!-- Search Form -->
                        <form method="GET" action="{{ route('reports.index') }}" class="flex items-center">
                            <div class="relative">
                                <input type="text" name="assignee" id="assignee" value="{{ $assigneeQuery }}"
                                    placeholder="Search by assignee name..."
                                    class="w-64 rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                                <button type="submit" class="absolute right-2 top-1/2 -translate-y-1/2 p-1.5 rounded-full bg-blue-500 hover:bg-blue-600 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                    </svg>
                                </button>
                            </div>
                        </form>
                        @if(isset($assignedAssets) && !$assignedAssets->isEmpty())
                            <form method="GET" action="{{ route('reports.print-assigned') }}" target="_blank">
                                <input type="hidden" name="assignee" value="{{ $assigneeQuery }}">
                                <button type="submit"
                                    class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                                    </svg>
                                    Print Report
                                </button>
                            </form>
                        @endif
                    </div>
                </div>

                <!-- Divider -->
                <div class="border-b-2 border-slate-200 mb-6"></div>

                @if(isset($assignedAssets))
                    @if($assignedAssets->isEmpty())
                        <p class="text-center text-gray-500 py-4">No assets found assigned to
                            "{{ $assigneeQuery }}".
                        </p>
                    @else
                        <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Assigned To</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Asset Tag ID</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Brand</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Model</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Department</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Location</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Status</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                            Condition</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    @foreach($assignedAssets as $asset)
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-6 py-4">{{ $asset->assigned_to ?? 'N/A' }}</td>
                                            <td class="px-6 py-4">{{ $asset->asset_tag_id }}</td>
                                            <td class="px-6 py-4">{{ $asset->brand->brand }}</td>
                                            <td class="px-6 py-4">{{ $asset->model }}</td>
                                            <td class="px-6 py-4">{{ $asset->department->department }}</td>
                                            <td class="px-6 py-4">{{ $asset->location->location }}</td>
                                            <td class="px-6 py-4">{{ $asset->status->status }}</td>
                                            <td class="px-6 py-4">{{ $asset->condition->condition }}</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                        <div class="mt-4 pagination-container flex w-full">
                            {{ $assignedAssets->links() }}
                        </div>
                    @endif
                @else
                    <p class="text-center text-gray-500 py-4">Enter an assignee name to search for their assigned
                        assets.</p>
                @endif
            </div>
            <!-- Purchase Order -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700">Purchase Order</h2>
                    <span class="text-sm text-gray-500">{{ $poDateRangeDisplay }}</span>
                </div>
                
                <!-- Filter Form -->
                <form method="GET" action="{{ route('reports.index') }}" class="bg-gray-50 rounded-lg p-6 mb-4 border-2 border-slate-300">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label for="po_start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                            <input type="date" name="po_start_date" id="po_start_date"
                                value="{{ request('po_start_date', now()->startOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div>
                            <label for="po_end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                            <input type="date" name="po_end_date" id="po_end_date"
                                value="{{ request('po_end_date', now()->endOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div class="flex items-end">
                            <button type="submit"
                                class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                Apply Filter
                            </button>
                        </div>
                    </div>
                </form>

                @if($purchaseOrders->isEmpty() && $approvedRequestsForPO->isEmpty())
                    <p class="text-center text-gray-500 py-4">No purchase order records available.</p>
                @else
                    <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Department</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Requester/Type</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Action</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($purchaseOrders as $record)
                                    <tr class="hover:bg-gray-50"
                                        onclick="window.location.href='{{ route('purchase-order-details', $record->id) }}'">
                                        <td class="px-6 py-4">{{ $record->department->department }}</td>
                                        <td class="px-6 py-4">Purchase Order</td>
                                        <td class="px-6 py-4">
                                            {{ \Carbon\Carbon::parse($record->po_date)->format('M d, Y') }}
                                        </td>
                                        <td class="px-6 py-4">
                                            <a href="{{ route('purchase-order-details', $record->id) }}"
                                               class="text-blue-600 hover:text-blue-900">View Details</a>
                                        </td>
                                    </tr>
                                @endforeach
                                @foreach($approvedRequestsForPO as $request)
                                    <tr class="hover:bg-gray-50"
                                        onclick="window.location.href='{{ route('reports.print-approved-request', $request->request_group_id) }}'">
                                        <td class="px-6 py-4">{{ $request->department->department }}</td>
                                        <td class="px-6 py-4">{{ $request->requester }}</td>
                                        <td class="px-6 py-4">{{ \Carbon\Carbon::parse($request->request_date)->format('M d, Y') }}</td>
                                        <td class="px-6 py-4">
                                            <a href="{{ route('reports.print-approved-request', $request->request_group_id) }}" 
                                               class="text-blue-600 hover:text-blue-900">
                                                View Details
                                            </a>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-4 pagination-container flex w-full">
                        {{ $purchaseOrders->appends(['po_page' => request('po_page')])->links() }}
                        {{ $approvedRequestsForPO->appends(['po_request_page' => request('po_request_page')])->links() }}
                    </div>
                @endif
            </div>

            <!-- Stock Out Records Section -->
            <div class="bg-white rounded-lg shadow-md mb-6 p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl segoe font-bold text-gray-700">Stock Out Records</h2>
                    <span class="text-sm text-gray-500">{{ $stockOutDateRangeDisplay }}</span>
                </div>

                <!-- Filter Form -->
                <form method="GET" action="{{ route('reports.index') }}" class="bg-gray-50 rounded-lg p-6 mb-4 border-2 border-slate-300">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label for="stock_out_start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                            <input type="date" name="stock_out_start_date" id="stock_out_start_date"
                                value="{{ request('stock_out_start_date', now()->startOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div>
                            <label for="stock_out_end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                            <input type="date" name="stock_out_end_date" id="stock_out_end_date"
                                value="{{ request('stock_out_end_date', now()->endOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div class="flex items-end">
                            <button type="submit"
                                class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                Apply Filter
                            </button>
                        </div>
                    </div>
                </form>

                @if($stockOutRecords->isEmpty())
                    <p class="text-center text-gray-500 py-4">No stock out records available.</p>
                @else
                    <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Receiver</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Action</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($stockOutRecords as $record)
                                    <tr class="hover:bg-gray-50" onclick="window.location.href='{{ route('stock.out.details', $record->id) }}'">
                                        <td class="px-6 py-4">{{ $record->receiver }}</td>
                                        <td class="px-6 py-4">{{ $record->stock_out_date }}</td>
                                        <td class="px-6 py-4">
                                            <a href="{{ route('stock.out.details', $record->id) }}"
                                               class="text-blue-600 hover:text-blue-900">View Details</a>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-4 pagination-container flex w-full">
                        {{ $stockOutRecords->appends(['stock_out_page' => request('stock_out_page')])->links() }}
                    </div>
                @endif
            </div>

            <!-- Inventory Section -->
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <div class="flex justify-between items-center mb-6">
                    <div>
                        <h2 class="text-2xl segoe font-bold text-gray-700">Inventory Report</h2>
                        <p class="text-sm text-gray-500 mt-1">{{ $dateRangeDisplay }}</p>
                    </div>
                    <div class="flex space-x-2">
                        <form method="GET" action="{{ route('reports.print') }}" target="_blank" class="ml-2">
                        <input type="hidden" name="start_date" value="{{ request('start_date', now()->startOfMonth()->toDateString()) }}">
                        <input type="hidden" name="end_date" value="{{ request('end_date', now()->endOfMonth()->toDateString()) }}">
                            <button type="submit"
                            class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                                </svg>
                            Print Report
                            </button>
                        </form>
                        <a href="{{ route('reports.export-inventory', ['start_date' => request('start_date', now()->startOfMonth()->toDateString()), 'end_date' => request('end_date', now()->endOfMonth()->toDateString())]) }}" 
                        class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded inline-flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            Export CSV
                        </a>
                    </div>
                    </div>

                <!-- Filter Form -->
                <form method="GET" action="{{ route('reports.index') }}" class="bg-gray-50 rounded-lg p-6 mb-4 border-2 border-slate-300">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                            <label for="start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                            <input type="date" name="start_date" id="start_date"
                                value="{{ request('start_date', now()->startOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div>
                            <label for="end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                            <input type="date" name="end_date" id="end_date"
                                value="{{ request('end_date', now()->endOfMonth()->toDateString()) }}"
                                class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                        </div>
                        <div class="flex items-end">
                            <button type="submit"
                                class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                Apply Filter
                            </button>
                        </div>
                    </div>
                </form>

                @if($inventories->isEmpty())
                    <p class="text-center text-gray-500 py-4">No inventory records available.</p>
                @else
                    <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                    <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Unique Tag</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Items & Specs</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Quantity</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Unit</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Unit Price</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Supplier</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Purchase Date</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                                @foreach($inventories as $inventory)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4">{{ $inventory->unique_tag }}</td>
                                        <td class="px-6 py-4">{{ $inventory->items_specs }}</td>
                                        <td class="px-6 py-4">{{ $inventory->quantity }}</td>
                                        <td class="px-6 py-4">{{ $inventory->unit->unit }}</td>
                                        <td class="px-6 py-4">{{ $inventory->unit_price }}</td>
                                        <td class="px-6 py-4">{{ $inventory->supplier->supplier }}</td>
                                        <td class="px-6 py-4">{{ date('F j, Y', strtotime($inventory->supplier->created_at)) }}</td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                    <div class="mt-4 pagination-container flex w-full">
                        {{ $inventories->appends(['inventory_page' => request('inventory_page')])->links() }}
                    </div>
            @endif
        </div>

                <!-- Assets Section -->
                <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                    <div class="flex justify-between items-center mb-6">
                        <div>
                            <h2 class="text-2xl segoe font-bold text-gray-700">Assets Report</h2>
                            <p class="text-sm text-gray-500 mt-1">{{ $assetsDateRangeDisplay }}</p>
                        </div>
                            <div class="flex space-x-2">
                                <form method="GET" action="{{ route('reports.print-assets') }}" target="_blank" class="ml-2">
                                <input type="hidden" name="assets_start_date" value="{{ request('assets_start_date', now()->startOfMonth()->toDateString()) }}">
                                <input type="hidden" name="assets_end_date" value="{{ request('assets_end_date', now()->endOfMonth()->toDateString()) }}">
                                        <button type="submit"
                                    class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                                            </svg>
                                    Print Report
                                        </button>
                                    </form>
                                    <a href="{{ route('reports.export-assets', ['assets_start_date' => request('assets_start_date', now()->startOfMonth()->toDateString()), 'assets_end_date' => request('assets_end_date', now()->endOfMonth()->toDateString())]) }}" 
                                    class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded inline-flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                        </svg>
                                        Export CSV
                                    </a>
                            </div>
                        </div>

                    <!-- Filter Form -->
                    <form method="GET" action="{{ route('reports.index') }}" class="bg-gray-50 rounded-lg p-6 mb-4 border-2 border-slate-300">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div>
                                <label for="assets_start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                                <input type="date" name="assets_start_date" id="assets_start_date"
                                    value="{{ request('assets_start_date', now()->startOfMonth()->toDateString()) }}"
                                    class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                            </div>
                            <div>
                                <label for="assets_end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                                <input type="date" name="assets_end_date" id="assets_end_date"
                                    value="{{ request('assets_end_date', now()->endOfMonth()->toDateString()) }}"
                                    class="mt-1 block w-full rounded-md border-2 border-slate-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 bg-white px-4 py-2">
                            </div>
                            <div class="flex items-end">
                                <button type="submit"
                                    class="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                                    Apply Filter
                                </button>
                            </div>
                        </div>
                    </form>

                    @if($assets->isEmpty())
                        <p class="text-center text-gray-500 py-4">No assets records available.</p>
                    @else
                        <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Assigned To</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Asset Tag ID</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Brand</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Model</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Serial Number</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cost</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Supplier</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Purchase Date</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($assets as $asset)
                                        <tr class="hover:bg-gray-50">
                                            <td class="px-6 py-4">{{ $asset->assigned_to ?? 'N/A' }}</td>
                                            <td class="px-6 py-4">{{ $asset->asset_tag_id }}</td>
                                            <td class="px-6 py-4">{{ $asset->brand->brand }}</td>
                                            <td class="px-6 py-4">{{ $asset->model }}</td>
                                            <td class="px-6 py-4">{{ $asset->serial_number }}</td>
                                            <td class="px-6 py-4">{{ $asset->cost }}</td>
                                            <td class="px-6 py-4">{{ $asset->supplier->supplier }}</td>
                                            <td class="px-6 py-4">{{ date('F j, Y', strtotime($asset->created_at)) }}</td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
                        <div class="mt-4 pagination-container flex w-full">
                            {{ $assets->appends(['assets_page' => request('assets_page')])->links() }}
                        </div>
            @endif
                </div>

                
            </div>
        </div>
    </div>
</div>

<script src="{{ asset('js/chart.js') }}"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Inventory Chart
    const ctxInventory = document.getElementById('inventoryChart').getContext('2d');
    const labels = @json($chartLabels);
    const data = @json($chartData);
    
    const backgroundColors = [
        'rgba(54, 162, 235, 0.8)',
        'rgba(255, 99, 132, 0.8)',
        'rgba(255, 206, 86, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(153, 102, 255, 0.8)'
    ];

    new Chart(ctxInventory, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: backgroundColors,
                borderColor: backgroundColors.map(color => color.replace('0.8', '1')),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        font: {
                            size: 12
                        },
                        padding: 20
                    }
                },
                title: {
                    display: true,
                    text: 'Top 5 Suppliers by Number of Items',
                    font: {
                        size: 16
                    }
                }
            }
        }
    });

    // Department Chart
    const ctxDepartment = document.getElementById('departmentChart').getContext('2d');
    const deptLabels = @json($departmentChartLabels);
    const deptData = @json($departmentChartData);
    
    const deptBackgroundColors = [
        'rgba(255, 99, 132, 0.8)',
        'rgba(54, 162, 235, 0.8)',
        'rgba(255, 206, 86, 0.8)',
        'rgba(75, 192, 192, 0.8)',
        'rgba(153, 102, 255, 0.8)'
    ];

    new Chart(ctxDepartment, {
        type: 'doughnut',
        data: {
            labels: deptLabels,
            datasets: [{
                data: deptData,
                backgroundColor: deptBackgroundColors,
                borderColor: deptBackgroundColors.map(color => color.replace('0.8', '1')),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        font: {
                            size: 12
                        },
                        padding: 20
                    }
                },
                title: {
                    display: true,
                    text: 'Top 5 Departments by Number of Assets',
                    font: {
                        size: 16
                    }
                }
            }
        }
    });

    // Stock Out Trends Chart
    const ctxTrend = document.getElementById('trendChart').getContext('2d');
    const trendLabels = @json($trendLabels);
    const trendData = @json($trendData);

    new Chart(ctxTrend, {
        type: 'line',
        data: {
            labels: trendLabels,
            datasets: [{
                label: 'Number of Stock-Outs',
                data: trendData,
                borderColor: 'rgb(75, 192, 192)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                tension: 0.3,
                fill: true,
                pointBackgroundColor: 'rgb(75, 192, 192)',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 5,
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 12
                        },
                        padding: 20
                    }
                },
                title: {
                    display: true,
                    text: 'Monthly Stock-Out Activity',
                    font: {
                        size: 16
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    },
                    grid: {
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
});
</script>

@endsection
</file>

<file path="routes/web.php">
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\TestController;
use App\Http\Controllers\LoginController;
use App\Http\Controllers\IndexController;
use App\Http\Controllers\InventoryController;
use App\Http\Controllers\AssetController;
use App\Http\Controllers\DashboardController;
use App\Http\Controllers\UserController;
use App\Http\Controllers\CategoryController;
use App\Http\Controllers\ConditionController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\LeaseController;
use App\Http\Controllers\ReportController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\SupplierController;
use App\Http\Controllers\AlertController;
use App\Http\Controllers\UnitController;
use App\Http\Controllers\SiteController;
use App\Http\Controllers\StatusController;
use App\Http\Controllers\LocationController;
use App\Http\Controllers\BrandController;
use App\Http\Controllers\PurchaseOrderController;
use App\Http\Controllers\RequestController;
use App\Http\Controllers\ActivityController;
use App\Http\Controllers\DepartmentReportController;

Route::controller(LoginController::class)->group(function () {
    Route::get('/', 'index')->name('login')->middleware('auth.redirect');
    // Route::get('/', 'asdf')->name('login');
    Route::get('/signup', 'signup')->name('signup');
    Route::post('/login', 'login')->name('login.submit');
    Route::post('/logout', 'logout')->name('logout');
});

Route::controller(UserController::class)->group(function () {
    Route::post('/users', 'signup')->name('users.signup');
});

Route::middleware(['auth.user'])->group(function () {
    Route::controller(IndexController::class)->group(function () {
        Route::get('/test', 'testForm')->name('testForm');
    });

    Route::controller(DashboardController::class)->group(function (){
        Route::get('/dashboard', 'dashboard')->name('dashboard');
    }); 

    Route::controller(AssetController::class)->group(function (){
        Route::get('/asset/list', 'index')->name('asset.list');
        Route::get('/asset/export', 'exportToExcel')->name('asset.export');
        Route::get('/asset/{id}/view', 'show')->name('asset.view');
        Route::get('/asset/add', 'create')->name('asset.add');
        Route::get('/asset/{id}/edit', 'edit')->name('asset.edit');
        Route::get('/maintenance', 'maintenance')->name('maintenance');
        Route::get('/asset/export', 'export')->name('asset.export');
        Route::get('/asset/{id}/qrCode', 'generateQrCode')->name('asset.qrCode');
        Route::get('/search', 'search')->name('asset.search');
        Route::get('/disposed', 'disposed')->name('asset.disposed');
        Route::post('/asset/add', 'store')->name('asset.add.store');
        Route::post('/asset/{id}', 'update')->name('asset.update');
        Route::post('/asset/import', 'import')->name('asset.import');
        Route::post('/asset/{id}/update-condition', 'updateCondition')->name('asset.update.condition');
        Route::delete('/asset/{id}', 'destroy')->name('asset.destroy');
        Route::put('/asset/{id}/return', 'return')->name('asset.return');
    }); 

    Route::controller(InventoryController::class)->group(function (){
        Route::get('/inventory/list', 'index')->name('inventory.list');
        Route::get('/inventory/{id}/view', 'show')->name('inventory.view');
        Route::get('/inventory/stock/in', 'create')->name('inventory.stock.in');
        Route::get('/inventory/stock/in/{id}/edit', 'edit')->name('inventory.stock.in.edit');
        Route::get('/inventory/stock/out', 'createStockOut')->name('inventory.stock.out');
        Route::get('/inventory/low-stock', 'lowStock')->name('inventory.low.stock');
        Route::get('/inventory/out-of-stock', 'outOfStock')->name('inventory.out.of.stock');
        Route::get('/inventories/export', 'export')->name('inventories.export');
        Route::get('/inventory/search-items', 'searchItems')->name('inventory.search.items');
        Route::get('/inventory/search', 'search')->name('inventory.search');
        Route::post('/inventory/stock/in', 'store')->name('inventory.stock.in.store');
        Route::post('/inventory/stock/in/{id}', 'update')->name('inventory.stock.in.update');
        Route::post('/inventory/stock/out', 'storeStockOut')->name('inventory.stock.out.store');
        Route::post('/inventory/import', 'import')->name('inventory.import');
        Route::post('/inventory/import/asset', 'importAsset')->name('inventory.asset.import');
        Route::delete('/inventory/{id}', 'destroy')->name('inventory.destroy');
        Route::get('/inventory/supply-request', 'showSupplyRequest')->name('inventory.supply.request');
        Route::post('/inventory/supply-request', 'storeSupplyRequest')->name('inventory.supply.request.store');
        Route::get('/inventory/supply-request/{request_group_id}', 'showSupplyRequestDetails')->name('inventory.supply-request.details');
        Route::get('/inventory/supply-request/{request_group_id}/print', 'printSupplyRequest')->name('inventory.supply.request.print');
        Route::post('/inventory/supply-request/{request_group_id}/approve', 'approveSupplyRequest')->name('inventory.supply-request.approve');
        Route::post('/inventory/supply-request/{request_group_id}/reject', 'rejectSupplyRequest')->name('inventory.supply-request.reject');
        Route::put('/inventory/supply-request/{request_group_id}/update', 'updateSupplyRequest')->name('inventory.supply-request.update');
        Route::get('/inventory/my-requests', 'myRequests')->name('inventory.my.requests');
        Route::post('/inventory/supply-request/{request_group_id}/cancel', 'cancelSupplyRequest')->name('inventory.supply-request.cancel');
        Route::get('/request/notifications', 'notifications')->name('request.notifications');
    });

    Route::controller(RequestController::class)->group(function () {
        Route::get('/requests', 'index')->name('requests.index');
        Route::delete('/requests/{request_group_id}', 'destroy')->name('requests.destroy');
        Route::post('/inventory/request-item', 'storeRequestedItem')->name('inventory.request.item.store');
        Route::get('/inventory/brands', 'getBrands')->name('inventory.brands');
        Route::get('/inventory/units', 'getUnits')->name('inventory.units');
        Route::get('/inventory/suppliers', 'getSuppliers')->name('inventory.suppliers');
    });

    // Route::controller(UserController::class)->group(function () {
    //     Route::post('/users', 'store')->name('users.store');
    // });

    Route::controller(LeaseController::class)->group(function () {
        Route::get('/lease', 'index')->name('lease.index');
        Route::get('/lease/create', 'create')->name('lease.create');
        Route::get('/lease/create/form', 'createForm')->name('lease.create.form');
        Route::get('/lease/{id}', 'show')->name('lease.show');
        Route::post('/lease/create/form', 'createForm')->name('lease.create.form.add');
        Route::post('/lease', 'store')->name('lease.store');
        Route::post('/lease/{lease}/end', 'endLease')->name('lease.end');
    });
    
    Route::controller(ReportController::class)->group(function () {
        Route::get('/reports', 'index')->name('reports.index');
        Route::get('/stock/out/{id}/details', 'stockOutDetails')->name('stock.out.details');
        Route::get('/purchase-order-details/{id}', 'purchaseOrderDetails')->name('purchase-order-details');
        Route::get('/reports/print', 'printReport')->name('reports.print');
        Route::get('/reports/print-assets', 'printAssetsReport')->name('reports.print-assets');
        Route::get('/reports/print-assigned', 'printAssignedAssets')->name('reports.print-assigned');
        Route::get('/reports/print-approved-request/{request_group_id}', 'printApprovedRequest')->name('reports.print-approved-request');
        Route::get('/reports/export-inventory', 'exportInventory')->name('reports.export-inventory');
        Route::get('/reports/export-assets', 'exportAssets')->name('reports.export-assets');
    });

    Route::controller(ProfileController::class)->group(function () {
        Route::get('/user/profile', 'index')->name('profile.index');
        Route::post('/user/profile/update', 'update')->name('profile.update');
        Route::post('/user/profile/updatePersonalInformation',
        'updatePersonalInformation')->name('profile.updatePersonalInformation');
    });

    Route::controller(AlertController::class)->group(function () {
        Route::get('/alerts', 'index')->name('alerts.index');
        Route::get('/assets/{asset}', 'show')->name('asset.show');
        Route::get('/alerts/maintenance', 'maintenance')->name('alerts.maintenance');
        Route::get('/alerts/pending-requests', 'pendingRequests')->name('alerts.pending-requests');
        Route::get('/alerts/expiring-leases', 'expiringLeases')->name('alerts.expiring-leases');
    });

    Route::controller(UnitController::class)->group(function () {
        Route::post('/unit/add', 'add')->name('unit.add');
        Route::get('/unit/list', 'list')->name('unit.list');
    });

    Route::controller(CategoryController::class)->group(function (){
        Route::get('/category/index', 'index')->name('category.index');
        Route::get('/category/list', 'list')->name('category.list');
        Route::post('/category/add', 'add')->name('category.add');
        Route::post('/category/{id}', 'update')->name('category.update');
        Route::delete('/category/{id}', 'destroy')->name('category.destroy');
    });

    Route::controller(BrandController::class)->group(function (){
        Route::get('/brand/index', 'index')->name('brand.index');
        Route::get('/brand/list', 'list')->name('brand.list');
        Route::post('/brand/add', 'add')->name('brand.add');
        Route::post('/brand/{id}', 'update')->name('brand.update');
        Route::delete('/brand/{id}', 'destroy')->name('brand.destroy');
    });

    Route::controller(ConditionController::class)->group(function (){
        Route::get('/condition/index', 'index')->name('condition.index');
        Route::get('/condition/list', 'list')->name('condition.list');
        Route::post('/condition/add', 'add')->name('condition.add');
        Route::post('/condition/{id}', 'update')->name('condition.update');
        Route::delete('/condition/{id}', 'destroy')->name('condition.destroy');
    });

    Route::controller(DepartmentController::class)->group(function (){
        Route::get('/department/index', 'index')->name('department.index');
        Route::get('/department/list', 'list')->name('department.list');
        Route::post('/department/add', 'add')->name('department.add');
        Route::post('/department/{id}', 'update')->name('department.update');
        Route::delete('/department/{id}', 'destroy')->name('department.destroy');
    });

    Route::controller(DepartmentReportController::class)->group(function (){
        Route::get('/department/reports', 'index')->name('department.reports');
    });

    Route::controller(LocationController::class)->group(function (){
        Route::get('/location/index', 'index')->name('location.index');
        Route::get('/location/list', 'list')->name('location.list');
        Route::post('/location/add', 'add')->name('location.add');
        Route::post('/location/{id}', 'update')->name('location.update');
        Route::delete('/location/{id}', 'destroy')->name('location.destroy');
    });
    // Route::controller(LocationController::class)->group(function () {
    // Route::post('/location/add', 'add')->name('location.add');
    // });

    Route::controller(SiteController::class)->group(function (){
        Route::get('/site/index', 'index')->name('site.index');
        Route::get('/site/list', 'list')->name('site.list');
        Route::post('/site/add', 'add')->name('site.add');
        Route::post('/site/{id}', 'update')->name('site.update');
        Route::delete('/site/{id}', 'destroy')->name('site.destroy');
    });
    // Route::controller(SiteController::class)->group(function () {
    //     Route::post('/site/add', 'add')->name('site.add');
    // });

    Route::controller(StatusController::class)->group(function (){
        Route::get('/status/index', 'index')->name('status.index');
        Route::get('/status/list', 'list')->name('status.list');
        Route::post('/status/add', 'add')->name('status.add');
        Route::post('/status/{id}', 'update')->name('status.update');
    });

    Route::controller(RequestController::class)->group(function (){
        Route::get('/requests', 'index')->name('requests.index');
    });

    Route::controller(SupplierController::class)->group(function (){
        Route::get('/supplier/index', 'index')->name('supplier.index');
        Route::get('/supplier/list', 'list')->name('supplier.list');
        Route::post('/supplier/add', 'add')->name('supplier.add');
        Route::post('/supplier/{id}', 'update')->name('supplier.update');
        Route::delete('/supplier/{id}', 'destroy')->name('supplier.destroy');
    });
    // Route::controller(SupplierController::class)->group(function (){
    //     Route::post('/supplier/add', 'add')->name('supplier.add');
    //     Route::post('/supplier/delete', 'delete')->name('supplier.delete');
    // });

    Route::controller(UserController::class)->group(function () {
        Route::get('/user/index', 'index')->name('user.index');
        Route::post('/user/add', 'add')->name('user.add');
        Route::post('/user/{id}', 'update')->name('user.update');
        Route::delete('/user/{id}', 'destroy')->name('user.destroy');
    });

    Route::controller(ActivityController::class)->group(function () {
        Route::get('/activities', 'index')->name('activities.index');
    });

    Route::controller(PurchaseOrderController::class)->group(function (){
        Route::get('/purchase/order/index', 'index')->name('purchase.order.index');
        Route::post('/purchase/order/store', 'store')->name('purchase.order.store');
    });
});
</file>

<file path="app/Http/Controllers/AssetController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use DB;
use App\Models\Asset;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Condition;
use App\Models\Status;
use App\Models\Brand;
use App\Models\Department;
use App\Models\AssetEditHistory;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\AssetsExport;
use Illuminate\Validation\Rule;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use Illuminate\Support\Facades\Storage;
use App\Models\DisposedStatus;
use Illuminate\Support\Str;
use App\Models\SupplyRequest;
use App\Models\StockOut;
use App\Models\Inventory;
use App\Exports\InventoryExport;
use App\Models\Unit;
use App\Models\InventoryEditHistory;
use App\Imports\AssetsImport;
use Carbon\Carbon;

class AssetController extends Controller
{
    public function index(Request $request) {
        $categories = $request->input('categories', []);
        $departments = $request->input('departments', []);
        $locations = $request->input('locations', []);
        $sites = $request->input('sites', []);
        $suppliers = $request->input('suppliers', []);
        $brands = $request->input('brands', []);
        $conditions = $request->input('conditions', []);
        $statuses = $request->input('statuses', []);

        $category = $request->input('category');
        $department = $request->input('department');
        $location = $request->input('location');
        $site = $request->input('site');
        $supplier = $request->input('supplier');
        $brand = $request->input('brand');

        $totalAssets = DB::table('assets')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->whereNull('assets.deleted_at')
            ->whereNotIn('conditions.condition', ['Disposed'])
            ->count();
            
        $totalCost = DB::table('assets')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->whereNull('assets.deleted_at')
            ->whereNotIn('conditions.condition', ['Disposed'])
            ->sum('cost');
        
        $lowValueAssets = DB::table('assets')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->where('cost', '<', 1000)
            ->whereNull('assets.deleted_at')
            ->whereNotIn('conditions.condition', ['Disposed'])
            ->count();
            
        $highValueAssets = DB::table('assets')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->where('cost', '>=', 1000)
            ->whereNull('assets.deleted_at')
            ->whereNotIn('conditions.condition', ['Disposed'])
            ->count();

        $sort = $request->input('sort', 'asset_tag_id');
        $direction = $request->input('direction', 'asc');
        $search = $request->input('search');

        $query = DB::table('assets')
            ->leftJoin('suppliers', 'assets.supplier_id', '=', 'suppliers.id')
            ->leftJoin('sites', 'assets.site_id', '=', 'sites.id')
            ->leftJoin('locations', 'assets.location_id', '=', 'locations.id')
            ->leftJoin('categories', 'assets.category_id', '=', 'categories.id')
            ->leftJoin('departments', 'assets.department_id', '=', 'departments.id')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->leftJoin('statuses', 'assets.status_id', '=', 'statuses.id')
            ->leftJoin('brands', 'assets.brand_id', '=', 'brands.id')
            ->select('assets.*', 
                'suppliers.supplier as supplier_name', 
                'sites.site as site_name', 
                'statuses.status as status_name',
                'conditions.condition as condition_name',
                'locations.location as location_name', 
                'categories.category as category_name', 
                'departments.department as department_name',
                'brands.brand as brand_name'
            )
            ->whereNotIn('conditions.condition', ['Disposed']);

        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('assets.asset_tag_id', 'like', '%' . $search . '%')
                    ->orWhere('suppliers.supplier', 'like', '%' . $search . '%')
                    ->orWhere('sites.site', 'like', '%' . $search . '%')
                    ->orWhere('locations.location', 'like', '%' . $search . '%')
                    ->orWhere('categories.category', 'like', '%' . $search . '%')
                    ->orWhere('departments.department', 'like', '%' . $search . '%')
                    ->orWhere('brands.brand', 'like', '%' . $search . '%');
            });
        }

        if (!empty($categories)) {
            $query->whereIn('assets.category_id', $categories);
        }
        if (!empty($departments)) {
            $query->whereIn('assets.department_id', $departments);
        }
        if (!empty($locations)) {
            $query->whereIn('assets.location_id', $locations);
        }
        if (!empty($sites)) {
            $query->whereIn('assets.site_id', $sites);
        }
        if (!empty($suppliers)) {
            $query->whereIn('assets.supplier_id', $suppliers);
        }
        if (!empty($brands)) {
            $query->whereIn('assets.brand_id', $brands);
        }

        if ($request->input('clear') == 'true') {
            return redirect()->route('asset.list');
        }
        if (!empty($conditions)) {
            $query->whereIn('assets.condition_id', $conditions);
        }
        if (!empty($statuses)) {
            $query->whereIn('assets.status_id', $statuses);
        }

        $query->orderBy($sort, $direction);

        $assets = $query->whereNull('assets.deleted_at')
            ->paginate(15)
            ->appends($request->all());

        $allCategories = DB::table('categories')->get();
        $allDepartments = DB::table('departments')->get();
        $allLocations = DB::table('locations')->get();
        $allSites = DB::table('sites')->get();
        $allSuppliers = DB::table('suppliers')->get();
        $allBrands = DB::table('brands')->get();
        
        return view('fcu-ams/asset/assetList', array_merge(
            compact(
                'totalAssets',
                'totalCost',
                'lowValueAssets',
                'highValueAssets',
                'assets',
                'sort',
                'direction',
                'search'
            ),
            [
                'allCategories' => $allCategories,
                'allDepartments' => $allDepartments,
                'allLocations' => $allLocations,
                'allSites' => $allSites,
                'allSuppliers' => $allSuppliers,
                'allBrands' => $allBrands,
                'selectedCategories' => $categories,
                'selectedDepartments' => $departments,
                'selectedLocations' => $locations,
                'selectedSites' => $sites,
                'selectedSuppliers' => $suppliers,
                'selectedBrands' => $brands,
                'allConditions' => DB::table('conditions')->get(),
                'allStatuses' => DB::table('statuses')->get(),
                'selectedConditions' => $conditions,
                'selectedStatuses' => $statuses,
            ]
        ));
    }

    public function search(Request $request)
    {
        $searchQuery = $request->input('search');
        $query = DB::table('assets')
            ->leftJoin('suppliers', 'assets.supplier_id', '=', 'suppliers.id')
            ->leftJoin('categories', 'assets.category_id', '=', 'categories.id')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->leftJoin('statuses', 'assets.status_id', '=', 'statuses.id')
            ->select(
                'assets.*',
                'suppliers.supplier as supplier_name',
                'categories.category as category_name',
                'conditions.condition as condition_name',
                'statuses.status as status_name'
            )
            ->where(function($q) use ($searchQuery) {
                $q->where('assets.asset_tag_id', 'like', '%' . $searchQuery . '%')
                  ->orWhere('assets.assigned_to', 'like', '%' . $searchQuery . '%')
                  ->orWhere('suppliers.supplier', 'like', '%' . $searchQuery . '%')
                  ->orWhere('categories.category', 'like', '%' . $searchQuery . '%')    
                  ->orWhere('conditions.condition', 'like', '%' . $searchQuery . '%');
            })
            ->whereNull('assets.deleted_at');

        // Apply filters if they exist
        if ($request->has('conditions')) {
            $conditions = $request->input('conditions');
            if (is_array($conditions)) {
                $query->whereIn('assets.condition_id', $conditions);
            }
        }
        if ($request->has('categories')) {
            $categories = $request->input('categories');
            if (is_array($categories)) {
                $query->whereIn('assets.category_id', $categories);
            }
        }
        if ($request->has('statuses')) {
            $statuses = $request->input('statuses');
            if (is_array($statuses)) {
                $query->whereIn('assets.status_id', $statuses);
            }
        }
        if ($request->has('departments')) {
            $departments = $request->input('departments');
            if (is_array($departments)) {
                $query->whereIn('assets.department_id', $departments);
            }
        }
        if ($request->has('brands')) {
            $brands = $request->input('brands');
            if (is_array($brands)) {
                $query->whereIn('assets.brand_id', $brands);
            }
        }

        $assets = $query->get();

        // Log the query for debugging
        \Log::info('Search Query:', [
            'sql' => $query->toSql(),
            'bindings' => $query->getBindings(),
            'results_count' => $assets->count()
        ]);

        return response()->json([
            'assets' => $assets
        ]);
    }

    public function create() {
        $suppliers = DB::table('suppliers')->get();
        $sites = DB::table('sites')->get();
        $locations = DB::table('locations')->get();
        $categories = DB::table('categories')->get();
        $departments = DB::table('departments')->get();
        $conditions = DB::table('conditions')->get();
        $statuses = DB::table('statuses')->get();
        $brands = DB::table('brands')->get();
        return view('fcu-ams/asset/addAsset', compact('suppliers', 'sites', 'locations', 'categories',
        'departments', 'conditions', 'statuses', 'brands'));
    }

    public function show($id)
    {
        $asset = Asset::with(['supplier', 'site', 'location', 'category', 'department', 'condition'])->findOrFail($id);
        
        // Get paginated edit history
        $editHistory = $asset->editHistory()
            ->orderBy('created_at', 'desc')
            ->paginate(10);

        $suppliers = DB::table('suppliers')->get();
        $sites = DB::table('sites')->get();
        $locations = DB::table('locations')->get();
        $categories = DB::table('categories')->get();
        $departments = DB::table('departments')->get();
        $conditions = DB::table('conditions')->get();
        $brands = DB::table('brands')->get();
        $statuses = DB::table('statuses')->get();
        
        return view('fcu-ams/asset/viewAsset', compact('asset', 'editHistory', 'suppliers', 'sites', 'locations', 'categories',
        'departments', 'conditions', 'statuses', 'brands'));
    }

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'asset_tag_id' => [
                'required',
                'string',
                Rule::unique('assets', 'asset_tag_id')->whereNull('deleted_at'),
            ],
            'brand_id' => 'required|integer|exists:brands,id',
            'model' => 'required|string',
            'specs' => 'nullable',
            'serial_number' => 'required|string',
            'cost' => 'required|numeric',
            'supplier_id' => 'required|integer|exists:suppliers,id',
            'site_id' => 'required|integer|exists:sites,id',
            'location_id' => 'required|integer|exists:locations,id',
            'category_id' => 'required|integer|exists:categories,id',
            'department_id' => 'required|integer|exists:departments,id',
            'purchase_date' => 'required|date',
            'asset_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'assigned_to' => 'nullable|string|max:255',
            'issued_date' => 'nullable|date',
            'notes' => 'nullable|string|max:1000',
            'created_by' => 'nullable|integer|exists:users,id'
        ]);

        $asset = new Asset();
        $asset->asset_tag_id = $validatedData['asset_tag_id'];
        $asset->model = $validatedData['model'];
        $asset->specs = $validatedData['specs'] ?? '';
        $asset->serial_number = $validatedData['serial_number'];
        $asset->cost = $validatedData['cost'];
        $asset->supplier_id = $validatedData['supplier_id'];
        $asset->brand_id = $validatedData['brand_id'];
        $asset->site_id = $validatedData['site_id'];
        $asset->location_id = $validatedData['location_id'];
        $asset->category_id = $validatedData['category_id'];
        $asset->department_id = $validatedData['department_id'];
        $asset->condition_id = Condition::where('condition', 'New')->first()->id;
        $asset->status_id = Status::where('status', 'Available')->first()->id;
        $asset->purchase_date = $validatedData['purchase_date'];
        $asset->assigned_to = $validatedData['assigned_to'];
        $asset->issued_date = $validatedData['issued_date'];
        $asset->notes = $validatedData['notes'];
        $asset->created_by = auth()->user()->id;

        if ($request->hasFile('asset_image')) {
            $imageName = time().'.'.$request->asset_image->extension();
            $request->asset_image->move(public_path('profile'), $imageName);
            $asset->asset_image = 'profile/'.$imageName;
        }

        $asset->save();

        return redirect()->route('asset.add')->with('success', 'Asset added successfully.');
    }

    public function edit($id)
    {
        $asset = Asset::findOrFail($id);
        $suppliers = DB::table('suppliers')->get();
        $sites = DB::table('sites')->get();
        $locations = DB::table('locations')->get();
        $categories = DB::table('categories')->get();
        $departments = DB::table('departments')->get();
        $conditions = DB::table('conditions')->get();
        $brands = DB::table('brands')->get();
        $statuses = DB::table('statuses')->get();
        
        $disposedStatuses = DisposedStatus::all();
        
        return view('fcu-ams/asset/updateAsset', compact('asset', 'suppliers', 'sites', 'locations', 'categories',
        'departments', 'conditions', 'statuses', 'brands', 'disposedStatuses'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'asset_tag_id' => [
                'required',
                'string',
                Rule::unique('assets', 'asset_tag_id')->whereNull('deleted_at')->ignore($id),
            ],
            'brand_id' => 'required|integer|exists:brands,id',
            'model' => 'required|string',
            'specs' => 'nullable',
            'serial_number' => 'required|string',
            'cost' => 'required|numeric',
            'supplier_id' => 'required|integer|exists:suppliers,id',
            'site_id' => 'required|integer|exists:sites,id',
            'location_id' => 'required|integer|exists:locations,id',
            'category_id' => 'required|integer|exists:categories,id',
            'department_id' => 'required|integer|exists:departments,id',
            'status_id' => 'required|integer|exists:statuses,id',
            'condition_id' => 'required|integer|exists:conditions,id',
            'purchase_date' => 'required|date',
            'asset_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'disposed_amount' => 'nullable|numeric|min:0',
            'disposed_status_id' => 'nullable|exists:disposed_statuses,id',
            'assigned_to' => 'nullable|string|max:255',
            'issued_date' => 'nullable|date',
            'notes' => 'nullable|string|max:1000'
        ]);

        $asset = Asset::findOrFail($id);
        $oldAsset = clone $asset;

        // Check if asset is being newly assigned (has return date but now getting new assignment)
        if ($asset->return_date && $validatedData['assigned_to']) {
            $asset->return_date = null;
            $asset->returned_at = null;
        }

        // Set issued_date when asset is newly assigned
        if ($validatedData['assigned_to'] && !$asset->assigned_to) {
            $validatedData['issued_date'] = now()->toDateString();
        }

        $asset->asset_tag_id = $validatedData['asset_tag_id'];
        $asset->model = $validatedData['model'];
        $asset->specs = $validatedData['specs'] ?? '';
        $asset->serial_number = $validatedData['serial_number'];
        $asset->cost = $validatedData['cost'];
        $asset->supplier_id = $validatedData['supplier_id'];
        $asset->brand_id = $validatedData['brand_id'];
        $asset->site_id = $validatedData['site_id'];
        $asset->location_id = $validatedData['location_id'];
        $asset->category_id = $validatedData['category_id'];
        $asset->department_id = $validatedData['department_id'];
        $asset->status_id = $validatedData['status_id'];
        $asset->condition_id = $validatedData['condition_id'];
        $asset->purchase_date = $validatedData['purchase_date'];
        $asset->assigned_to = $validatedData['assigned_to'];
        $asset->issued_date = $validatedData['issued_date'];
        $asset->notes = $validatedData['notes'];

        if ($request->input('condition_id') == Condition::where('condition', 'Maintenance')->first()->id) {
            if ($request->input('maintenance_start_date') !== '') {
                $asset->maintenance_start_date = $request->input('maintenance_start_date');
            }
            if ($request->input('maintenance_end_date') !== '') {
                $asset->maintenance_end_date = $request->input('maintenance_end_date');
            }
            // Set status to Unavailable when condition is maintenance
            $unavailableStatus = Status::where('status', 'Unavailable')->first();
            if ($unavailableStatus) {
                $asset->status_id = $unavailableStatus->id;
            }
        } elseif ($request->input('condition_id') == Condition::where('condition', 'Disposed')->first()->id) {
            // Set status to Unavailable when condition is Disposed
            $unavailableStatus = Status::where('status', 'Unavailable')->first();
            if ($unavailableStatus) {
                $asset->status_id = $unavailableStatus->id;
            }
            // Set disposed amount and status when condition is Disposed
            if ($request->filled('disposed_amount')) {
                $asset->disposed_amount = $request->input('disposed_amount');
            }
            if ($request->filled('disposed_status_id')) {
                $asset->disposed_status_id = $request->input('disposed_status_id');
            }
        } else {
            // Clear maintenance dates if condition is not maintenance
            $asset->maintenance_start_date = null;
            $asset->maintenance_end_date = null;
            // Clear disposed amount and status if condition is not disposed
            if ($oldAsset->condition_id == Condition::where('condition', 'Disposed')->first()->id) {
                $asset->disposed_amount = null;
                $asset->disposed_status_id = null;
            }
            // Set status back to Available if it was previously in maintenance or Disposed
            if ($oldAsset->condition_id == Condition::where('condition', 'Maintenance')->first()->id || 
                $oldAsset->condition_id == Condition::where('condition', 'Disposed')->first()->id) {
                $availableStatus = Status::where('status', 'Available')->first();
                if ($availableStatus) {
                    $asset->status_id = $availableStatus->id;
                }
            }
        }

        if ($request->hasFile('asset_image')) {
            $imageName = time().'.'.$request->asset_image->extension();
            $request->asset_image->move(public_path('profile'), $imageName);
            $asset->asset_image = 'profile/'.$imageName;
        }

        $this->storeEditHistory($asset, auth()->user(), $oldAsset);

        $asset->save();

        return redirect()->back()->with('success', 'Asset updated successfully.');
    }

    public function destroy($id)
    {
        $asset = Asset::findOrFail($id);

        // Explicitly set deleted_by before deleting
        $asset->deleted_by = auth()->user()->id;
        $asset->save();

        $asset->delete();

        return redirect()->back()->with('success', 'Asset deleted successfully!');
    }

    public function maintenance()
    {
        $assets = Asset::with(['brand', 'supplier', 'site', 'location', 'category', 'department', 'condition'])
            ->where('condition_id', 2)
            ->orderBy('maintenance_start_date', 'desc')
            ->paginate(15);
        $conditions = Condition::all();
        return view('fcu-ams/asset/maintenance', compact('assets', 'conditions'));
    }

    public function storeEditHistory($asset, $user, $oldAsset)
    {
        $changes = [];
        $fields = [
            'asset_tag_id' => 'Asset Tag ID',
            'brand_id' => 'Brand',
            'model' => 'Model',
            'specs' => 'Specification',
            'serial_number' => 'Serial Number',
            'cost' => 'Cost',
            'supplier_id' => 'Supplier',
            'site_id' => 'Site',
            'location_id' => 'Location',
            'category_id' => 'Category',
            'department_id' => 'Department',
            'purchase_date' => 'Purchase Date',
            'condition_id' => 'Condition',
            'status_id' => 'Status',
            'assigned_to' => 'Assigned To',
            'issued_date' => 'Date Issued',
            'notes' => 'Notes',
        ];

        foreach ($fields as $field => $header) {
            if ($asset->$field != $oldAsset->$field) {
                $oldValue = $oldAsset->$field;
                $newValue = $asset->$field;

                if (in_array($field, ['supplier_id', 'site_id', 'location_id', 'category_id', 'department_id',
                'condition_id', 'status_id', 'brand_id'])) {
                    $relationship = str_replace('_id', '', $field);
                    $oldValue = $oldAsset->$relationship->name ?? $oldAsset->$relationship->supplier ??
                        $oldAsset->$relationship->site ?? $oldAsset->$relationship->location ??
                        $oldAsset->$relationship->category ?? $oldAsset->$relationship->department ??
                        $oldAsset->$relationship->condition ?? $oldAsset->$relationship->status ??
                        $oldAsset->$relationship->brand;
                    $newValue = $asset->$relationship->name ?? $asset->$relationship->supplier ??
                        $asset->$relationship->site ?? $asset->$relationship->location ?? $asset->$relationship->category ??
                        $asset->$relationship->department ?? $asset->$relationship->condition ??
                        $asset->$relationship->status ??
                        $asset->$relationship->brand;
                }

                $changes[] = "Updated $header from '$oldValue' to '$newValue'.";
            }
        }

        if (count($changes) > 0) {
            $editHistory = new AssetEditHistory();
            $editHistory->asset_id = $asset->id;
            $editHistory->user_id = $user->id;
            $editHistory->changes = nl2br(implode("<br>", $changes));
            $editHistory->save();
        }
    }

    public function export() { 
        return Excel::download(new AssetsExport, 'assets.csv');
    }

    public function generateQrCode($id)
    {
        $asset = Asset::findOrFail($id);

        $assetData = [
            'tag_id' => $asset->asset_tag_id,
            'assigned_to' => $asset->assigned_to ?? 'Not Assigned',
            'specs' => $asset->specs,
            'brand' => $asset->brand->brand,
            'model' => $asset->model,
            'serial' => $asset->serial_number,
            'category' => $asset->category->category,
            'site' => $asset->site->site,
            'location' => $asset->location->location,
            'department' => $asset->department->department,
            'cost' => $asset->cost,
            'supplier' => $asset->supplier->supplier,
            'purchase_date' => $asset->purchase_date,
        ];

        // Create GitHub Pages URL with base64 encoded data
        $encodedData = base64_encode(json_encode($assetData));
        $githubUrl = "https://monochromat1c.github.io/forViewingAssetThroughQRCode/?data=" . $encodedData;

        $qrCode = QrCode::size(66)
            ->margin(1)
            ->backgroundColor(255, 255, 255)
            ->color(0, 0, 0)
            ->format('svg')
            ->errorCorrection('H')
            ->generate($githubUrl);
            
        return view('fcu-ams/asset/qrCode', compact('qrCode', 'id', 'asset'));
    }

    public function updateCondition(Request $request, $id)
    {
        $validatedData = $request->validate([
            'condition_id' => 'required|integer|exists:conditions,id',
            'maintenance_start_date' => 'nullable|date',
            'maintenance_end_date' => 'nullable|date|after_or_equal:maintenance_start_date'
        ]);

        $asset = Asset::findOrFail($id);
        $oldAsset = clone $asset;

        $asset->condition_id = $validatedData['condition_id'];

        // If condition is maintenance, update maintenance dates
        $maintenanceCondition = Condition::where('condition', 'Maintenance')->first();
        $toBeDisposedCondition = Condition::where('condition', 'Disposed')->first();
        
        if ($validatedData['condition_id'] == $maintenanceCondition->id) {
            $asset->maintenance_start_date = $validatedData['maintenance_start_date'];
            $asset->maintenance_end_date = $validatedData['maintenance_end_date'];
            // Set status to Unavailable when condition is maintenance
            $unavailableStatus = Status::where('status', 'Unavailable')->first();
            if ($unavailableStatus) {
                $asset->status_id = $unavailableStatus->id;
            }
        } elseif ($validatedData['condition_id'] == $toBeDisposedCondition->id) {
            // Set status to Unavailable when condition is Disposed
            $unavailableStatus = Status::where('status', 'Unavailable')->first();
            if ($unavailableStatus) {
                $asset->status_id = $unavailableStatus->id;
            }
            // Set disposed amount when condition is Disposed
            $asset->disposed_amount = $validatedData['disposed_amount'];
        } else {
            // Clear maintenance dates if condition is not maintenance
            $asset->maintenance_start_date = null;
            $asset->maintenance_end_date = null;
            // Set status back to Available if it was previously in maintenance or Disposed
            if ($oldAsset->condition_id == $maintenanceCondition->id || $oldAsset->condition_id == $toBeDisposedCondition->id) {
                $availableStatus = Status::where('status', 'Available')->first();
                if ($availableStatus) {
                    $asset->status_id = $availableStatus->id;
                }
            }
        }

        $this->storeEditHistory($asset, auth()->user(), $oldAsset);
        $asset->save();

        return redirect()->back()->with('success', 'Asset condition updated successfully.');
    }

    public function updateConditionToUsed()
    {
        $this->condition_id = Condition::where('condition', 'Used')->first()->id;
        $this->save();
    }

    public function return($id)
    {
        $asset = Asset::findOrFail($id);
        $oldAsset = clone $asset;

        // Clear assignment details and set return timestamp
        $asset->assigned_to = null;
        $asset->issued_date = null;
        $asset->return_date = now()->toDateString(); // Add return date
        $asset->returned_at = now();
        
        // Update status to Available
        $availableStatus = Status::where('status', 'Available')->first();
        if ($availableStatus) {
            $asset->status_id = $availableStatus->id;
        }

        // Update condition to Used
        $usedCondition = Condition::where('condition', 'Used')->first();
        if ($usedCondition) {
            $asset->condition_id = $usedCondition->id;
        }

        // Store the edit history
        $this->storeEditHistory($asset, auth()->user(), $oldAsset);

        $asset->save();

        return redirect()->route('asset.list')->with('success', 'Asset has been returned successfully.');
    }

    public function disposed(Request $request)
    {
        $sort = $request->input('sort', 'asset_tag_id');
        $direction = $request->input('direction', 'asc');
        $search = $request->input('search');

        $query = DB::table('assets')
            ->leftJoin('suppliers', 'assets.supplier_id', '=', 'suppliers.id')
            ->leftJoin('sites', 'assets.site_id', '=', 'sites.id')
            ->leftJoin('locations', 'assets.location_id', '=', 'locations.id')
            ->leftJoin('categories', 'assets.category_id', '=', 'categories.id')
            ->leftJoin('departments', 'assets.department_id', '=', 'departments.id')
            ->leftJoin('conditions', 'assets.condition_id', '=', 'conditions.id')
            ->leftJoin('statuses', 'assets.status_id', '=', 'statuses.id')
            ->leftJoin('brands', 'assets.brand_id', '=', 'brands.id')
            ->leftJoin('disposed_statuses', 'assets.disposed_status_id', '=', 'disposed_statuses.id')
            ->select('assets.*', 
                'suppliers.supplier as supplier_name', 
                'sites.site as site_name', 
                'statuses.status as status_name',
                'conditions.condition as condition_name',
                'locations.location as location_name', 
                'categories.category as category_name', 
                'departments.department as department_name',
                'brands.brand as brand_name',
                'disposed_statuses.status as disposed_status_name'
            )
            ->whereIn('conditions.condition', ['Disposed'])
            ->whereNull('assets.deleted_at');

        if ($search) {
            $query->where(function ($q) use ($search) {
                $q->where('assets.asset_tag_id', 'like', '%' . $search . '%')
                    ->orWhere('suppliers.supplier', 'like', '%' . $search . '%')
                    ->orWhere('sites.site', 'like', '%' . $search . '%')
                    ->orWhere('locations.location', 'like', '%' . $search . '%')
                    ->orWhere('categories.category', 'like', '%' . $search . '%')
                    ->orWhere('departments.department', 'like', '%' . $search . '%')
                    ->orWhere('brands.brand', 'like', '%' . $search . '%');
            });
        }

        $query->orderBy($sort, $direction);

        $disposedAssets = $query->paginate(15)
            ->appends($request->all());

        return view('fcu-ams/asset/disposedAssets', compact(
            'disposedAssets',
            'sort',
            'direction',
            'search'
        ));
    }
}
</file>

<file path="resources/views/fcu-ams/dashboard.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<div x-data="{ 
    sidebarOpen: window.innerWidth >= 768,
    isMobile: window.innerWidth < 768,
    init() {
        window.addEventListener('resize', () => {
            this.isMobile = window.innerWidth < 768;
            if (!this.isMobile) {
                this.sidebarOpen = true;
            }
        });
    }
}" class="relative grid grid-cols-1 md:grid-cols-6">
    <!-- Mobile Sidebar Overlay -->
    <div x-show="sidebarOpen && isMobile" 
         class="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-300"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         @click="sidebarOpen = false">
    </div>

    <!-- Sidebar -->
    <div x-show="sidebarOpen" 
         class="fixed md:relative w-64 md:w-auto inset-y-0 left-0 z-50 md:z-0 transform transition-transform duration-300 ease-in-out"
         :class="{'translate-x-0': sidebarOpen, '-translate-x-full': !sidebarOpen}"
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="-translate-x-full"
         x-transition:enter-end="translate-x-0"
         x-transition:leave="transition ease-in duration-300"
         x-transition:leave-start="translate-x-0"
         x-transition:leave-end="-translate-x-full">
        
        <!-- Mobile Close Button -->
        <button @click="sidebarOpen = false" 
                class="md:hidden absolute top-4 right-4 p-2 rounded-full hover:bg-gray-200 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>

        @include('layouts.sidebar')
    </div>

    <div :class="{ 'md:col-span-5': sidebarOpen, 'md:col-span-6': !sidebarOpen }" 
         class="bg-slate-200 content min-h-screen w-full transition-all duration-300">
        <nav class="bg-white flex justify-between py-3 px-4 m-3 shadow-md rounded-md">
            <button @click="sidebarOpen = !sidebarOpen" class="p-2 rounded-lg hover:bg-gray-100 transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
            </button>
            <h1 class="my-auto text-3xl">Dashboard</h1>
            <div class="relative" x-data="{ open: false }">
                <button @click="open = !open" class="flex gap-3 focus:outline-none" style="min-width:100px;">
                    <div>
                         @if(auth()->user()->profile_picture)
                            <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @else
                            <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Image"
                                class="w-14 h-14 object-cover bg-no-repeat rounded-full mx-auto">
                        @endif
                    </div>
                </button>
                <div x-show="open" 
                    @click.away="open = false"
                    class="absolute right-0 mt-4 w-72 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                    <div class="p-4 border-b border-gray-100 rounded-t-lg bg-gradient-to-r from-gray-100 to-gray-200">
                        <div class="flex items-start">
                            <div class="flex-shrink-0">
                                @if(auth()->user()->profile_picture)
                                    <img src="{{ asset(auth()->user()->profile_picture) }}" alt="User Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @else
                                    <img src="{{ asset('profile/defaultProfile.png') }}" alt="Default Profile"
                                        class="w-12 h-12 rounded-full object-cover ring-2 ring-blue-500">
                                @endif
                            </div>
                            <div class="ml-3 flex-grow">
                                <div class="font-semibold text-base text-gray-800">{{ auth()->user()->first_name }} {{ auth()->user()->last_name }}</div>
                                <div class="text-sm text-gray-600">{{ auth()->user()->email }}</div>
                            </div>
                            <a href="{{ route('profile.index') }}" class="ml-2 p-1 hover:bg-gray-100 rounded-full transition-colors duration-200">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 hover:text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                    <path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" />
                                </svg>
                            </a>
                        </div>
                    </div>
                    <div class="divide-y divide-gray-200">
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd"
                                    d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd" />
                            </svg>
                            <p class="font-medium">Role</p>
                            <p class="ml-auto text-gray-600">{{ auth()->user()->role->role }}</p>
                        </div>
                        <div class="flex items-center px-4 py-3.5 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Username</span>
                            <span class="ml-auto text-gray-600">{{ auth()->user()->username }}</span>
                        </div>
                        <button onclick="document.getElementById('logout-modal').classList.toggle('hidden')"
                            class="flex items-center px-4 py-3.5 text-red-600 hover:bg-red-50 w-full text-left transition-colors duration-200">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clip-rule="evenodd" />
                            </svg>
                            <span class="font-medium">Logout</span>
                        </button>
                    </div>
                </div>
            </div>
        </nav>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 p-4">
            <a href="{{ route('asset.list') }}" class="dashboard-card">
                <div class="p-6">
                    <div class="flex align-items-center mb-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mr-3 text-blue-600" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                                clip-rule="evenodd" />
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-800">Assets</h3>
                    </div>
                    <p class="text-3xl font-bold text-gray-900">{{ $totalAssets }}</p>
                </div>
            </a>
            <div class="dashboard-card">
                <div class="p-6">
                    <div class="flex align-items-center mb-3">
                        <svg class="h-10 w-10 mr-3 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                            stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-800">Asset Value</h3>
                    </div>
                    <p class="text-3xl font-bold text-gray-900">₱{{ number_format($totalAssetValue, 2) }}</p>
                </div>
            </div>
            <a href="{{ route('inventory.list') }}" class="dashboard-card">
                <div class="p-6">
                    <div class="flex items-center mb-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 mr-3 text-purple-600" fill="none"
                            viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-800">Inventory Supplies</h3>
                    </div>
                    <p class="text-3xl font-bold text-gray-900">{{ $totalInventoryStocks }}</p>
                </div>
            </a>
            <div class="dashboard-card">
                <div class="p-6">
                    <div class="flex align-items-center mb-3">
                        <svg class="h-10 w-10 mr-3 text-orange-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                            stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                        <h3 class="text-lg font-semibold text-gray-800">Inventory Value</h3>
                    </div>
                    <p class="text-3xl font-bold text-gray-900">₱{{ number_format($totalInventoryValue, 2) }}</p>
                </div>
            </div>
            <div class="chart-container md:col-span-2">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Asset Value Distribution</h3>
                <canvas id="assetValueDistributionChart"></canvas>
                <div id="assetValueLegend" class="mt-4"></div>
            </div>
            <div class="chart-container md:col-span-2">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">Inventory Value Distribution</h3>
                <canvas id="inventoryValueDistributionChart"></canvas>
                <div id="inventoryValueLegend" class="mt-4"></div>
            </div>
            <!-- RECENT REQUESTS -->
            <div class="md:col-span-2 bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
                <div class="px-4 sm:px-6 py-4 bg-gray-50 border-b border-gray-200 flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-2 sm:space-y-0">
                    <h3 class="text-lg sm:text-xl font-bold text-gray-800 tracking-tight">Recent Requests</h3>
                    <a href="{{ route('requests.index') }}" class="text-blue-600 hover:text-blue-800 text-sm">View All Requests</a>
                </div>
                <div class="divide-y divide-gray-100">
                    @php
                        $hasDisplayableRequests = false;
                    @endphp
                    @forelse($recentRequests as $request)
                        @if($request->group_status !== 'cancelled')
                            @php
                                $hasDisplayableRequests = true;
                            @endphp
                            <a href="{{ route('inventory.supply-request.details', $request->request_group_id) }}" class="block">
                                <div class="px-4 sm:px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                                    <div class="flex justify-between items-center">
                                        <div class="flex-1">
                                            <p class="text-sm font-medium text-gray-900">
                                                {{ $request->requester }}
                                                <span class="text-xs text-gray-500">
                                                    ({{ $request->department->department }})
                                                </span>
                                            </p>
                                            <p class="text-sm text-gray-500">
                                                Requested {{ $request->items_count }} {{ Str::plural('item', $request->items_count) }}
                                            </p>
                                            <p class="text-xs text-gray-400">
                                                {{ date('M j Y', strtotime($request->request_date)) }}
                                            </p>
                                        </div>
                                        <div>
                                            <span class="px-3 py-1 text-xs font-medium rounded-full
                                                {{ $request->group_status === 'pending' ? 'bg-yellow-100 px-5 py-[.50rem] text-yellow-800' : 
                                                   ($request->group_status === 'approved' ? 'bg-green-100 px-5 py-[.50rem] text-green-800' : 
                                                   ($request->group_status === 'partially_approved' ? 'bg-blue-100 px-5 py-[.50rem] text-blue-800' :
                                                   'bg-red-100 px-5 py-[.50rem] text-red-800')) }}">
                                                {{ ucfirst(str_replace('_', ' ', $request->group_status)) }}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </a>
                            {{-- testtesttest --}}
                        @endif
                    @empty
                        <div class="px-4 sm:px-6 py-4">
                            <p class="text-sm text-gray-500">No recent requests</p>
                        </div>
                    @endforelse
                    @if(!$hasDisplayableRequests && count($recentRequests) > 0)
                        <div class="px-4 sm:px-6 py-4">
                            <p class="text-sm text-gray-500">No recent requests</p>
                        </div>
                    @endif
                </div>
            </div>
            <!-- RECENT ACTIONS -->
            <div class="md:col-span-2 bg-white rounded-xl shadow-md border border-gray-100 overflow-hidden">
                <div class="px-4 sm:px-6 py-4 bg-gray-50 border-b border-gray-200 flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-2 sm:space-y-0">
                    <h3 class="text-lg sm:text-xl font-bold text-gray-800 tracking-tight">Recent Actions</h3>
                    <a href="{{ route('activities.index') }}" class="text-blue-600 hover:text-blue-800 text-sm">View All Actions</a>
                </div>
                <div class="divide-y divide-gray-100">
                    @foreach($recentActions as $action)
                        <a href="{{ $action['type'] === 'Asset' ? route('asset.view', $action['id']) : route('inventory.view', $action['id']) }}" 
                           class="block hover:bg-gray-50 transition-colors duration-150">
                            <div class="px-4 sm:px-6 py-4">
                                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-2 sm:space-y-0">
                                    <div class="flex items-center space-x-4">
                                        @if($action['type'] === 'Asset')
                                            @if($action['action'] === 'added')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="size-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0Z" />
                                                </svg>
                                            @elseif($action['action'] === 'removed')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="size-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                </svg>
                                            @else
                                                <svg xmlns="http://www.w3.org/2000/svg" class="size-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                </svg>
                                            @endif
                                        @elseif($action['type'] === 'Inventory')
                                            @if($action['action'] === 'added')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="size-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2m0 0h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z" />
                                                </svg>
                                            @elseif($action['action'] === 'removed')
                                                <svg xmlns="http://www.w3.org/2000/svg" class="size-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                            @else
                                                <svg xmlns="http://www.w3.org/2000/svg" class="size-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                                                </svg>
                                            @endif
                                        @endif
                                        
                                        <div>
                                            <p class="text-sm font-medium text-gray-900">
                                                <span class="font-semibold">{{ $action['name'] }}</span> 
                                                <span class="text-gray-600">was {{ $action['action'] }} by</span> 
                                                <span class="font-semibold text-gray-800">{{ $action['user'] }}</span>
                                            </p>
                                            <p class="text-sm text-gray-500">{{ $action['date'] }}</p>
                                        </div>
                                    </div>
                                    
                                    <div class="flex items-center space-x-3">
                                        <span class="text-xs font-medium px-5 py-[.50rem] rounded-full 
                                            @if($action['type'] === 'Asset') bg-blue-100 text-blue-700
                                            @elseif($action['type'] === 'Inventory') bg-green-100 text-green-700
                                            @endif">
                                            {{ $action['type'] }}
                                        </span>
                                        <button type="button" 
                                            class="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center"
                                            onclick="event.stopPropagation();">
                                            
                                            View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </a>
                    @endforeach
                </div>
            </div>
            <!-- MONTHLY ASSET ACQUISITION -->
            <div class="chart-container md:col-span-4">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-800">Monthly Asset Acquisition</h3>
                    <form method="GET" action="{{ route('dashboard') }}" class="flex items-center">
                        <label for="yearFilter" class="mr-2 text-gray-600">Year:</label>
                        <select name="year" id="yearFilter" 
                            class="form-select border rounded-md px-3 py-1.5 text-gray-700 bg-white hover:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            onchange="this.form.submit()">
                            @foreach($availableYears as $year)
                                <option value="{{ $year }}"
                                    {{ $selectedYear == $year ? 'selected' : '' }}>
                                    {{ $year }}
                                </option>
                            @endforeach
                        </select>
                    </form>
                </div>
                <canvas id="assetAcquisitionChart" class=""></canvas>
            </div>
        </div>
    </div>
</div>

<script src="{{ asset('js/chart.js') }}"></script>
<script>
    // Monthly asset acquisition 
    const assetAcquisitionChart = document.getElementById('assetAcquisitionChart').getContext('2d');
    const assetAcquisitionData = {!! json_encode($assetAcquisition) !!};
    const selectedYear = {{ $selectedYear }};
    
    // Prepare data for chart
    const assetAcquisitionLabels = assetAcquisitionData.map(data => data.month);
    const assetAcquisitionValues = assetAcquisitionData.map(data => data.count);
    const assetAcquisitionAssetTags = assetAcquisitionData.map(data => data.asset_tags);

    // Color palette for consistent and visually appealing colors
    const colorPalette = [
        'rgba(69, 123, 157, 0.8)',   // Soft Blue
        'rgba(124, 181, 236, 0.8)',  // Light Blue
        'rgba(144, 237, 125, 0.8)',  // Soft Green
        'rgba(247, 163, 92, 0.8)',   // Soft Orange
        'rgba(128, 133, 233, 0.8)',  // Periwinkle
        'rgba(241, 92, 128, 0.8)',   // Soft Red
        'rgba(228, 211, 84, 0.8)',   // Soft Yellow
        'rgba(175, 216, 248, 0.8)',  // Sky Blue
        'rgba(187, 155, 176, 0.8)',  // Soft Purple
        'rgba(153, 198, 142, 0.8)',  // Sage Green
        'rgba(242, 140, 40, 0.8)',   // Tangerine
        'rgba(166, 216, 184, 0.8)'   // Mint Green
    ];

    // Generate dynamic colors for each month
    const backgroundColor = assetAcquisitionLabels.map((label, index) => 
        colorPalette[index % colorPalette.length]
    );

    const borderColor = backgroundColor.map(color => 
        color.replace('0.8)', '1)')
    );

    // Create the chart
    const chart = new Chart(assetAcquisitionChart, {
        type: 'bar',
        data: {
            labels: assetAcquisitionLabels,
            datasets: [{
                label: `Monthly Asset Acquisition (${selectedYear})`,
                data: assetAcquisitionValues,
                backgroundColor: backgroundColor,
                borderColor: borderColor,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            aspectRatio: 3,
            title: {
                display: true,
                text: `Monthly Asset Acquisition (${selectedYear})`
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        precision: 0  // Ensure whole numbers
                    }
                }]
            },
            tooltips: {
                mode: 'index',
                intersect: false,
                callbacks: {
                    label: function(tooltipItem, data) {
                        const index = tooltipItem.index;
                        const count = assetAcquisitionValues[index];
                        const assetTags = assetAcquisitionAssetTags[index];
                        
                        // Customize tooltip to show more information
                        return [
                            `Assets Acquired: ${count}`,
                            `Asset Tags: ${assetTags || 'No specific tags'}`
                        ];
                    },
                    title: function(tooltipItems) {
                        return `${tooltipItems[0].label} ${selectedYear}`;
                    }
                }
            },
            hover: {
                mode: 'nearest',
                intersect: true
            },
            legend: {
                display: false  // Hide legend as it's a single dataset
            },
            plugins: {
                // Optional: Add data labels
                datalabels: {
                    color: 'black',
                    anchor: 'end',
                    align: 'top',
                    formatter: function(value) {
                        return value > 0 ? value : '';
                    }
                }
            }
        }
    });

    // Optional: Responsive resize handler
    window.addEventListener('resize', function() {
        chart.resize();
    });
</script>
<script>
    // Depreciation Trends Chart
    const depreciationTrendsChart = document.getElementById('depreciationTrendsChart').getContext('2d');
    const depreciationTrendsData = {!! json_encode($depreciationTrends) !!};
    const depreciationYears = depreciationTrendsData.map(data => data.year);
    const totalCosts = depreciationTrendsData.map(data => data.total_cost);
    const currentValues = depreciationTrendsData.map(data => data.current_value);
    const depreciationAmounts = depreciationTrendsData.map(data => data.depreciation);

    new Chart(depreciationTrendsChart, {
        type: 'line',
        data: {
            labels: depreciationYears,
            datasets: [
                {
                    label: 'Total Cost',
                    data: totalCosts,
                    borderColor: 'rgba(69, 123, 157, 1)',  // Soft Blue
                    backgroundColor: 'rgba(69, 123, 157, 0.2)',
                    fill: false
                },
                {
                    label: 'Current Value',
                    data: currentValues,
                    borderColor: 'rgba(124, 181, 236, 1)',  // Light Blue
                    backgroundColor: 'rgba(124, 181, 236, 0.2)',
                    fill: false
                },
                {
                    label: 'Depreciation',
                    data: depreciationAmounts,
                    borderColor: 'rgba(247, 163, 92, 1)',  // Soft Orange
                    backgroundColor: 'rgba(247, 163, 92, 0.2)',
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
            title: {
                display: true,
                text: 'Asset Depreciation Trends'
            },
            tooltips: {
                mode: 'index',
                intersect: false,
            },
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true,
                        callback: function(value) {
                            return '₱' + value.toLocaleString();
                        }
                    }
                }]
            }
        }
    });
</script>
<script>
    // Asset Value Distribution Chart
    const assetValueDistributionChart = document.getElementById('assetValueDistributionChart').getContext('2d');
    const assetValueDistributionData = {!! json_encode($assetValueDistribution) !!};
    
    // Function to process asset data
    function processAssetData(data, thresholdPercentage = 3) {
        // Validate input data
        if (!data || data.length === 0) {
            console.error('No asset data available');
            return [];
        }

        // Sort data by total value in descending order
        const sortedData = data.sort((a, b) => b.total_value - a.total_value);
        
        // Separate major and minor categories
        const majorCategories = sortedData.filter(item => item.percentage >= thresholdPercentage);
        const minorCategories = sortedData.filter(item => item.percentage < thresholdPercentage);
        
        // Combine minor categories
        const combinedMinorCategories = {
            category: 'Other Categories',
            total_value: minorCategories.reduce((sum, item) => sum + item.total_value, 0),
            asset_count: minorCategories.reduce((sum, item) => sum + item.asset_count, 0),
            percentage: minorCategories.reduce((sum, item) => sum + item.percentage, 0).toFixed(2)
        };

        // Combine results
        const processedData = [...majorCategories, combinedMinorCategories];
        
        return processedData;
    }

    // Function to generate unique colors
    function generateUniqueColors(count) {
        const baseColors = [
            'hsla(210, 50%, 45%, 0.8)',  // Muted Blue
            'hsla(150, 50%, 45%, 0.8)',  // Muted Green
            'hsla(20, 50%, 45%, 0.8)',   // Muted Orange
            'hsla(270, 50%, 45%, 0.8)',  // Muted Purple
            'hsla(180, 50%, 45%, 0.8)',  // Muted Teal
            'hsla(0, 50%, 45%, 0.8)',    // Muted Red
            'hsla(45, 50%, 45%, 0.8)',   // Muted Gold
            'hsla(330, 50%, 45%, 0.8)',  // Muted Pink
        ];

        if (count <= baseColors.length) {
            return baseColors.slice(0, count);
        }

        const colors = [...baseColors];
        for (let i = baseColors.length; i < count; i++) {
            const hue = (i * 360 / count) % 360;
            const color = `hsla(${hue}, 50%, 45%, 0.8)`;
            colors.push(color);
        }
        return colors;
    }

    // Process the asset data
    const processedAssetData = processAssetData(assetValueDistributionData);
    
    // Safety check
    if (processedAssetData.length === 0) {
        console.error('No processed asset data to display');
        document.getElementById('assetValueDistributionChart').innerHTML = 'No Asset Data Available';
    } else {
        // Generate colors for processed data
        const backgroundColors = generateUniqueColors(processedAssetData.length);

        // Prepare data for chart
        const categories = processedAssetData.map(item => item.category);
        const totalValues = processedAssetData.map(item => item.total_value);

        // Create the chart
        const chart = new Chart(assetValueDistributionChart, {
            type: 'doughnut',
            data: {
                labels: categories,
                datasets: [{
                    data: totalValues,
                    backgroundColor: backgroundColors,
                    borderColor: backgroundColors.map(color => color.replace('0.8)', '1)')),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                aspectRatio: 2.5,
                title: {
                    display: true,
                    text: 'Asset Value Distribution by Category'
                },
                tooltips: {
                    callbacks: {
                        label: function(tooltipItem, data) {
                            const dataset = data.datasets[tooltipItem.datasetIndex];
                            const total = dataset.data.reduce((a, b) => a + b, 0);
                            const currentValue = dataset.data[tooltipItem.index];
                            const percentage = ((currentValue/total)*100).toFixed(2);
                            return `₱${currentValue.toLocaleString()} (${percentage}%)`;
                        }
                    }
                }
            }
        });

        // Expandable Legend 
        function createAssetExpandableLegend() {
            const container = document.getElementById('assetValueLegend');
            container.innerHTML = ''; // Clear previous content
            
            if (processedAssetData.length === 0) {
                container.innerHTML = 'No legend data available';
                return;
            }

            // Create legend container wrapper
            const legendWrapper = document.createElement('div');
            legendWrapper.className = 'relative';
            
            // Create scrollable legend content
            const legendContent = document.createElement('div');
            legendContent.id = 'assetLegendContent';
            legendContent.className = 'max-h-32 overflow-hidden transition-all duration-300 relative';
            
            // Append legend items
            processedAssetData.forEach((item, index) => {
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center mb-2';
                legendItem.innerHTML = `
                    <span class="inline-block w-4 h-4 mr-2" style="background-color: ${backgroundColors[index]}"></span>
                    <span class="mr-2">${item.category}:</span>
                    <span class="font-bold">₱${item.total_value.toLocaleString()} (${item.percentage}%)</span>
                    <span class="ml-2 text-gray-500">(${item.asset_count} assets)</span>
                `;
                legendContent.appendChild(legendItem);
            });
            
            // Create toggle button
            const toggleBtn = document.createElement('button');
            toggleBtn.textContent = 'Show More';
            toggleBtn.className = 'mt-2 text-blue-500 hover:underline focus:outline-none';
            
            // Toggle functionality
            toggleBtn.addEventListener('click', () => {
                const content = document.getElementById('assetLegendContent');
                if (content.classList.contains('max-h-32')) {
                    content.classList.remove('max-h-32', 'relative');
                    content.classList.add('max-h-96');
                    toggleBtn.textContent = 'Show Less';
                } else {
                    content.classList.remove('max-h-96');
                    content.classList.add('max-h-32', 'relative');
                    toggleBtn.textContent = 'Show More';
                }
            });
            
            // Append to container only if there are more than 3 items
            if (processedAssetData.length > 3) {
                legendWrapper.appendChild(legendContent);
                legendWrapper.appendChild(toggleBtn);
                container.appendChild(legendWrapper);
            } else {
                // If 3 or fewer items, just append directly
                processedAssetData.forEach((item, index) => {
                    const legendItem = document.createElement('div');
                    legendItem.className = 'flex items-center mb-2';
                    legendItem.innerHTML = `
                        <span class="inline-block w-4 h-4 mr-2" style="background-color: ${backgroundColors[index]}"></span>
                        <span class="mr-2">${item.category}:</span>
                        <span class="font-bold">₱${item.total_value.toLocaleString()} (${item.percentage}%)</span>
                        <span class="ml-2 text-gray-500">(${item.asset_count} assets)</span>
                    `;
                    container.appendChild(legendItem);
                });
            }
        }

        // Create the expandable legend
        createAssetExpandableLegend();
    }
</script>
<script>
    // Inventory Value Distribution Chart
    const inventoryValueDistributionChart = document.getElementById('inventoryValueDistributionChart').getContext('2d');
    const inventoryValueDistributionData = {!! json_encode($inventoryValueDistribution) !!};
    
    // Function to process inventory data
    function processInventoryData(data, thresholdPercentage = 3) {
        // Sort data by total value in descending order
        const sortedData = data.sort((a, b) => b.total_value - a.total_value);
        
        // Separate major and minor brands
        const majorBrands = sortedData.filter(item => item.percentage >= thresholdPercentage);
        const minorBrands = sortedData.filter(item => item.percentage < thresholdPercentage);
        
        // Combine minor brands
        const combinedMinorBrands = {
            brand: 'Other Brands',
            total_value: minorBrands.reduce((sum, item) => sum + item.total_value, 0),
            inventory_count: minorBrands.reduce((sum, item) => sum + item.inventory_count, 0),
            percentage: minorBrands.reduce((sum, item) => sum + item.percentage, 0).toFixed(2)
        };

        // Combine results
        return [...majorBrands, combinedMinorBrands];
    }

    // Function to generate unique colors
    function generateUniqueColors(count) {
        const baseColors = [
            'hsla(210, 50%, 45%, 0.8)',  // Muted Blue
            'hsla(150, 50%, 45%, 0.8)',  // Muted Green
            'hsla(20, 50%, 45%, 0.8)',   // Muted Orange
            'hsla(270, 50%, 45%, 0.8)',  // Muted Purple
            'hsla(180, 50%, 45%, 0.8)',  // Muted Teal
            'hsla(0, 50%, 45%, 0.8)',    // Muted Red
            'hsla(45, 50%, 45%, 0.8)',   // Muted Gold
            'hsla(330, 50%, 45%, 0.8)',  // Muted Pink
        ];

        if (count <= baseColors.length) {
            return baseColors.slice(0, count);
        }

        const colors = [...baseColors];
        for (let i = baseColors.length; i < count; i++) {
            const hue = (i * 360 / count) % 360;
            const color = `hsla(${hue}, 50%, 45%, 0.8)`;
            colors.push(color);
        }
        return colors;
    }

    // Process the inventory data
    const processedInventoryData = processInventoryData(inventoryValueDistributionData);
    
    // Generate colors for processed data
    const inventoryBackgroundColors = generateUniqueColors(processedInventoryData.length);

    // Prepare data for chart
    const inventoryBrands = processedInventoryData.map(item => item.brand);
    const inventoryTotalValues = processedInventoryData.map(item => item.total_value);

    // Create expandable legend functionality
    function createExpandableLegend() {
        const container = document.getElementById('inventoryValueLegend');
        container.innerHTML = ''; // Clear previous content
        
        // Create legend container wrapper
        const legendWrapper = document.createElement('div');
        legendWrapper.className = 'relative';
        
        // Create scrollable legend content
        const legendContent = document.createElement('div');
        legendContent.id = 'inventoryLegendContent';
        legendContent.className = 'max-h-32 overflow-hidden transition-all duration-300 relative';
        
        // Append legend items
        processedInventoryData.forEach((item, index) => {
            const legendItem = document.createElement('div');
            legendItem.className = 'flex items-center mb-2';
            legendItem.innerHTML = `
                <span class="inline-block w-4 h-4 mr-2" style="background-color: ${inventoryBackgroundColors[index]}"></span>
                <span class="mr-2">${item.brand}:</span>
                <span class="font-bold">₱${item.total_value.toLocaleString()} (${item.percentage}%)</span>
                <span class="ml-2 text-gray-500">(${item.inventory_count} items)</span>
            `;
            legendContent.appendChild(legendItem);
        });
        
        // Create toggle button
        const toggleBtn = document.createElement('button');
        toggleBtn.textContent = 'Show More';
        toggleBtn.className = 'mt-2 text-blue-500 hover:underline focus:outline-none';
        
        // Toggle functionality
        toggleBtn.addEventListener('click', () => {
            const content = document.getElementById('inventoryLegendContent');
            if (content.classList.contains('max-h-32')) {
                content.classList.remove('max-h-32', 'relative');
                content.classList.add('max-h-96');
                toggleBtn.textContent = 'Show Less';
            } else {
                content.classList.remove('max-h-96');
                content.classList.add('max-h-32', 'relative');
                toggleBtn.textContent = 'Show More';
            }
        });
        
        // Append to container only if there are more than 3 items
        if (processedInventoryData.length > 3) {
            legendWrapper.appendChild(legendContent);
            legendWrapper.appendChild(toggleBtn);
            container.appendChild(legendWrapper);
        } else {
            // If 3 or fewer items, just append directly
            processedInventoryData.forEach((item, index) => {
                const legendItem = document.createElement('div');
                legendItem.className = 'flex items-center mb-2';
                legendItem.innerHTML = `
                    <span class="inline-block w-4 h-4 mr-2" style="background-color: ${inventoryBackgroundColors[index]}"></span>
                    <span class="mr-2">${item.brand}:</span>
                    <span class="font-bold">₱${item.total_value.toLocaleString()} (${item.percentage}%)</span>
                    <span class="ml-2 text-gray-500">(${item.inventory_count} items)</span>
                `;
                container.appendChild(legendItem);
            });
        }
    }

    // Create the chart
    const inventoryChart = new Chart(inventoryValueDistributionChart, {
        type: 'doughnut',
        data: {
            labels: inventoryBrands,
            datasets: [{
                data: inventoryTotalValues,
                backgroundColor: inventoryBackgroundColors,
                borderColor: inventoryBackgroundColors.map(color => color.replace('0.8)', '1)')),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            aspectRatio: 2.5,
            title: {
                display: true,
                text: 'Inventory Value Distribution by Brand'
            },
            tooltips: {
                callbacks: {
                    label: function(tooltipItem, data) {
                        const dataset = data.datasets[tooltipItem.datasetIndex];
                        const total = dataset.data.reduce((a, b) => a + b, 0);
                        const currentValue = dataset.data[tooltipItem.index];
                        const percentage = ((currentValue/total)*100).toFixed(2);
                        return `₱${currentValue.toLocaleString()} (${percentage}%)`;
                    }
                }
            }
        }
    });

    // Create the expandable legend
    createExpandableLegend();
</script>
@endsection
</file>

<file path="resources/views/fcu-ams/inventory/supplyRequestDetails.blade.php">
@extends('layouts.layout')
@section('content')
<link rel="stylesheet" href="{{ asset('css/stockin.css') }}">
<link rel="stylesheet" href="{{ asset('css/dashboard.css') }}">

<meta name="csrf-token" content="{{ csrf_token() }}">

<div class="grid grid-cols-6">
    @include('layouts.sidebar')
    <div class="content min-h-screen bg-slate-200 col-span-5">
        <!-- Header -->
        <div class="bg-white m-3 shadow-md rounded-md 2xl:max-w-7xl 2xl:mx-auto">
            <div class="px-4 sm:px-6 lg:px-8 py-6">
                <div class="flex justify-between items-center">
                    <div class="flex items-center justify-between w-full">
                        <a href="{{ Auth::user()->role->role === 'Department' ? route('inventory.my.requests') : route('requests.index') }}"
                        class="mr-4 hover:bg-gray-100 my-auto p-2 rounded-full transition">
                            <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                            </svg>
                        </a>
                        <h1 class="text-2xl font-semibold text-gray-900">Supply Request Details</h1>
                        @php
                            $allItemsApproved = $requests->every(function($request) {
                                return $request->status === 'approved';
                            });
                        @endphp
                        @if($allItemsApproved && Auth::user()->role->role !== 'Department')
                        
                            <button onclick="window.location.href='{{ route('inventory.supply.request.print', $requests->first()->request_group_id) }}'" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded inline-flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 mr-2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6.72 13.829c-.24.03-.48.062-.72.096m.72-.096a42.415 42.415 0 0 1 10.56 0m-10.56 0L6.34 18m10.94-4.171c.24.03.48.062.72.096m-.72-.096L17.66 18m0 0 .229 2.523a1.125 1.125 0 0 1-1.12 1.227H7.231c-.662 0-1.18-.568-1.12-1.227L6.34 18m11.318 0h1.091A2.25 2.25 0 0 0 21 15.75V9.456c0-1.081-.768-2.015-1.837-2.175a48.055 48.055 0 0 0-1.913-.247M6.34 18H5.25A2.25 2.25 0 0 1 3 15.75V9.456c0-1.081.768-2.015 1.837-2.175a48.041 48.041 0 0 1 1.913-.247m10.5 0a48.536 48.536 0 0 0-10.5 0m10.5 0V3.375c0-.621-.504-1.125-1.125-1.125h-8.25c-.621 0-1.125.504-1.125 1.125v3.659M18 10.5h.008v.008H18V10.5Zm-3 0h.008v.008H15V10.5Z" />
                                </svg>
                                Print
                            </button>
                        @else
                            <p class="invisible">.</p>
                        @endif
                    </div>
                </div>
            </div>
        </div>

        <div class="m-3 rounded-md 2xl:max-w-7xl 2xl:mx-auto">
                @include('layouts.messageWithoutTimerForError')
        </div>

        <!-- Request Information -->
        <div class="bg-white m-3 shadow-md rounded-md p-6 2xl:max-w-7xl 2xl:mx-auto">
            <div class="flex justify-between items-start mb-6">
                <h3 class="text-lg font-semibold">Request Information</h3>
                @if(Auth::user()->role->role !== 'Department')
                    <div class="flex gap-4">
                        <form action="{{ route('inventory.supply-request.approve', ['request_group_id' => $requests->first()->request_group_id]) }}" method="POST">
                            @csrf
                            <button type="submit" 
                                {{ $overallStatus === 'approved' || $overallStatus === 'rejected' ? 'disabled' : '' }}
                                class="inline-flex items-center px-4 py-2 bg-white border-2 border-green-500 hover:bg-green-500 text-green-600 hover:text-white text-sm font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white disabled:hover:text-green-600">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                Approve
                            </button>
                        </form>
                        <form action="{{ route('inventory.supply-request.reject', ['request_group_id' => $requests->first()->request_group_id]) }}" method="POST">
                            @csrf
                            <button type="submit"
                                {{ $overallStatus === 'approved' || $overallStatus === 'rejected' || $overallStatus === 'partially_approved' ? 'disabled' : '' }}
                                class="inline-flex items-center px-4 py-2 bg-white border-2 border-red-500 hover:bg-red-500 text-red-600 hover:text-white text-sm font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white disabled:hover:text-red-600">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                Reject
                            </button>
                        </form>
                    </div>
                @else
                    <div class="flex gap-4">
                        @if($overallStatus !== 'cancelled' && $overallStatus !== 'approved')
                            <!-- Edit button -->
                            <button type="button" 
                                onclick="document.getElementById('editRequestModal').classList.toggle('hidden')"
                                class="inline-flex items-center px-4 py-2 bg-white border-2 border-blue-500 hover:bg-blue-500 text-blue-600 hover:text-white text-sm font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                                Edit
                            </button>
                            <!-- Cancel button -->
                            <form action="{{ route('inventory.supply-request.cancel', ['request_group_id' => $requests->first()->request_group_id]) }}" method="POST" class="inline">
                                @csrf
                                <button type="submit"
                                    class="inline-flex items-center px-4 py-2 bg-white border-2 border-red-500 hover:bg-red-500 text-red-600 hover:text-white text-sm font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                    Cancel
                                </button>
                            </form>
                        @endif
                        <!-- Print button -->
                        @if(auth()->user()->role->role !== 'Department')
                        <a href="{{ route('inventory.supply-request.print', ['request_group_id' => $requests->first()->request_group_id]) }}" target="_blank"
                            class="inline-flex items-center px-4 py-2 bg-white border-2 border-gray-500 hover:bg-gray-500 text-gray-600 hover:text-white text-sm font-medium rounded-lg shadow-sm hover:shadow-md transition-all duration-200 ease-in-out">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                            </svg>
                            Print
                        </a>
                        @endif
                    </div>
                @endif
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div>
                    <div class="bg-white rounded-lg border border-slate-200">
                        <div class="px-4 py-3 border-b border-slate-200">
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-xs font-medium text-gray-500">Requester</p>
                                    <p class="text-sm font-semibold text-gray-900">{{ $requests->first()->requester }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="px-4 py-3 border-b border-slate-200">
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-xs font-medium text-gray-500">Department</p>
                                    <p class="text-sm font-semibold text-gray-900">{{ $requests->first()->department->department }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="px-4 py-3 border-b border-slate-200">
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-xs font-medium text-gray-500">Request Date</p>
                                    <p class="text-sm font-semibold text-gray-900">{{ date('M d, Y h:i A', strtotime($requests->first()->created_at)) }}</p>
                                </div>
                            </div>
                        </div>
                        <div class="px-4 py-3 border-b border-slate-200">
                            <div class="flex items-center space-x-3">
                                <div class="flex-shrink-0">
                                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-xs font-medium text-gray-500">Status</p>
                                    <span class="inline-flex px-2 py-0.5 text-xs font-medium rounded-full mt-1
                                        {{ $overallStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                           ($overallStatus === 'approved' ? 'bg-green-100 text-green-800' : 
                                           ($overallStatus === 'partially_approved' ? 'bg-blue-100 text-blue-800' :
                                           ($overallStatus === 'cancelled' ? 'bg-gray-100 text-gray-800' :
                                           'bg-red-100 text-red-800'))) }}">
                                        {{ ucfirst(str_replace('_', ' ', $overallStatus)) }}
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="px-4 py-3">
                            <div class="flex items-start space-x-3">
                                <div class="flex-shrink-0 mt-1">
                                    <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-xs font-medium text-gray-500">Additional Comments</p>
                                    <p class="text-sm text-gray-700">{{ $requests->first()->notes ? $requests->first()->notes : 'No additional comments provided.' }}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="bg-white rounded-lg border border-slate-200">
                        <div class="px-4 py-3 border-b border-slate-200">
                            <h3 class="text-sm font-semibold text-gray-900">Summary</h3>
                        </div>
                        <div class="px-4 py-3">
                            <div class="space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-500">Total Items</span>
                                    <span class="text-sm font-semibold text-gray-900">{{ $totalItems }}</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-gray-500">Total Price</span>
                                    <span class="text-sm font-semibold text-blue-600">₱{{ number_format($totalPrice, 2) }}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Requested Items Table -->
            <div class="mt-8">
                <h3 class="text-lg font-semibold mb-4">Requested Items</h3>
                <div class="overflow-x-auto border-2 border-slate-300 rounded-lg">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead>
                            <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Item</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Status</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit Price</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Price</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach($requests as $request)
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $request->item_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-3 py-1 text-xs font-medium rounded-full
                                        {{ $request->status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                           ($request->status === 'approved' ? 'bg-green-100 text-green-800' : 
                                           ($request->status === 'partially_approved' ? 'bg-blue-100 text-blue-800' :
                                           ($request->status === 'cancelled' ? 'bg-gray-100 text-gray-800' :
                                           'bg-red-100 text-red-800'))) }}">
                                        {{ ucfirst(str_replace('_', ' ', $request->status)) }}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $request->quantity }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $request->unit_name }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱{{ number_format($request->unit_price, 2) }}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₱{{ number_format($request->total_price, 2) }}</td>
                            </tr>
                            @endforeach
                            <tr class="bg-gray-50">
                                <td colspan="5" class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right">
                                    Total:
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600 text-left">
                                    ₱{{ number_format($totalPrice, 2) }}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Request Modal -->
<div id="editRequestModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
    class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
    <div class="relative my-auto mx-auto p-4 w-full max-w-4xl h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow-xl dark:bg-white border-0">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 border-b rounded-t">
                <h3 class="text-xl font-semibold text-gray-900">
                    Edit Supply Request
                </h3>
                <button type="button"
                    onclick="document.getElementById('editRequestModal').classList.toggle('hidden')"
                    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6">
                <form id="edit-request-form" method="POST" action="{{ route('inventory.supply-request.update', $requests->first()->request_group_id) }}">
                    @csrf
                    @method('PUT')
                    <div class="mb-4">
                        <div class="flex gap-4 mb-6">
                            <div class="flex-1 relative">
                                <input type="text" id="edit_item_name" class="block w-full px-4 py-2 border-2 border-slate-300 rounded-md shadow-sm focus:border-blue-500 bg-slate-50 focus:ring-1 focus:ring-blue-500 sm:text-sm transition duration-150 ease-in-out" placeholder="Search Item">
                                <div id="edit-suggestions-container" class="absolute w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg z-50 max-h-60 overflow-y-auto hidden">
                                    <!-- Add loading spinner -->
                                    <div id="edit-suggestions-loading" class="hidden">
                                        <div class="flex items-center justify-center p-4">
                                            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500"></div>
                                            <span class="ml-2 text-gray-600">Searching...</span>
                                        </div>
                                    </div>
                                    <ul id="edit-suggestions-list" class="py-1">
                                    </ul>
                                </div>
                            </div>
                            <div class="flex-1">
                                <input type="number" id="edit_item_quantity" class="block w-full rounded-md border-0 py-1.5 pl-3 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6" placeholder="Quantity" min="1">
                            </div>
                            <button type="button" id="edit-add-item-button" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out">
                                Add Item
                            </button>
                        </div>

                        <div class="overflow-y-auto max-h-64">
                            <div class="max-w-4xl mx-auto overflow-x-auto overflow-y-auto rounded-lg border-2 border-slate-300">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead>
                                        <tr class="bg-gradient-to-r from-blue-400 to-blue-500 text-white">
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Item</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Unit Price</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Quantity</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Price</th>
                                            <th scope="col" class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider">Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="edit-items-table-body" class="bg-white divide-y divide-gray-200">
                                        @foreach($requests as $request)
                                        <tr data-request-id="{{ $request->id }}" 
                                            data-name="{{ $request->item_name }}"
                                            data-quantity="{{ $request->quantity }}"
                                            data-unit="{{ $request->unit ? $request->unit->unit : ($request->inventory ? $request->inventory->unit->unit : '') }}"
                                            data-unit-price="{{ $request->inventory ? $request->inventory->unit_price : $request->estimated_unit_price }}">
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ $request->item_name }}</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                {{ $request->unit ? $request->unit->unit : ($request->inventory ? $request->inventory->unit->unit : '') }}
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                ₱{{ number_format($request->inventory ? $request->inventory->unit_price : $request->estimated_unit_price, 2) }}
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <input type="number" 
                                                    name="quantities[{{ $request->id }}]" 
                                                    value="{{ $request->quantity }}"
                                                    min="1"
                                                    class="block w-24 rounded-md border-0 py-1.5 pl-3 pr-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6"
                                                    required>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                ₱{{ number_format(($request->inventory ? $request->inventory->unit_price : $request->estimated_unit_price) * $request->quantity, 2) }}
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                                <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                                    </svg>
                                                </button>
                                            </td>
                                        </tr>
                                        @endforeach
                                    </tbody>
                                    <tfoot>
                                        <tr class="bg-gray-50">
                                            <td colspan="4" class="px-6 py-4 text-right font-semibold text-gray-900">Overall Total:</td>
                                            <td id="edit-modal-total" class="px-6 py-4 text-left font-semibold text-gray-900">₱{{ number_format($totalPrice, 2) }}</td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    </div>
                    <!-- Modal footer -->
                    <div class="flex items-center justify-end pt-4 border-t border-gray-200 gap-3">
                        <button type="button" 
                            onclick="document.getElementById('editRequestModal').classList.toggle('hidden')"
                            class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10">
                            Cancel
                        </button>
                        <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Empty Field Validation Modal -->
<div id="editValidationModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
    class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
    <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
        <div class="relative bg-white rounded-lg shadow-xl dark:bg-white border-0">
            <div class="flex items-center justify-between p-4 border-b rounded-t">
                <h3 class="text-xl font-semibold text-gray-900">
                    Validation Error
                </h3>
                <button type="button" onclick="document.getElementById('editValidationModal').classList.add('hidden')" 
                    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                </button>
            </div>
            <div class="p-6">
                <p class="text-gray-700">Please enter both item name and a valid quantity.</p>
            </div>
            <div class="flex items-center justify-end p-4 border-t border-gray-200">
                <button type="button" onclick="document.getElementById('editValidationModal').classList.add('hidden')"
                    class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5">
                    OK
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Insufficient Stock Warning Modal -->
<div id="editInsufficientStockModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
    class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
    <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 border-b rounded-t">
                <h3 class="text-xl font-semibold text-yellow-600">
                    ⚠️ Insufficient Stock Warning
                </h3>
                <button type="button" onclick="document.getElementById('editInsufficientStockModal').classList.add('hidden')"
                    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6">
                <p id="editInsufficientStockMessage" class="text-gray-700"></p>
                <p class="mt-4 text-sm text-gray-600">Your request will be forwarded to the admin for approval.</p>
            </div>
            <!-- Modal footer -->
            <div class="flex items-center justify-end p-4 border-t border-gray-200">
                <button type="button" onclick="document.getElementById('editInsufficientStockModal').classList.add('hidden')"
                    class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5">
                    Continue
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Item Not Found Modal -->
<div id="editItemNotFoundModal" style="min-height:100vh; background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" aria-hidden="true"
    class="modalBg flex fixed top-0 left-0 right-0 bottom-0 z-50 p-4 w-full md:inset-0 hidden">
    <div class="relative my-auto mx-auto p-4 w-full max-w-md h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow">
            <!-- Modal header -->
            <div class="flex items-center justify-between p-4 border-b rounded-t bg-red-500">
                <h3 class="text-xl font-semibold text-white">
                    Item Not Found in Inventory
                </h3>
                <button type="button" onclick="document.getElementById('editItemNotFoundModal').classList.add('hidden')"
                    class="text-white bg-transparent hover:bg-red-600 hover:text-gray-100 rounded-lg text-sm w-8 h-8 flex items-center justify-center">
                    <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6">
                <div class="flex items-center space-x-3 mb-4">
                    <div class="flex-shrink-0">
                        <svg class="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <div>
                        <p id="editItemNotFoundMessage" class="text-gray-700 font-medium"></p>
                        <p class="text-sm text-gray-500 mt-1">Please try searching with a different keyword or check if the item name is correct.</p>
                    </div>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="flex items-center justify-end p-4 border-t border-gray-200">
                <button type="button" onclick="document.getElementById('editItemNotFoundModal').classList.add('hidden')"
                    class="text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg text-sm font-medium px-5 py-2.5 hover:scale-105 transition-all duration-200">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Add Brand Modal -->
<x-add-item-modal 
    title="Add New Brand"
    id="add-brand-modal"
    route="{{ route('brand.add') }}"
    field="brand"
/>

<!-- Add Unit Modal -->
<x-add-item-modal 
    title="Add New Unit"
    id="add-unit-modal"
    route="{{ route('unit.add') }}"
    field="unit"
/>

<!-- Add Supplier Modal -->
<x-add-item-modal 
    title="Add New Supplier"
    id="add-supplier-modal"
    route="{{ route('supplier.add') }}"
    field="supplier"
/>

<script>
    let editSelectedItemData = null;
    let editSearchTimeout = null;

    function searchEditItems(query) {
        if (editSearchTimeout) {
            clearTimeout(editSearchTimeout);
        }

        const suggestionsContainer = document.getElementById('edit-suggestions-container');
        const loadingSpinner = document.getElementById('edit-suggestions-loading');
        const suggestionsList = document.getElementById('edit-suggestions-list');

        if (!query.trim()) {
            suggestionsContainer.classList.add('hidden');
            return;
        }

        suggestionsContainer.classList.remove('hidden');
        loadingSpinner.classList.remove('hidden');
        suggestionsList.classList.add('hidden');

        editSearchTimeout = setTimeout(() => {
            fetch('{{ url("/inventory/search-items") }}?query=' + encodeURIComponent(query))
                .then(response => response.json())
                .then(items => {
                    loadingSpinner.classList.add('hidden');
                    suggestionsList.classList.remove('hidden');
                    
                    if (!items || items.length === 0) {
                        suggestionsList.innerHTML = '<li class="px-4 py-2 text-gray-500">No items found</li>';
                        return;
                    }

                    suggestionsList.innerHTML = '';
                    items.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'px-4 py-2 hover:bg-blue-50 cursor-pointer';
                        const displayName = `${item.brand} - ${item.items_specs}`;
                        li.innerHTML = `
                            <div class="flex justify-between items-center">
                                <div>
                                    <span class="font-medium">${displayName}</span>
                                    <span class="text-gray-500">(${item.unit})</span>
                                </div>
                                <div class="text-right">
                                    <span class="text-blue-600">${formatPrice(item.price)}</span>
                                    <span class="text-gray-500 ml-2">${item.quantity} left${item.quantity == 0 ? ' <span class="text-red-500 font-medium">(Pre-Order)</span>' : ''}</span>
                                </div>
                            </div>
                        `;
                        li.addEventListener('click', () => {
                            document.getElementById('edit_item_name').value = displayName;
                            editSelectedItemData = {
                                name: displayName,
                                unit: item.unit,
                                price: item.price,
                                quantity: item.quantity
                            };
                            document.getElementById('edit_item_quantity').value = '1';
                            suggestionsContainer.classList.add('hidden');
                            document.getElementById('edit_item_quantity').focus();
                        });
                        suggestionsList.appendChild(li);
                    });
                })
                .catch(error => {
                    console.error('Error fetching items:', error);
                    loadingSpinner.classList.add('hidden');
                    suggestionsList.classList.remove('hidden');
                    suggestionsList.innerHTML = '<li class="px-4 py-2 text-red-500">Error loading items</li>';
                });
        }, 300);
    }

    function updateEditModalTotal() {
        let total = 0;
        const rows = document.querySelectorAll('#edit-items-table-body tr');
        
        rows.forEach(row => {
            const unitPrice = parseFloat(row.getAttribute('data-unit-price'));
            const quantity = parseFloat(row.querySelector('input[type="number"]').value);
            
            if (!isNaN(unitPrice) && !isNaN(quantity)) {
                total += unitPrice * quantity;
            }
        });
        
        document.getElementById('edit-modal-total').textContent = formatPrice(total);
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Add event listeners for the edit modal
        const editItemNameInput = document.getElementById('edit_item_name');
        const editSuggestionsContainer = document.getElementById('edit-suggestions-container');
        
        if (editItemNameInput) {
            editItemNameInput.addEventListener('input', function() {
                searchEditItems(this.value.trim());
            });
        }

        // Close suggestions when clicking outside
        document.addEventListener('click', function(e) {
            if (!editItemNameInput?.contains(e.target) && !editSuggestionsContainer?.contains(e.target)) {
                editSuggestionsContainer?.classList.add('hidden');
            }
        });

        // Add event listener for quantity changes
        document.querySelectorAll('#edit-items-table-body input[type="number"]').forEach(input => {
            input.addEventListener('change', updateEditModalTotal);
        });

        // Add event listener for the add item button in edit modal
        const editAddItemButton = document.getElementById('edit-add-item-button');
        if (editAddItemButton) {
            editAddItemButton.addEventListener('click', function(e) {
                e.preventDefault();
                const itemName = document.getElementById('edit_item_name').value.trim();
                const itemQuantity = parseInt(document.getElementById('edit_item_quantity').value);

                if (!itemName || !itemQuantity || itemQuantity < 1) {
                    document.getElementById('editValidationModal').classList.remove('hidden');
                    return;
                }

                if (!editSelectedItemData) {
                    document.getElementById('editItemNotFoundModal').classList.remove('hidden');
                    return;
                }

                if (editSelectedItemData.quantity < itemQuantity) {
                    const message = `Insufficient stock for ${itemName}. Current stock: ${editSelectedItemData.quantity}. Your request: ${itemQuantity}.`;
                    document.getElementById('editInsufficientStockMessage').textContent = message;
                    document.getElementById('editInsufficientStockModal').classList.remove('hidden');
                }

                const totalPrice = calculateTotalPrice(itemQuantity, editSelectedItemData.price);

                const newRow = document.createElement('tr');
                newRow.setAttribute('data-request-id', editSelectedItemData.request_id);
                newRow.setAttribute('data-name', itemName);
                newRow.setAttribute('data-quantity', itemQuantity);
                newRow.setAttribute('data-unit', editSelectedItemData.unit);
                newRow.setAttribute('data-unit-price', editSelectedItemData.price);
                
                newRow.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${itemName}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${editSelectedItemData.unit}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(editSelectedItemData.price)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${itemQuantity}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(totalPrice)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                        <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </td>
                `;

                // Add delete functionality to the new row
                const deleteButton = newRow.querySelector('.delete-row-button');
                deleteButton.addEventListener('click', function() {
                    newRow.remove();
                    updateEditModalTotal();
                });

                // Add quantity change listener
                const quantityInput = newRow.querySelector('input[type="number"]');
                quantityInput.addEventListener('change', updateEditModalTotal);

                document.getElementById('edit-items-table-body').appendChild(newRow);
                updateEditModalTotal();

                // Clear input fields and selected item data
                document.getElementById('edit_item_name').value = '';
                document.getElementById('edit_item_quantity').value = '';
                editSelectedItemData = null;
                document.getElementById('edit_item_name').focus();
            });
        }

        // Add delete functionality to existing rows
        document.querySelectorAll('#edit-items-table-body .delete-row-button').forEach(button => {
            button.addEventListener('click', function() {
                this.closest('tr').remove();
                updateEditModalTotal();
            });
        });

        // Handle edit form submission
        const editRequestForm = document.getElementById('edit-request-form');
        if (editRequestForm) {
            editRequestForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Get all rows from the table
                const rows = document.querySelectorAll('#edit-items-table-body tr');
                if (rows.length === 0) {
                    alert('Please add at least one item to the request');
                    return;
                }

                const existingItems = [];
                const newItems = [];

                // Collect all items (both existing and new)
                Array.from(rows).forEach(row => {
                    const quantity = row.querySelector('input[type="number"]').value;
                    const requestId = row.getAttribute('data-request-id');
                    
                    if (requestId) {
                        // Existing items
                        existingItems.push({
                            request_id: requestId,
                            quantity: parseInt(quantity)
                        });
                    } else {
                        // New items
                        newItems.push({
                            name: row.getAttribute('data-name'),
                            quantity: parseInt(quantity),
                            unit: row.getAttribute('data-unit'),
                            unit_price: parseFloat(row.getAttribute('data-unit-price'))
                        });
                    }
                });

                // Send the request using fetch
                fetch(this.action, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        _method: 'PUT',
                        items: JSON.stringify(existingItems),
                        new_items: JSON.stringify(newItems)
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert(data.message || 'Error updating request');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the request');
                });
            });
        }
    });

    function showQuantityValidationModal(maxQuantity) {
        document.getElementById('maxQuantitySpan').textContent = maxQuantity;
        document.getElementById('quantityValidationModal').classList.remove('hidden');
    }
    
    function closeQuantityValidationModal() {
        document.getElementById('quantityValidationModal').classList.add('hidden');
    }

    function showValidationModal() {
        const modal = document.getElementById('validationModal');
        modal.classList.remove('hidden');
    }
    
    document.querySelectorAll('.close-validation-modal').forEach(button => {
        button.addEventListener('click', function() {
            document.getElementById('validationModal').classList.add('hidden');
        });
    });

    function submitForm() {
        const form = document.getElementById('supply-request-form');
        form.submit();
    }

    function formatPrice(price) {
        if (!price || isNaN(price)) return 'N/A';
        return new Intl.NumberFormat('en-PH', {
            style: 'currency',
            currency: 'PHP'
        }).format(price);
    }

    function calculateTotalPrice(quantity, unitPrice) {
        if (!unitPrice || isNaN(unitPrice)) return 'N/A';
        return quantity * unitPrice;
    }

    function calculateOverallTotal(tableBody) {
        let total = 0;
        const rows = tableBody.querySelectorAll('tr');
        
        rows.forEach(row => {
            const unitPrice = row.getAttribute('data-unit-price');
            const quantity = row.getAttribute('data-quantity');
            
            if (unitPrice && unitPrice !== 'N/A' && !isNaN(unitPrice)) {
                total += parseFloat(unitPrice) * parseFloat(quantity);
            }
        });
        
        return total;
    }

    function updateOverallTotals() {
        // Update modal total
        const modalTableBody = document.getElementById('added-items-table-body');
        const modalTotal = calculateOverallTotal(modalTableBody);
        document.getElementById('modal-overall-total').textContent = formatPrice(modalTotal);

        // Update main view total
        const mainTableBody = document.getElementById('selected-items');
        const mainTotal = calculateOverallTotal(mainTableBody);
        document.getElementById('main-overall-total').textContent = formatPrice(mainTotal);
    }

    function updateSelectedItems() {
        const rows = document.querySelectorAll('#added-items-table tbody tr');
        const items = [];

        rows.forEach(row => {
            const isNewItem = row.getAttribute('data-is-new-item') === 'true';
            const item = {
                name: row.getAttribute('data-name'),
                quantity: row.getAttribute('data-quantity'),
                is_new_item: isNewItem
            };

            if (isNewItem) {
                item.brand_id = row.getAttribute('data-brand-id');
                item.unit_id = row.getAttribute('data-unit-id');
                item.supplier_id = row.getAttribute('data-supplier-id');
                item.unit_price = row.getAttribute('data-unit-price');
            }

            items.push(item);
        });

        document.querySelector('#selected_items').value = JSON.stringify({ items: items });
    }

    function showInsufficientStockModal(itemName, currentStock, requestedQuantity, unit) {
        const message = `Insufficient stock for ${itemName}. Current stock: ${currentStock}. Your request: ${requestedQuantity}.`;
        document.getElementById('insufficientStockMessage').textContent = message;
        document.getElementById('insufficientStockModal').classList.remove('hidden');
    }

    function closeInsufficientStockModal() {
        document.getElementById('insufficientStockModal').classList.add('hidden');
    }

    let searchTimeout = null;
    let selectedItemData = null;

    function updateQuantityField(selectedItem) {
        const quantityInput = document.getElementById('new_item_quantity');
        quantityInput.value = 1;
    }

    function searchItems(query) {
        if (searchTimeout) {
            clearTimeout(searchTimeout);
        }

        const suggestionsContainer = document.getElementById('suggestions-container');
        const loadingSpinner = document.getElementById('suggestions-loading');
        const suggestionsList = document.getElementById('suggestions-list');

        if (!query.trim()) {
            suggestionsContainer.classList.add('hidden');
            return;
        }

        // Show loading spinner and container
        suggestionsContainer.classList.remove('hidden');
        loadingSpinner.classList.remove('hidden');
        suggestionsList.classList.add('hidden');

        searchTimeout = setTimeout(() => {
            console.log('Searching for:', query);
            const url = '{{ url("/inventory/search-items") }}?query=' + encodeURIComponent(query);
            console.log('Fetching from:', url);
            
            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    return response.text().then(text => {
                        try {
                            console.log('Raw response:', text);
                            return JSON.parse(text);
                        } catch (e) {
                            console.error('JSON parse error:', e);
                            throw new Error('Invalid JSON response');
                        }
                    });
                })
                .then(items => {
                    console.log('Parsed items:', items);
                    
                    // Hide loading spinner and show suggestions list
                    loadingSpinner.classList.add('hidden');
                    suggestionsList.classList.remove('hidden');
                    
                    if (!items || items.length === 0) {
                        suggestionsList.innerHTML = '<li class="px-4 py-2 text-gray-500">No items found</li>';
                        return;
                    }

                    suggestionsList.innerHTML = '';
                    items.forEach(item => {
                        const li = document.createElement('li');
                        li.className = 'px-4 py-2 hover:bg-blue-50 cursor-pointer';
                        const displayName = `${item.brand} - ${item.items_specs}`;
                        li.innerHTML = `
                            <div class="flex justify-between items-center">
                                <div>
                                    <span class="font-medium">${displayName}</span>
                                    <span class="text-gray-500">(${item.unit})</span>
                                </div>
                                <div class="text-right">
                                    <span class="text-blue-600">${formatPrice(item.price)}</span>
                                    <span class="text-gray-500 ml-2">${item.quantity} left${item.quantity == 0 ? ' <span class="text-red-500 font-medium">(Pre-Order)</span>' : ''}</span>
                                </div>
                            </div>
                        `;
                        li.addEventListener('click', () => {
                            document.getElementById('new_item_name').value = displayName;
                            selectedItemData = {
                                name: displayName,
                                unit: item.unit,
                                price: item.price,
                                quantity: item.quantity
                            };
                            updateQuantityField(selectedItemData);
                            suggestionsContainer.classList.add('hidden');
                            document.getElementById('new_item_quantity').focus();
                        });
                        suggestionsList.appendChild(li);
                    });
                })
                .catch(error => {
                    console.error('Error fetching items:', error);
                    loadingSpinner.classList.add('hidden');
                    suggestionsList.classList.remove('hidden');
                    suggestionsList.innerHTML = '<li class="px-4 py-2 text-red-500">Error loading items</li>';
                });
        }, 300);
    }

    function showItemNotFoundModal(itemName) {
        // Get the values from the add item form
        const itemNameInput = document.getElementById('new_item_name').value;
        const quantityInput = document.getElementById('new_item_quantity').value;

        // Set the values in the Item Not Found modal
        document.getElementById('items_specs_not_found').value = itemNameInput;
        document.getElementById('quantity_not_found').value = quantityInput;

        document.getElementById('itemNotFoundMessage').textContent = `The item you requested is not in the inventory. Please provide more details for approval.`;
        document.getElementById('itemNotFoundModal').classList.remove('hidden');
    }

    function populateDropdowns() {
        // Populate brands dropdown
        fetch('{{ route("inventory.brands") }}')
            .then(response => response.json())
            .then(brands => {
                const brandSelect = document.getElementById('brand_id_not_found');
                brands.forEach(brand => {
                    const option = new Option(brand.brand, brand.id);
                    brandSelect.add(option);
                });
            });

        // Populate units dropdown
        fetch('{{ route("inventory.units") }}')
            .then(response => response.json())
            .then(units => {
                const unitSelect = document.getElementById('unit_id_not_found');
                units.forEach(unit => {
                    const option = new Option(unit.unit, unit.id);
                    unitSelect.add(option);
                });
            });

        // Populate suppliers dropdown
        fetch('{{ route("inventory.suppliers") }}')
            .then(response => response.json())
            .then(suppliers => {
                const supplierSelect = document.getElementById('supplier_id_not_found');
                suppliers.forEach(supplier => {
                    const option = new Option(supplier.supplier, supplier.id);
                    supplierSelect.add(option);
                });
            });
    }

    function submitRequestedItem(event) {
        event.preventDefault();
        
        const formData = {
            brand_id: document.getElementById('brand_id_not_found').value,
            items_specs: document.getElementById('items_specs_not_found').value,
            unit_id: document.getElementById('unit_id_not_found').value,
            quantity: document.getElementById('quantity_not_found').value,
            unit_price: document.getElementById('unit_price_not_found').value,
            supplier_id: document.getElementById('supplier_id_not_found').value,
        };

        fetch('{{ route("inventory.request.item.store") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('itemNotFoundModal').classList.add('hidden');
                // You might want to show a success message here
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // You might want to show an error message here
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        console.log('DOM Content Loaded');
        // Set default request date to today
        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0');
        var yyyy = today.getFullYear();
        today = yyyy + '-' + mm + '-' + dd;
        document.getElementById('request_date').value = today;

        let rowCounter = 0;
        const addItemButton = document.getElementById('add-item-button');
        const addedItemsTableBody = document.getElementById('added-items-table-body');
        const modal = document.getElementById('defaultModal');
        const form = document.getElementById('supply-request-form');

        // Prevent form submission on enter key in the modal
        modal.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (document.activeElement === document.getElementById('new_item_name') ||
                    document.activeElement === document.getElementById('new_item_quantity')) {
                    addItemButton.click();
                }
                return false;
            }
        });

        // Handle form submission
        const supplyRequestForm = document.getElementById('supply-request-form');
        const submitButton = document.getElementById('submit-request-button');

        submitButton.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Get all items from the table
            const rows = document.querySelectorAll('#added-items-table tbody tr');
            if (rows.length === 0) {
                document.getElementById('validationModal').classList.remove('hidden');
                return;
            }

            const items = [];
            rows.forEach(row => {
                const isNewItem = row.getAttribute('data-is-new-item') === 'true';
                const item = {
                    name: row.getAttribute('data-name'),
                    quantity: row.getAttribute('data-quantity'),
                    is_new_item: isNewItem
                };

                if (isNewItem) {
                    item.brand_id = row.getAttribute('data-brand-id');
                    item.unit_id = row.getAttribute('data-unit-id');
                    item.supplier_id = row.getAttribute('data-supplier-id');
                    item.unit_price = row.getAttribute('data-unit-price');
                }

                items.push(item);
            });

            // Set the items data in the hidden input
            document.getElementById('selected_items').value = JSON.stringify({ items: items });
            
            // Submit the form
            supplyRequestForm.submit();
        });

        // Close modal buttons
        document.querySelectorAll('.close-modal-button').forEach(button => {
            button.addEventListener('click', function() {
                modal.classList.add('hidden');
            });
        });

        // Done button
        document.querySelector('.done-button').addEventListener('click', function() {
            updateSelectedItems();
            modal.classList.add('hidden');
        });

        addItemButton.addEventListener('click', function(e) {
            e.preventDefault();
            const itemName = document.getElementById('new_item_name').value.trim();
            const itemQuantity = parseInt(document.getElementById('new_item_quantity').value);

            if (!itemName || !itemQuantity || itemQuantity < 1) {
                showValidationModal();
                return;
            }

            // Check if we have selected item data
            if (!selectedItemData) {
                showItemNotFoundModal(itemName);
                return;
            }

            // Show warning if quantity exceeds available stock
            if (selectedItemData.quantity < itemQuantity) {
                showInsufficientStockModal(itemName, selectedItemData.quantity, itemQuantity, selectedItemData.unit);
            }

            const totalPrice = calculateTotalPrice(itemQuantity, selectedItemData.price);

            const newRow = document.createElement('tr');
            newRow.setAttribute('data-name', itemName);
            newRow.setAttribute('data-quantity', itemQuantity);
            newRow.setAttribute('data-unit', selectedItemData.unit);
            newRow.setAttribute('data-unit-price', selectedItemData.price);
            
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${itemName}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${selectedItemData.unit}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(selectedItemData.price)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${itemQuantity}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(totalPrice)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                    <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </td>
            `;

            // Add delete functionality to the new row
            const deleteButton = newRow.querySelector('.delete-row-button');
            deleteButton.addEventListener('click', function() {
                newRow.remove();
                updateSelectedItems();
                updateOverallTotals();
            });

            addedItemsTableBody.appendChild(newRow);
            updateSelectedItems();
            updateOverallTotals();

            // Clear input fields and selected item data
            document.getElementById('new_item_name').value = '';
            document.getElementById('new_item_quantity').value = '';
            selectedItemData = null;
            document.getElementById('new_item_name').focus();
            
            rowCounter++;
        });

        // Add event listener for opening the modal
        document.querySelector('button[onclick*="defaultModal"]').addEventListener('click', function(e) {
            e.preventDefault();
            modal.classList.remove('hidden');
            setTimeout(() => {
                document.getElementById('new_item_name').focus();
            }, 100);
        });

        // Add submit button handler
        document.getElementById('submit-request-button').addEventListener('click', function(e) {
            e.preventDefault();
            submitForm();
        });

        const itemNameInput = document.getElementById('new_item_name');
        const suggestionsContainer = document.getElementById('suggestions-container');

        if (!itemNameInput) {
            console.error('Item name input not found!');
            return;
        }

        // Add input event listener for search
        itemNameInput.addEventListener('input', function() {
            const query = this.value.trim();
            console.log('Input event triggered:', query);
            searchItems(query);
        });

        // Close suggestions when clicking outside
        document.addEventListener('click', function(e) {
            if (!itemNameInput.contains(e.target) && !suggestionsContainer.contains(e.target)) {
                suggestionsContainer.classList.add('hidden');
            }
        });

        // Add event listeners for the new modal's close buttons
        document.getElementById('itemNotFoundModal').querySelectorAll('.item-not-found-close-button').forEach(button => {
            button.addEventListener('click', function() {
                document.getElementById('itemNotFoundModal').classList.add('hidden');
            });
        });

        // Add form submit handler
        const requestedItemForm = document.querySelector('#itemNotFoundModal form');
        requestedItemForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form data
            const brandSelect = document.getElementById('brand_id_not_found');
            const unitSelect = document.getElementById('unit_id_not_found');
            const brandText = brandSelect.options[brandSelect.selectedIndex].text;
            const itemSpecs = document.getElementById('items_specs_not_found').value;
            const unitText = unitSelect.options[unitSelect.selectedIndex].text;
            const quantity = document.getElementById('quantity_not_found').value;
            const unitPrice = document.getElementById('unit_price_not_found').value;
            const totalPrice = calculateTotalPrice(quantity, unitPrice);

            // Create new row
            const newRow = document.createElement('tr');
            const displayName = `${brandText} - ${itemSpecs}`;
            newRow.setAttribute('data-name', displayName);
            newRow.setAttribute('data-quantity', quantity);
            newRow.setAttribute('data-unit', unitText);
            newRow.setAttribute('data-unit-price', unitPrice);
            newRow.setAttribute('data-is-new-item', 'true');
            newRow.setAttribute('data-brand-id', brandSelect.value);
            newRow.setAttribute('data-unit-id', unitSelect.value);
            newRow.setAttribute('data-supplier-id', document.getElementById('supplier_id_not_found').value);
            
            newRow.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${displayName}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${unitText}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(unitPrice)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${quantity}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatPrice(totalPrice)}</td>
                <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                    <button type="button" class="delete-row-button inline-flex items-center p-2 border border-transparent rounded-full text-red-600 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </td>
            `;

            // Add delete functionality to the new row
            const deleteButton = newRow.querySelector('.delete-row-button');
            deleteButton.addEventListener('click', function() {
                newRow.remove();
                updateSelectedItems();
                updateOverallTotals();
            });

            addedItemsTableBody.appendChild(newRow);
            updateSelectedItems();
            updateOverallTotals();

            // Clear form and close modal
            requestedItemForm.reset();
            document.getElementById('itemNotFoundModal').classList.add('hidden');
        });
    });
</script>
@endsection
</file>

<file path="app/Http/Controllers/InventoryController.php">
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use App\Models\SupplyRequest;
use App\Models\StockOut;
use App\Models\Inventory;
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\InventoryExport;
use App\Models\Asset;
use App\Models\Supplier;
use App\Models\Site;
use App\Models\Location;
use App\Models\Category;
use App\Models\Condition;
use App\Models\Department;
use App\Models\Brand;
use App\Models\Status;
use App\Models\Unit;
use App\Models\AssetEditHistory;
use App\Models\InventoryEditHistory;
// use App\Imports\AssetsImport;
use Illuminate\Validation\Rule;
use Carbon\Carbon;

class InventoryController extends Controller
{
    public function index(Request $request) {
        $brands = $request->input('brands', []);
        $selectedBrands = $brands;
        
        $totalItems = DB::table('inventories')
            ->whereNull('deleted_at')
            ->where('quantity', '>', 0)
            ->count();
            
        $totalValue = DB::table('inventories')
            ->whereNull('deleted_at')
            ->where('quantity', '>', 0)
            ->sum(DB::raw('unit_price * quantity'));
            
        $lowStock = DB::table('inventories')
            ->where('quantity', '>=', 1)
            ->where('quantity', '<', 20)
            ->whereNull('deleted_at')
            ->count();
            
        $outOfStock = DB::table('inventories')
            ->where('quantity', '=', 0)
            ->whereNull('deleted_at')
            ->count();
        
        $sort = $request->input('sort', 'items_specs');
        $direction = $request->input('direction', 'asc');
        $search = $request->input('search');

        $query = Inventory::whereNull('deleted_at')
            ->where('quantity', '>', 0)
            ->with('supplier', 'unit', 'brand')
            ->leftJoin('suppliers', 'inventories.supplier_id', '=', 'suppliers.id')
            ->leftJoin('units', 'inventories.unit_id', '=', 'units.id')
            ->leftJoin('brands', 'inventories.brand_id', '=', 'brands.id')
            ->select('inventories.*', 'suppliers.supplier as supplier_name', 'units.unit as unit_name', 'brands.brand as brand_name');

        if (!empty($brands)) {
            $query->whereIn('inventories.brand_id', $brands);
        }

        if ($search) {
            $query->where(function($q) use ($search) {
                $q->where('inventories.unique_tag', 'like', "%{$search}%")
                  ->orWhere('inventories.items_specs', 'like', "%{$search}%")
                  ->orWhere('brands.brand', 'like', "%{$search}%")
                  ->orWhere('units.unit', 'like', "%{$search}%");
            });
        }

        if ($sort && $direction) {
            $query->orderBy($sort, $direction);
        }

        $inventories = $query->paginate(10);
        $allBrands = Brand::all();

        return view('fcu-ams.inventory.inventoryList', [
            'inventories' => $inventories,
            'brands' => $allBrands,
            'selectedBrands' => $selectedBrands,
            'sort' => $sort,
            'direction' => $direction,
            'totalItems' => $totalItems,
            'totalValue' => $totalValue,
            'lowStock' => $lowStock,
            'outOfStock' => $outOfStock
        ]);
    }

    public function search(Request $request)
    {
        $searchQuery = $request->input('search');
        
        $inventories = DB::table('inventories')
            ->leftJoin('suppliers', 'inventories.supplier_id', '=', 'suppliers.id')
            ->leftJoin('brands', 'inventories.brand_id', '=', 'brands.id')
            ->leftJoin('units', 'inventories.unit_id', '=', 'units.id')
            ->select(
                'inventories.*',
                'suppliers.supplier as supplier_name',
                'brands.brand as brand_name',
                'units.unit as unit_name'
            )
            ->where(function($query) use ($searchQuery) {
                $query->where('inventories.unique_tag', 'like', '%' . $searchQuery . '%')
                      ->orWhere('inventories.items_specs', 'like', '%' . $searchQuery . '%');
            })
            ->whereNull('inventories.deleted_at')
            ->get();

        return response()->json([
            'inventories' => $inventories
        ]);
    }

    public function lowStock(Request $request)
    {
        $lowStockItems = Inventory::whereNull('deleted_at')
            ->where('quantity', '>=', 1)
            ->where('quantity', '<', 20)
            ->with(['supplier', 'unit', 'brand'])
            ->orderBy('quantity', 'asc')
            ->paginate(10);

        return view('fcu-ams/inventory/lowStock', compact('lowStockItems'));
    }

    public function outOfStock(Request $request)
    {
        $outOfStockItems = Inventory::whereNull('deleted_at')
            ->where('quantity', '=', 0)
            ->with(['supplier', 'unit', 'brand'])
            ->orderBy('unique_tag', 'asc')
            ->paginate(10);

        return view('fcu-ams/inventory/outOfStock', compact('outOfStockItems'));
    }

    public function show($id)
    {
        $inventory = Inventory::with(['supplier', 'unit', 'brand'])->findOrFail($id);
        
        // Get paginated edit history
        $editHistory = $inventory->editHistory()
            ->orderBy('created_at', 'desc')
            ->paginate(10);

        return view('fcu-ams/inventory/viewInventory', compact('inventory', 'editHistory'));
    }

    public function create() {
        $suppliers = DB::table('suppliers')->get();
        $units = DB::table('units')->get();
        $brands = DB::table('brands')->get();
        return view('fcu-ams/inventory/stockIn', compact('suppliers', 'units', 'brands'));
    }

    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'items_specs' => 'required|string',
            'unit_id' => 'required|integer|exists:units,id',
            'brand_id' => 'required|integer|exists:brands,id',
            'quantity' => 'required|numeric',
            'unit_price' => 'required|numeric',
            'supplier_id' => 'required|integer|exists:suppliers,id',
            'stock_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
            'created_by' => 'nullable|integer|exists:users,id'
        ]);

        $existingInventory = Inventory::where('items_specs', $validatedData['items_specs'])
            ->where('brand_id', $validatedData['brand_id'])
            ->where('unit_id', $validatedData['unit_id'])
            ->where('unit_price', $validatedData['unit_price'])
            ->where('supplier_id', $validatedData['supplier_id'])
            ->whereNull('deleted_at')
            ->first();

        if ($existingInventory) {
            $existingInventory->quantity += $validatedData['quantity'];
            $existingInventory->save();
        } else {
            $inventory = new Inventory();
            $inventory->brand_id = $validatedData['brand_id'];
            $inventory->items_specs = $validatedData['items_specs'];
            $inventory->unit_id = $validatedData['unit_id'];
            $inventory->quantity = $validatedData['quantity'];
            $inventory->unit_price = $validatedData['unit_price'];
            $inventory->supplier_id = $validatedData['supplier_id'];
            $inventory->created_by = auth()->user()->id;

            if ($request->hasFile('stock_image')) {
                $imageName = time().'.'.$request->stock_image->extension();
                $request->stock_image->move(public_path('profile'), $imageName);
                $inventory->stock_image = 'profile/'.$imageName;
            }

            $inventory->save();
        }

        $input = $request->except('stock_image');
        $request->session()->put('input', $input);

        return redirect()->route('inventory.stock.in')->with('success', 'Item added to inventory.');
    }

    public function edit($id)
    {
        $inventory = Inventory::findOrFail($id);
        $suppliers = DB::table('suppliers')->get();
        $units = DB::table('units')->get();
        $brands = DB::table('brands')->get();

        return view('fcu-ams/inventory/updateStock', compact('inventory', 'suppliers', 'units', 'brands'));
    }

    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
            'items_specs' => [
                'required',
                'string',
                Rule::unique('inventories', 'items_specs')->ignore($id)->whereNull('deleted_at'),
            ],
            'unit_id' => 'required|integer|exists:units,id',
            'brand_id' => 'required|integer|exists:brands,id',
            'quantity' => 'required|numeric',
            'unit_price' => 'required|numeric',
            'supplier_id' => 'required|integer|exists:suppliers,id',
            'stock_image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
        ]);

        $inventory = Inventory::findOrFail($id);
        $oldInventory = clone $inventory;

        $inventory->items_specs = $validatedData['items_specs'];
        $inventory->unit_id = $validatedData['unit_id'];
        $inventory->brand_id = $validatedData['brand_id'];
        $inventory->quantity = $validatedData['quantity'];
        $inventory->unit_price = $validatedData['unit_price'];
        $inventory->supplier_id = $validatedData['supplier_id'];

        if ($request->hasFile('stock_image')) {
            $imageName = time().'.'.$request->stock_image->extension();
            $request->stock_image->move(public_path('profile'), $imageName);
            $inventory->stock_image = 'profile/'.$imageName;
        }

        $this->storeEditHistory($inventory, auth()->user(), $oldInventory);

        $inventory->save();

        return redirect()->back()->with('success', 'Inventory updated successfully.');
    }

    private function storeEditHistory($inventory, $user, $oldInventory)
    {
        $changes = [];
        $fields = [
            'items_specs' => 'Items & Specs',
            'brand_id' => 'Brand',
            'unit_id' => 'Unit',
            'quantity' => 'Quantity',
            'unit_price' => 'Unit Price',
            'supplier_id' => 'Supplier',
        ];

        foreach ($fields as $field => $header) {
            if ($inventory->$field != $oldInventory->$field) {
                $oldValue = $oldInventory->$field;
                $newValue = $inventory->$field;

                if (in_array($field, ['supplier_id', 'brand_id', 'unit_id'])) {
                    $relationship = str_replace('_id', '', $field);
                    $oldValue = $oldInventory->$relationship->supplier ?? 
                        $oldInventory->$relationship->brand ?? 
                        $oldInventory->$relationship->unit;
                    $newValue = $inventory->$relationship->supplier ?? 
                        $inventory->$relationship->brand ?? 
                        $inventory->$relationship->unit;
                }

                $changes[] = "Updated $header from '$oldValue' to '$newValue'.";
            }
        }

        if (count($changes) > 0) {
            $editHistory = new InventoryEditHistory();
            $editHistory->inventory_id = $inventory->id;
            $editHistory->user_id = $user->id;
            $editHistory->changes = nl2br(implode("<br>", $changes));
            $editHistory->save();
        }
    }

    public function destroy($id)
    {
        $inventory = Inventory::findOrFail($id);

        // Explicitly set deleted_by before deleting
        $inventory->deleted_by = auth()->user()->id;
        $inventory->save();

        $inventory->delete();

        return redirect()->back()->with('success', 'Asset deleted successfully!');
    }

    public function createStockOut()
    {
        $inventories = Inventory::whereNull('deleted_at')
            ->where('quantity', '>=', 1)
            ->with(['brand', 'unit']) // Eager load relationships
            ->join('brands', 'inventories.brand_id', '=', 'brands.id')
            ->orderBy('brands.brand', 'asc')
            ->select('inventories.*')
            ->get();
        $departments = Department::all();
        return view('fcu-ams/inventory/stockOut', compact('inventories', 'departments'));
    }

    public function storeStockOut(Request $request)
    {
        $validatedData = $request->validate([
            'item_id' => 'required|array',
            'quantity' => 'required|array',
            'department_id' => 'required|integer|exists:departments,id',
            'stock_out_date' => 'required|date',
            'receiver' => 'required|string',
        ]);

        $stockOutId = Str::uuid();

        foreach ($validatedData['item_id'] as $key => $itemId) {
            $inventory = Inventory::findOrFail($itemId);

            if ($inventory->quantity < $validatedData['quantity'][$key]) {
                return redirect()->back()->withErrors(['error' => 'Insufficient quantity for item ' . $inventory->brand->brand . ' ' . $inventory->items_specs]);
            }

            $inventory->quantity -= $validatedData['quantity'][$key];
            $inventory->department_id = $validatedData['department_id'];
            $inventory->stock_out_date = $validatedData['stock_out_date'];
            $inventory->save();

            // Create a new stock out record
            $stockOut = new StockOut();
            $stockOut->stock_out_id = $stockOutId;
            $stockOut->inventory_id = $inventory->id;
            $stockOut->quantity = $validatedData['quantity'][$key];
            $stockOut->department_id = $validatedData['department_id'];
            $stockOut->stock_out_date = $validatedData['stock_out_date'];
            $stockOut->receiver = $validatedData['receiver'];
            $stockOut->save();
        }

        return redirect()->route('inventory.stock.out')->with('success', 'Items stocked out successfully');
    }

    public function showSupplyRequest()
    {
        $user = auth()->user();
        $inventories = Inventory::whereNull('deleted_at')
            ->where('quantity', '>', 0)
            ->with(['brand', 'unit'])
            ->join('brands', 'inventories.brand_id', '=', 'brands.id')
            ->orderBy('brands.brand', 'asc')
            ->select('inventories.*')
            ->get();
        $departments = Department::all();
        $units = Unit::all();
        $brands = Brand::all();
        $suppliers = Supplier::all();
        $userDepartment = $user->department;
        
        // Debug information
        \Log::info('User Department:', [
            'user_id' => $user->id,
            'department_id' => $user->department_id,
            'department' => $userDepartment
        ]);
        
        return view('fcu-ams.inventory.supplyRequest', compact('inventories', 'departments', 'user', 'userDepartment', 'units', 'brands', 'suppliers'));
    }

    public function storeSupplyRequest(Request $request)
    {
        $request->validate([
            'department_id' => 'required|exists:departments,id',
            'selected_items' => 'required|json',
            'notes' => 'nullable|string'
        ]);

        $data = json_decode($request->selected_items, true);
        if (!isset($data['items']) || empty($data['items'])) {
            return redirect()->back()->with('error', 'No items selected');
        }

        $requestGroupId = Str::uuid();

        foreach ($data['items'] as $item) {
            $inventory = null;
            if (empty($item['is_new_item'])) {
                // For existing inventory items
                $inventory = DB::table('inventories')
                    ->join('brands', 'inventories.brand_id', '=', 'brands.id')
                    ->where(DB::raw("CONCAT(brands.brand, ' - ', inventories.items_specs)"), '=', $item['name'])
                    ->select('inventories.*')
                    ->first();
            } else {
                // For non-inventory items
                $inventory = DB::table('inventories')
                    ->join('units', 'inventories.unit_id', '=', 'units.id')
                    ->where('inventories.items_specs', '=', $item['name'])
                    ->where('inventories.unit_id', '=', $item['unit_id'])
                    ->where('inventories.unit_price', '=', $item['unit_price'])
                    ->select('inventories.*')
                    ->first();
            }

            $supplyRequest = new SupplyRequest();
            $supplyRequest->request_id = Str::uuid();
            $supplyRequest->request_group_id = $requestGroupId;
            $supplyRequest->department_id = $request->department_id;
            $supplyRequest->requester = auth()->user()->first_name . ' ' . auth()->user()->last_name;
            $supplyRequest->quantity = $item['quantity'];
            $supplyRequest->item_name = $item['name'];
            
            if ($inventory) {
                // For existing inventory items
                $supplyRequest->inventory_id = $inventory->id;
            } else {
                // For non-inventory items
                $supplyRequest->brand_id = $item['brand_id'];
                $supplyRequest->unit_id = $item['unit_id'];
                $supplyRequest->supplier_id = $item['supplier_id'];
                $supplyRequest->estimated_unit_price = $item['unit_price'];
            }

            $supplyRequest->notes = $request->notes;
            $supplyRequest->save();
        }

        return redirect()->route('inventory.supply.request')->with('success', 'Supply request submitted successfully.');
    }

    public function showSupplyRequestDetails($request_group_id)
    {
        $requests = SupplyRequest::with(['department', 'unit', 'inventory'])
            ->where('request_group_id', $request_group_id)
            ->get();

        if ($requests->isEmpty()) {
            abort(404);
        }

        $totalItems = $requests->count();
        $totalPrice = 0;
        
        // Check if all items in the request are approved
        $allApproved = $requests->every(function($request) {
            return $request->status === 'approved';
        });

        // Check if any item is rejected
        $anyRejected = $requests->contains(function($request) {
            return $request->status === 'rejected';
        });

        // Check if any item is approved or partially approved
        $anyApproved = $requests->contains(function($request) {
            return $request->status === 'approved' || $request->status === 'partially_approved';
        });

        // Check if any item is cancelled
        $anyCancelled = $requests->contains(function($request) {
            return $request->status === 'cancelled';
        });

        // Update the overall status
        if ($anyCancelled) {
            $overallStatus = 'cancelled';
        } elseif ($allApproved) {
            $overallStatus = 'approved';
        } elseif ($anyRejected) {
            $overallStatus = 'rejected';
        } elseif ($anyApproved) {
            $overallStatus = 'partially_approved';
        } else {
            $overallStatus = 'pending';
        }
        
        foreach ($requests as $request) {
            if ($request->inventory_id) {
                // For inventory items
                $inventory = \DB::table('inventories')
                    ->join('brands', 'inventories.brand_id', '=', 'brands.id')
                    ->join('units', 'inventories.unit_id', '=', 'units.id')
                    ->where('inventories.id', '=', $request->inventory_id)
                    ->select('inventories.unit_price', 'units.unit')
                    ->first();

                if ($inventory) {
                    // Use estimated_unit_price if it exists (for previously non-inventory items)
                    $request->unit_price = $request->estimated_unit_price ?? $inventory->unit_price;
                    $request->total_price = $request->unit_price * $request->quantity;
                    $request->unit_name = $request->unit ? $request->unit->unit : $inventory->unit;
                }
            } else {
                // For non-inventory items
                $request->unit_price = $request->estimated_unit_price;
                $request->total_price = $request->estimated_unit_price * $request->quantity;
                $request->unit_name = $request->unit ? $request->unit->unit : '';
            }
            
            $totalPrice += $request->total_price;
        }

        // Store the URL that brought us to this page
        session(['supply_request_return_url' => url()->previous()]);

        return view('fcu-ams.inventory.supplyRequestDetails', [
            'requests' => $requests,
            'totalItems' => $totalItems,
            'totalPrice' => $totalPrice,
            'overallStatus' => $overallStatus
        ]);
    }

    public function approveSupplyRequest(Request $request, $request_group_id)
    {
        try {
            DB::beginTransaction();

            $requests = SupplyRequest::where('request_group_id', $request_group_id)
                ->with(['inventory' => function($query) {
                    $query->withoutTrashed();
                }])
                ->get();

            if ($requests->isEmpty()) {
                return redirect()->back()->with('error', 'Supply request not found.');
            }

            foreach ($requests as $supplyRequest) {
                // Skip if already approved
                if ($supplyRequest->status === 'approved') {
                    continue;
                }

                // Simply mark the request as approved
                $supplyRequest->status = 'approved';
                $supplyRequest->save();
            }

            DB::commit();
            return redirect()->back()->with('success', 'Supply request approved successfully.');

        } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->with('error', 'An error occurred while processing the request.');
        }
    }

    public function rejectSupplyRequest($request_group_id)
    {
        $requests = SupplyRequest::where('request_group_id', $request_group_id)->get();
        
        if ($requests->isEmpty()) {
            return redirect()->back()->withErrors(['Supply request not found.']);
        }

        DB::beginTransaction();
        try {
            foreach ($requests as $request) {
                $request->status = 'rejected';
                $request->save();
            }
            
            DB::commit();
            $returnUrl = session('supply_request_return_url');
            session()->forget('supply_request_return_url'); // Clear the session after use
            return redirect($returnUrl ?? url()->previous())->with('success', 'Supply request rejected successfully.');
        } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->withErrors(['Failed to reject supply request.']);
        }
    }

    public function cancelSupplyRequest($request_group_id)
    {
        $requests = SupplyRequest::where('request_group_id', $request_group_id)->get();
        
        if ($requests->isEmpty()) {
            return redirect()->back()->with('error', 'Supply request not found.');
        }

        DB::beginTransaction();
        try {
            foreach ($requests as $request) {
                // If the request was approved, return the quantity back to inventory
                if ($request->status === 'approved' && $request->inventory_id) {
                    $inventory = Inventory::find($request->inventory_id);
                    if ($inventory) {
                        $inventory->quantity += $request->quantity;
                        $inventory->save();
                    }
                }
                
                $request->status = 'cancelled';
                $request->save();
            }
            
            DB::commit();
            return redirect()->back()->with('success', 'Supply request cancelled successfully.');
        } catch (\Exception $e) {
            DB::rollback();
            return redirect()->back()->with('error', 'Failed to cancel supply request. Please try again.');
        }
    }

    public function printSupplyRequest($request_group_id)
    {
        $user = auth()->user();
        if ($user->role === 'Department') {
            abort(403, 'Unauthorized action.');
        }

        $requests = SupplyRequest::with(['department', 'inventory'])
            ->where('request_group_id', $request_group_id)
            ->get();

        if ($requests->isEmpty()) {
            abort(404);
        }

        $totalItems = $requests->count();
        $totalPrice = 0;
        
        foreach ($requests as $request) {
            if ($request->inventory_id) {
                // For inventory items
                $request->unit_price = $request->inventory->unit_price;
                $request->total_price = $request->inventory->unit_price * $request->quantity;
            } else {
                // For non-inventory items
                $request->unit_price = $request->estimated_unit_price;
                $request->total_price = $request->estimated_unit_price * $request->quantity;
            }
            $totalPrice += $request->total_price;
        }

        return view('fcu-ams.inventory.printSupplyRequest', compact('requests', 'totalItems', 'totalPrice'));
    }

    public function export() { 
        return Excel::download(new InventoryExport, 'inventories.csv');
    }

    public function myRequests()
    {
        $user = auth()->user();
        
        $requests = SupplyRequest::select(
                'request_group_id', 
                'requester', 
                'department_id',
                DB::raw('MIN(created_at) as request_date'),
                DB::raw('COUNT(*) as items_count'),
                DB::raw('MAX(status) as group_status'),
                DB::raw('CASE 
                    WHEN MAX(status) = "pending" THEN 1
                    WHEN MAX(status) = "partially_approved" THEN 2
                    WHEN MAX(status) = "approved" THEN 3
                    WHEN MAX(status) = "rejected" THEN 4
                    ELSE 5 END as status_priority')
            )
            ->where('requester', $user->first_name . ' ' . $user->last_name)
            ->groupBy('request_group_id', 'requester', 'department_id')
            ->with('department')
            ->orderBy('status_priority', 'asc')
            ->orderBy('request_date', 'desc')
            ->get();
            
        return view('fcu-ams.inventory.myRequests', compact('requests'));
    }

    public function notifications()
    {
        $user = auth()->user();
        
        // Update last_checked_notifications timestamp
        $user->update(['last_checked_notifications' => now()]);
        
        $notifications = SupplyRequest::select(
                'request_group_id', 
                'requester', 
                'department_id',
                DB::raw('GREATEST(MAX(updated_at), MAX(created_at)) as request_date'),
                DB::raw('COUNT(*) as items_count'),
                DB::raw('MAX(status) as group_status'),
                DB::raw('CASE 
                    WHEN MAX(status) = "pending" THEN 1
                    WHEN MAX(status) = "partially_approved" THEN 2
                    WHEN MAX(status) = "approved" THEN 3
                    WHEN MAX(status) = "rejected" THEN 4
                    ELSE 5 END as status_priority')
            )
            ->where('requester', $user->first_name . ' ' . $user->last_name)
            ->groupBy('request_group_id', 'requester', 'department_id')
            ->with('department')
            ->orderBy('status_priority', 'asc')
            ->orderBy('request_date', 'desc')
            ->get();
            
        return view('fcu-ams.request.notifications', compact('notifications'));
    }
    
    private function determinePrimaryStatus($statuses)
    {
        $statusPriority = [
            'pending' => 1,
            'partially_approved' => 2,
            'approved' => 3,
            'rejected' => 4,
            'cancelled' => 5
        ];
    
        return collect($statuses)->sort(function ($a, $b) use ($statusPriority) {
            return ($statusPriority[$a] ?? 6) - ($statusPriority[$b] ?? 6);
        })->first();
    }

    public function searchItems(Request $request)
    {
        try {
            \Log::info('Search request received', ['query' => $request->input('query')]);
            
            $search = $request->input('query');
            
            if (empty($search)) {
                return response()->json([]);
            }

            $items = DB::table('inventories')
                ->select(
                    'inventories.id',
                    'inventories.items_specs',
                    'inventories.unit_price as price',
                    'inventories.quantity',
                    'brands.brand',
                    'units.unit'
                )
                ->join('brands', 'inventories.brand_id', '=', 'brands.id')
                ->join('units', 'inventories.unit_id', '=', 'units.id')
                ->whereNull('inventories.deleted_at')
                ->where('inventories.quantity', '>=', 0)
                ->where(function($q) use ($search) {
                    $q->where('inventories.items_specs', 'like', "%{$search}%")
                        ->orWhere('brands.brand', 'like', "%{$search}%");
                })
                ->limit(10)
                ->get();

            \Log::info('Search results', ['count' => $items->count(), 'items' => $items]);

            return response()->json($items)
                ->header('Content-Type', 'application/json');
            
        } catch (\Exception $e) {
            \Log::error('Error in searchItems', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return response()->json(['error' => $e->getMessage()], 500)
                ->header('Content-Type', 'application/json');
        }
    }

    public function updateSupplyRequest(Request $request, $request_group_id)
    {
        try {
            DB::beginTransaction();

            // Validate request
            $request->validate([
                'items' => 'required|json',
                'new_items' => 'nullable|json'
            ]);

            $items = json_decode($request->items, true);
            $newItems = $request->has('new_items') ? json_decode($request->new_items, true) : [];
            $user = auth()->user();

            // Get all existing requests in this group
            $existingRequests = SupplyRequest::where('request_group_id', $request_group_id)->get();
            
            // Log existing requests
            \Log::info('Existing requests', [
                'count' => $existingRequests->count(),
                'request_group_id' => $request_group_id,
                'requests' => $existingRequests->toArray()
            ]);

            // Only allow editing if user is the requester and request is not approved/rejected
            $canEdit = $existingRequests->first()->requester === $user->first_name . ' ' . $user->last_name
                && !$existingRequests->contains('status', 'approved')
                && !$existingRequests->contains('status', 'rejected')
                && !$existingRequests->contains('status', 'cancelled');

            if (!$canEdit) {
                return response()->json([
                    'success' => false,
                    'message' => 'You cannot edit this request.'
                ], 403);
            }

            // Get all request IDs from the submitted form
            $submittedRequestIds = collect($items)->pluck('request_id')->filter()->all();

            // Delete items that were removed (not present in the submitted form)
            foreach ($existingRequests as $existingRequest) {
                if (!in_array($existingRequest->id, $submittedRequestIds)) {
                    \Log::info('Deleting request', [
                        'request_id' => $existingRequest->id,
                        'request_group_id' => $existingRequest->request_group_id
                    ]);
                    $existingRequest->delete();
                }
            }

            // Update quantities for existing items
            foreach ($items as $item) {
                if (isset($item['request_id'])) {
                    $supplyRequest = $existingRequests->find($item['request_id']);
                    if ($supplyRequest) {
                        $supplyRequest->quantity = $item['quantity'];
                        $supplyRequest->save();
                        \Log::info('Updated existing item', [
                            'request_id' => $supplyRequest->id,
                            'request_group_id' => $supplyRequest->request_group_id,
                            'quantity' => $item['quantity']
                        ]);
                    }
                }
            }

            // Handle new items
            if (!empty($newItems)) {
                foreach ($newItems as $newItem) {
                    $supplyRequest = new SupplyRequest();
                    $supplyRequest->request_id = Str::uuid();
                    $supplyRequest->request_group_id = $request_group_id;
                    $supplyRequest->department_id = $existingRequests->first()->department_id;
                    $supplyRequest->requester = $user->first_name . ' ' . $user->last_name;
                    $supplyRequest->item_name = $newItem['name'];
                    $supplyRequest->quantity = $newItem['quantity'];
                    $supplyRequest->status = 'pending';
                    
                    // Try to find matching inventory
                    $inventory = DB::table('inventories')
                        ->join('brands', 'inventories.brand_id', '=', 'brands.id')
                        ->where(DB::raw("CONCAT(brands.brand, ' - ', inventories.items_specs)"), '=', $newItem['name'])
                        ->select('inventories.*')
                        ->first();

                    if ($inventory) {
                        $supplyRequest->inventory_id = $inventory->id;
                    } else {
                        // For non-inventory items
                        $supplyRequest->estimated_unit_price = $newItem['unit_price'];
                    }
                    
                    $supplyRequest->save();

                    \Log::info('Added new item', [
                        'request_id' => $supplyRequest->request_id,
                        'request_group_id' => $supplyRequest->request_group_id,
                        'item_name' => $newItem['name'],
                        'quantity' => $newItem['quantity']
                    ]);
                }
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Supply request updated successfully.'
            ]);

        } catch (\Exception $e) {
            DB::rollback();
            \Log::error('Error updating supply request', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json([
                'success' => false,
                'message' => 'Error updating supply request: ' . $e->getMessage()
            ], 500);
        }
    }

    public function import(Request $request)
    {
        try {
            if (!auth()->check()) {
                return redirect()->back()->with('error', 'You must be logged in to import data.');
            }

            $userId = auth()->id();

            if (!$request->hasFile('file')) {
                return redirect()->back()->with('error', 'No file uploaded.');
            }

            $file = $request->file('file');
            $successCount = 0;
            $errorCount = 0;
            $skippedRows = []; // Keep track of skipped rows

            DB::beginTransaction();

            $data = Excel::toArray([], $file)[0];
            
            if (empty($data)) {
                DB::rollback();
                return redirect()->back()->with('error', 'The uploaded file is empty.');
            }

            // Get the headers from the first row and convert to lowercase
            $headers = array_map('strtolower', $data[0]);
            
            // Remove the header row
            array_shift($data);

            foreach ($data as $rowNumber => $row) {
                $currentRowNumber = $rowNumber + 2; // Excel row number
                $rowData = null;
                try {
                    // Pad the row with nulls if it has fewer columns than headers
                    $row = array_pad($row, count($headers), null);
                    $rowData = array_combine($headers, $row);

                    // Trim whitespace from all values
                    $rowData = array_map(function($value) {
                        return is_string($value) ? trim($value) : $value;
                    }, $rowData);

                    // Skip empty rows
                    if (empty(array_filter($rowData, function($value) { return !is_null($value) && $value !== ''; }))) {
                        continue;
                    }

                    // Validate required fields
                    $requiredImportHeaders = ['items_specs', 'quantity', 'unit', 'brand', 'unit_price', 'supplier'];
                    $missingImportFields = [];
                    foreach ($requiredImportHeaders as $reqHeader) {
                        if (!isset($rowData[$reqHeader]) || $rowData[$reqHeader] === '' || is_null($rowData[$reqHeader])) {
                             $missingImportFields[] = $reqHeader;
                        }
                    }
                    if (!empty($missingImportFields)) {
                        throw new \Exception('Missing required fields: ' . implode(', ', $missingImportFields));
                    }

                    // Find or create unit
                    $unit = Unit::firstOrCreate(['unit' => $rowData['unit']]);

                    // Find or create brand
                    $brand = Brand::firstOrCreate(['brand' => $rowData['brand']]);

                    // Find or create supplier using the correct column name 'supplier'
                    $supplier = Supplier::firstOrCreate(['supplier' => $rowData['supplier']]);

                    // Clean up the unit price (remove currency symbol and commas)
                    $unitPrice = str_replace(['₱', ',', '$'], '', $rowData['unit_price']);
                    if (!is_numeric($unitPrice)) {
                        throw new \Exception('Invalid format for unit_price field.');
                    }
                    if (!is_numeric($rowData['quantity'])) {
                        throw new \Exception('Invalid format for quantity field.');
                    }

                    // Check if supplier was found/created successfully
                    if (!$supplier || !$supplier->id) {
                        throw new \Exception('Failed to create or find supplier');
                    }

                    // --- Check for existing inventory ---
                    $existingInventory = Inventory::where('items_specs', $rowData['items_specs'])
                        ->where('brand_id', $brand->id)
                        ->where('unit_id', $unit->id)
                        ->where('unit_price', $unitPrice)
                        ->where('supplier_id', $supplier->id)
                        ->whereNull('deleted_at')
                        ->first();

                    if ($existingInventory) {
                        // --- Update existing inventory quantity ---
                        $existingInventory->quantity += $rowData['quantity'];
                        $existingInventory->save();
                        \Log::info('Updated existing inventory quantity:', [
                            'row_number' => $currentRowNumber,
                            'inventory_id' => $existingInventory->id,
                            'added_quantity' => $rowData['quantity']
                        ]);
                    } else {
                        // --- Create new inventory item ---
                        $inventory = new Inventory([
                            'items_specs' => $rowData['items_specs'],
                            'quantity' => $rowData['quantity'],
                            'unit_id' => $unit->id,
                            'brand_id' => $brand->id,
                            'unit_price' => $unitPrice,
                            'supplier_id' => $supplier->id,  // Explicitly set supplier_id
                            'created_by' => $userId, // Use the fetched user ID
                        ]);
                        $inventory->save();
                    }

                    $successCount++;

                } catch (\Exception $e) {
                    $errorCount++;
                    $skippedRows[] = $currentRowNumber; // Add row number to skipped list
                    \Log::error('Error processing inventory import row:', [
                        'row_number' => $currentRowNumber,
                        'error' => $e->getMessage(),
                        'data' => $rowData ?? $row // Log raw row if array_combine failed
                    ]);
                    // Optional: Continue to next row instead of rolling back immediately
                }
            }

            DB::commit();

            $message = "Inventory import completed. Successfully processed/updated {$successCount} items.";
            if ($errorCount > 0) {
                // Ensure skipped rows are unique in the message
                $uniqueSkippedRows = array_unique($skippedRows);
                sort($uniqueSkippedRows); // Optional: sort row numbers
                $message .= " {$errorCount} rows were skipped due to errors (Rows: " . implode(', ', $uniqueSkippedRows) . "). Check logs for details.";
            }

            return redirect()->route('inventory.list')->with('success', $message); // Redirect to inventory list

        } catch (\Exception $e) {
            DB::rollback();
            \Log::error('Inventory import failed:', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
             // Provide more specific error if possible
            if (isset($currentRowNumber)) {
                return redirect()->back()->with('error', "Error importing data near row {$currentRowNumber}: " . $e->getMessage());
            } else {
                return redirect()->back()->with('error', 'Error importing data: ' . $e->getMessage());
            }
        }
    }

    public function importAsset(Request $request)
    {
        try {
            if (!auth()->check()) {
                return redirect()->back()->with('error', 'You must be logged in to import data.');
            }

            $userId = auth()->user()->id;

            if (!$request->hasFile('file')) {
                return redirect()->back()->with('error', 'No file uploaded.');
            }

            $file = $request->file('file');
            $successCount = 0;
            $errorCount = 0;
            $skippedRows = []; // Keep track of skipped rows for detailed feedback

            DB::beginTransaction();

            $data = Excel::toArray([], $file)[0];

            if (empty($data) || count($data) < 2) { // Check if data exists and has at least one data row besides header
                DB::rollback();
                return redirect()->back()->with('error', 'The uploaded file is empty or missing headers.');
            }

            // Get the headers from the first row and convert to lowercase, trim whitespace
            $headers = array_map(function($header) {
                return trim(strtolower($header));
            }, $data[0]);

            // Define required headers based on the assets table structure
            $requiredHeaders = [
                'asset_tag_id', 'brand', 'model', 'serial_number', 'cost',
                'supplier', 'site', 'location', 'category', 'department', 'purchase_date'
            ];
            // Optional but commonly used headers
            $optionalHeaders = ['specs', 'status', 'condition', 'notes', 'assigned_to', 'issued_date'];

            // Check if all required headers are present
            $missingHeaders = array_diff($requiredHeaders, $headers);
            if (!empty($missingHeaders)) {
                DB::rollback();
                return redirect()->back()->with('error', 'Missing required columns in the file: ' . implode(', ', $missingHeaders));
            }

            // Remove the header row
            array_shift($data);

            foreach ($data as $rowNumber => $row) {
                $currentRowNumber = $rowNumber + 2; // Excel row number (1-based index + header)
                $rowData = null; // Initialize rowData for logging in case of early failure
                try {
                    // Pad the row with nulls if it has fewer columns than headers
                    $row = array_pad($row, count($headers), null);
                    $rowData = array_combine($headers, $row);

                    // Trim whitespace from all values
                    $rowData = array_map(function($value) {
                        return is_string($value) ? trim($value) : $value;
                    }, $rowData);

                    // Skip empty rows (all values are null or empty strings)
                    if (empty(array_filter($rowData, function($value) { return !is_null($value) && $value !== ''; }))) {
                        continue;
                    }

                    // --- Basic Validation ---
                    $missingFields = [];
                    foreach ($requiredHeaders as $reqHeader) {
                        if (!isset($rowData[$reqHeader]) || $rowData[$reqHeader] === '' || is_null($rowData[$reqHeader])) {
                            $missingFields[] = $reqHeader;
                        }
                    }
                    if (!empty($missingFields)) {
                        throw new \Exception('Missing required fields: ' . implode(', ', $missingFields));
                    }

                    // --- Check if Asset Tag ID already exists ---
                    $assetTagId = $rowData['asset_tag_id'];
                    if (Asset::where('asset_tag_id', $assetTagId)->exists()) {
                        $errorCount++;
                        $skippedRows[] = $currentRowNumber;
                        \Log::warning('Skipping asset import row due to existing asset_tag_id:', [
                            'row_number' => $currentRowNumber,
                            'asset_tag_id' => $assetTagId,
                            'data' => $rowData
                        ]);
                        continue; // Skip to the next row
                    }

                    // --- Look up or Create Related Models ---
                    $brand = Brand::firstOrCreate(['brand' => $rowData['brand']]);
                    $supplier = Supplier::firstOrCreate(['supplier' => $rowData['supplier']]);
                    $site = Site::firstOrCreate(['site' => $rowData['site']]);
                    $location = Location::firstOrCreate(['location' => $rowData['location']]);
                    $category = Category::firstOrCreate(['category' => $rowData['category']]);
                    $department = Department::firstOrCreate(['department' => $rowData['department']]);

                    // Optional: Status and Condition
                    $status = isset($rowData['status']) && !empty($rowData['status']) ? Status::firstOrCreate(['status' => $rowData['status']]) : null;
                    $condition = isset($rowData['condition']) && !empty($rowData['condition']) ? Condition::firstOrCreate(['condition' => $rowData['condition']]) : null;

                    // --- Data Cleaning and Formatting ---
                    // Clean up the cost (remove currency symbols and commas)
                    $cost = str_replace([',', '₱', '$'], '', $rowData['cost']);
                    if (!is_numeric($cost)) {
                        throw new \Exception('Invalid format for cost field.');
                    }

                    // --- Parse Purchase Date ---
                    $purchaseDateInput = $rowData['purchase_date'];
                    $purchaseDate = null; // Initialize variable
                    try {
                        if (is_numeric($purchaseDateInput)) {
                            $purchaseDate = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($purchaseDateInput)->format('Y-m-d');
                        } elseif (is_string($purchaseDateInput) && !empty($purchaseDateInput)) {
                            try {
                                $purchaseDate = Carbon::createFromFormat('d/m/Y', $purchaseDateInput)->format('Y-m-d');
                            } catch (\InvalidArgumentException $e1) {
                                try {
                                    $purchaseDate = Carbon::parse($purchaseDateInput)->format('Y-m-d');
                                } catch (\Exception $e2) {
                                    throw new \Exception("Could not parse date '{$purchaseDateInput}'. Expected formats like DD/MM/YYYY, YYYY-MM-DD, or Excel numeric date.");
                                }
                            }
                        }
                        if (is_null($purchaseDate) && in_array('purchase_date', $requiredHeaders)) {
                             throw new \Exception("Purchase date '{$purchaseDateInput}' is empty or could not be parsed, and it is required.");
                        }
                    } catch (\Exception $dateError) {
                        throw new \Exception('Error parsing purchase_date field: ' . $dateError->getMessage());
                    }

                    // --- Parse Issued Date (Optional) ---
                    $issuedDateInput = $rowData['issued_date'] ?? null; // Get value if header exists
                    $issuedDate = null; // Initialize variable
                    if (!empty($issuedDateInput)) { // Only parse if there's a value
                        try {
                            if (is_numeric($issuedDateInput)) {
                                // Handle Excel numeric date format
                                $issuedDate = \PhpOffice\PhpSpreadsheet\Shared\Date::excelToDateTimeObject($issuedDateInput)->format('Y-m-d');
                            } elseif (is_string($issuedDateInput)) {
                                // Attempt to parse specific formats, prioritizing d/m/Y
                                try {
                                    // Try d/m/Y format first
                                    $issuedDate = Carbon::createFromFormat('d/m/Y', $issuedDateInput)->format('Y-m-d');
                                } catch (\InvalidArgumentException $e1) {
                                    try {
                                        // Fallback to general parse
                                        $issuedDate = Carbon::parse($issuedDateInput)->format('Y-m-d');
                                    } catch (\Exception $e2) {
                                        // Log warning instead of throwing error for optional field
                                        \Log::warning('Could not parse optional issued_date field:', [
                                            'row_number' => $currentRowNumber,
                                            'value' => $issuedDateInput,
                                            'error' => $e2->getMessage()
                                        ]);
                                        // Keep $issuedDate as null if parsing fails
                                    }
                                }
                            }
                        } catch (\Exception $dateError) {
                             \Log::warning('Error parsing optional issued_date field:', [
                                'row_number' => $currentRowNumber,
                                'value' => $issuedDateInput,
                                'error' => $dateError->getMessage()
                             ]);
                             // Keep $issuedDate as null if parsing fails
                        }
                    }

                    // --- Create Asset ---
                    $asset = new Asset([
                        'asset_tag_id' => $assetTagId, // Use the validated asset tag ID
                        'brand_id' => $brand->id,
                        'model' => $rowData['model'],
                        'specs' => $rowData['specs'] ?? null,
                        'serial_number' => $rowData['serial_number'],
                        'cost' => $cost,
                        'supplier_id' => $supplier->id,
                        'site_id' => $site->id,
                        'location_id' => $location->id,
                        'category_id' => $category->id,
                        'department_id' => $department->id,
                        'purchase_date' => $purchaseDate, // Use the parsed date
                        'status_id' => $status ? $status->id : 1,
                        'condition_id' => $condition ? $condition->id : 1,
                        'notes' => $rowData['notes'] ?? null,
                        'created_by' => $userId, // Use the fetched user ID
                        'assigned_to' => $rowData['assigned_to'] ?? null,
                        'issued_date' => $issuedDate,
                    ]);

                    $asset->save();
                    $successCount++;

                } catch (\Exception $e) {
                    $errorCount++;
                    $skippedRows[] = $currentRowNumber; // Add row number to skipped list
                    \Log::error('Error processing asset import row:', [
                        'row_number' => $currentRowNumber,
                        'error' => $e->getMessage(),
                        'data' => $rowData ?? $row // Log raw row if array_combine failed or other early error
                    ]);
                    // Optional: Continue to next row instead of rolling back immediately
                    // DB::rollback(); // Uncomment if you want to stop the entire import on first error
                    // return redirect()->back()->with('error', "Error processing row {$currentRowNumber}: " . $e->getMessage()); // Uncomment for immediate feedback
                }
            }

            // If we processed all rows without critical failure (or chose to continue on errors)
            DB::commit();

            $message = "Asset import completed. Successfully processed {$successCount} assets.";
            if ($errorCount > 0) {
                // Ensure skipped rows are unique in the message
                $uniqueSkippedRows = array_unique($skippedRows);
                sort($uniqueSkippedRows); // Optional: sort row numbers
                $message .= " {$errorCount} rows were skipped due to errors or existing data (Rows: " . implode(', ', $uniqueSkippedRows) . "). Check logs for details.";
            }

            return redirect()->route('asset.list')->with('success', $message); // Redirect to asset list

        } catch (\Exception $e) {
            DB::rollback();
            \Log::error('Asset import failed:', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            // Provide more specific error if possible
            if (isset($currentRowNumber)) {
                return redirect()->back()->with('error', "Error importing data near row {$currentRowNumber}: " . $e->getMessage());
            } else {
                return redirect()->back()->with('error', 'Error importing data: ' . $e->getMessage());
            }
        }
    }
}
</file>

</files>
