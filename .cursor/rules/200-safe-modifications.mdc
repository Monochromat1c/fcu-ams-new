---
description: ENFORCE when MODIFYING CODE to ensure safe and consistent code modifications
globs: **/*
alwaysApply: true
---
# Safe Code Modification Rules

## Context First
- ALWAYS read and understand the complete context before making any modifications
- Use available tools to search and read relevant code sections
- Ensure understanding of dependencies and related components
- If context is unclear, ask clarifying questions before proceeding

## Stay Within Scope
- Only modify code that is directly related to the user's request
- Do not make changes to unrelated components or files
- If a change might affect other parts of the system, explicitly mention this to the user
- When in doubt about scope, ask for clarification

## Follow User Instructions
- Only implement changes that were explicitly requested by the user
- Do not add "nice to have" features without user approval
- Do not refactor code unless specifically asked
- If improvements are noticed, suggest them to the user instead of implementing them directly

## Preserve Existing Code
- Never remove code unless explicitly requested by the user
- Keep existing comments and documentation intact
- Maintain the original code style and formatting
- Use `// ... existing code ...` comments to indicate unchanged sections

## Verification Steps
1. Before making changes:
   - Read all relevant code
   - Understand the context
   - Confirm the scope with available information
   - **Identify all data display elements and their sources**
2. During changes:
   - Stay strictly within requested modifications
   - Preserve existing functionality
   - Document what is being changed
   - **Ensure all data display elements remain intact**
3. After changes:
   - Verify changes match the user's request
   - Ensure no unintended modifications
   - **Validate all data is still being displayed**
   - Report what was changed to the user

## Examples

### Good Practice:
```
User: "Update the styling of the user info section"
Assistant: *reads entire section and identifies data elements*
Assistant: *preserves all {{ $variable }} and data displays*
Assistant: *only updates CSS classes and layout structure*
```

### Bad Practice:
```
User: "Update the styling of the user info section"
Assistant: *modifies section without checking data elements*
Assistant: *accidentally removes {{ $variable }} displays*
Assistant: *focuses only on visual improvements*
``` 